/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–æ–ª–µ–π
 */
import { getAllRoles } from '../../../shared/rolesRegistry.js'

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–æ–ª–µ–π
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} roleId - ID —Ä–æ–ª–∏
 */
export const handleRoleImageError = (event, roleId) => {
  console.log(`‚ö†Ô∏è Image error for role ${roleId}, trying fallback...`)
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é
  if (event.target.src.includes('compressed')) {
    console.log(`üì∏ Trying uncompressed image for role ${roleId}`)
    event.target.src = `/roles/${roleId}.png`
  } else if (event.target.src.includes('.png')) {
    // –ï—Å–ª–∏ PNG –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º JPG
    console.log(`üì∏ Trying JPG fallback for role ${roleId}`)
    event.target.src = `/roles/${roleId}.jpg`
  } else {
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–≥–ª—É—à–∫—É
    console.log(`üì∏ Creating text placeholder for role ${roleId}`)
    
    const canvas = document.createElement('canvas')
    const ctx = canvas.getContext('2d')
    canvas.width = 100
    canvas.height = 140
    
    // –§–æ–Ω
    ctx.fillStyle = '#2d3748'
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    
    // –†–∞–º–∫–∞
    ctx.strokeStyle = '#4a5568'
    ctx.lineWidth = 2
    ctx.strokeRect(0, 0, canvas.width, canvas.height)
    
    // –¢–µ–∫—Å—Ç
    ctx.fillStyle = '#e2e8f0'
    ctx.font = '12px Arial'
    ctx.textAlign = 'center'
    const roles = getAllRoles()
    const role = roles[roleId]
    const roleName = role ? role.name : roleId
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const words = roleName.split(' ')
    let lines = []
    let currentLine = ''
    
    words.forEach(word => {
      const testLine = currentLine + (currentLine ? ' ' : '') + word
      const metrics = ctx.measureText(testLine)
      if (metrics.width > canvas.width - 10 && currentLine) {
        lines.push(currentLine)
        currentLine = word
      } else {
        currentLine = testLine
      }
    })
    if (currentLine) lines.push(currentLine)
    
    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
    const lineHeight = 16
    const startY = (canvas.height - (lines.length * lineHeight)) / 2 + lineHeight
    lines.forEach((line, index) => {
      ctx.fillText(line, canvas.width / 2, startY + (index * lineHeight))
    })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    event.target.src = canvas.toDataURL()
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –≥–¥–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ fallback –∫ card-back
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} roleId - ID —Ä–æ–ª–∏
 */
export const handleRoleImageErrorSimple = (event, roleId) => {
  console.log(`‚ö†Ô∏è Image error for role ${roleId}, trying fallback...`)
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é
  if (event.target.src.includes('compressed')) {
    console.log(`üì∏ Trying uncompressed image for role ${roleId}`)
    event.target.src = `/roles/${roleId}.png`
  } else if (event.target.src.includes('.png')) {
    // –ï—Å–ª–∏ PNG –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º JPG
    console.log(`üì∏ Trying JPG fallback for role ${roleId}`)
    event.target.src = `/roles/${roleId}.jpg`
  } else {
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º card-back
    console.log(`üì∏ Using card-back fallback for role ${roleId}`)
    event.target.src = '/roles/card-back.png'
  }
}