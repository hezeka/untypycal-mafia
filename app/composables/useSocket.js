/**
 * Socket.IO composable - –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
 */

import { ref, onMounted, onUnmounted } from 'vue'
import { io } from 'socket.io-client'

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∫–µ—Ç–∞ (singleton)
let socketInstance = null
const isConnected = ref(false)
const connectionError = ref(null)

export const useSocket = () => {
  const socket = ref(socketInstance)
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç—É
   */
  const initSocket = () => {
    if (socketInstance) {
      return socketInstance
    }
    
    const serverUrl = process.env.NODE_ENV === 'production'
      ? 'https://mafia.waifucards.app'
      : 'http://localhost:3001'
    
    console.log(`üîå Connecting to socket server: ${serverUrl}`)
    
    socketInstance = io(serverUrl, {
      transports: ['websocket', 'polling'],
      timeout: 20000,
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      reconnectionAttempts: 5
    })
    
    socket.value = socketInstance
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socketInstance.on('connect', () => {
      console.log('‚úÖ Connected to server:', socketInstance.id)
      isConnected.value = true
      connectionError.value = null
    })
    
    socketInstance.on('disconnect', (reason) => {
      console.warn('‚ùå Disconnected from server:', reason)
      isConnected.value = false
      
      if (reason === 'io server disconnect') {
        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        socketInstance.connect()
      }
    })
    
    socketInstance.on('connect_error', (error) => {
      console.error('üîå Connection error:', error)
      isConnected.value = false
      connectionError.value = error.message
    })
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socketInstance.on('reconnect', (attemptNumber) => {
      console.log(`üîÑ Reconnected after ${attemptNumber} attempts`)
      isConnected.value = true
      connectionError.value = null
    })
    
    socketInstance.on('reconnect_attempt', (attemptNumber) => {
      console.log(`üîÑ Reconnection attempt ${attemptNumber}`)
    })
    
    socketInstance.on('reconnect_error', (error) => {
      console.error('üîÑ Reconnection error:', error)
      connectionError.value = error.message
    })
    
    socketInstance.on('reconnect_failed', () => {
      console.error('üíÄ Reconnection failed')
      connectionError.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    })
    
    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    socketInstance.on('error', (error) => {
      console.error('‚ö†Ô∏è Socket error:', error)
    })
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socketInstance.on('connected', (data) => {
      console.log('üéâ Server acknowledged connection:', data)
    })
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
    socketInstance.on('server-shutdown', (data) => {
      console.warn('üîÑ Server shutdown:', data.message)
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    })
    
    return socketInstance
  }
  
  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞
   */
  const disconnectSocket = () => {
    if (socketInstance) {
      console.log('üîå Disconnecting from server')
      socketInstance.disconnect()
      socketInstance = null
      socket.value = null
      isConnected.value = false
    }
  }
  
  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
   */
  const reconnectSocket = () => {
    if (socketInstance) {
      console.log('üîÑ Manual reconnection')
      socketInstance.connect()
    } else {
      initSocket()
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  const emit = (event, data = {}, callback = null) => {
    if (!socketInstance || !isConnected.value) {
      console.warn('‚ö†Ô∏è Cannot emit - not connected to server')
      return false
    }
    
    try {
      if (callback) {
        socketInstance.emit(event, data, callback)
      } else {
        socketInstance.emit(event, data)
      }
      
      return true
    } catch (error) {
      console.error(`‚ùå Error emitting ${event}:`, error)
      return false
    }
  }
  
  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–æ–π
   */
  const on = (event, handler) => {
    if (!socketInstance) {
      console.warn('‚ö†Ô∏è Cannot subscribe - socket not initialized')
      return () => {}
    }
    
    socketInstance.on(event, handler)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      if (socketInstance) {
        socketInstance.off(event, handler)
      }
    }
  }
  
  /**
   * –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   */
  const once = (event, handler) => {
    if (!socketInstance) {
      console.warn('‚ö†Ô∏è Cannot subscribe - socket not initialized')
      return () => {}
    }
    
    socketInstance.once(event, handler)
    
    return () => {
      if (socketInstance) {
        socketInstance.off(event, handler)
      }
    }
  }
  
  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   */
  const off = (event, handler = null) => {
    if (socketInstance) {
      if (handler) {
        socketInstance.off(event, handler)
      } else {
        socketInstance.off(event)
      }
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  const checkConnection = () => {
    return socketInstance && socketInstance.connected
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–∫–µ—Ç–∞
   */
  const getSocketId = () => {
    return socketInstance ? socketInstance.id : null
  }
  
  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  onMounted(() => {
    if (!socketInstance) {
      initSocket()
    }
  })
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)
   */
  onUnmounted(() => {
    // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    // disconnectSocket()
  })
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    socket,
    isConnected,
    connectionError,
    
    // –ú–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    initSocket,
    disconnectSocket,
    reconnectSocket,
    
    // –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    emit,
    on,
    once,
    off,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    checkConnection,
    getSocketId
  }
}