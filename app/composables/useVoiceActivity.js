// app/composables/useVoiceActivity.js
import { ref, onMounted, onUnmounted } from 'vue'

const isActive = ref(false)
const isSupported = ref(false)
const mediaStream = ref(null)
const audioContext = ref(null)
const analyser = ref(null)
const animationFrame = ref(null)
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏–∑ localStorage –∏–ª–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const getSavedMicrophoneState = () => {
  if (!process.client) return true
  const saved = localStorage.getItem('microphoneEnabled')
  return saved !== null ? JSON.parse(saved) : true
}

const microphoneEnabled = ref(getSavedMicrophoneState())

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ –∫–æ–º–ø–æ–∑–∞–±–ª–∞
let lastActivityState = false
let currentOnActivityChange = null // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π callback –≥–ª–æ–±–∞–ª—å–Ω–æ

export const useVoiceActivity = () => {
  const VOLUME_THRESHOLD = 0.01 // –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  const SMOOTHING = 0.3 // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
  
  const initVoiceDetection = async (onActivityChange) => {
    console.log('üé§ initVoiceDetection started')
    
    if (!shouldUseMicrophone()) {
      console.log('üé§ shouldUseMicrophone returned false')
      return false
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    console.log('üíæ Saving callback for voice detection:', typeof onActivityChange)
    currentOnActivityChange = onActivityChange
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        console.log('Voice detection not supported')
        return false
      }
      
      console.log('üé§ Browser support confirmed')
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      console.log('üîç Requesting microphone access...')
      const mediaPromise = navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        } 
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Microphone access timeout')), 5000)
      })
      
      mediaStream.value = await Promise.race([mediaPromise, timeoutPromise])
      console.log('‚úÖ Microphone access granted')
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      console.log('üîß Creating audio context...')
      audioContext.value = new (window.AudioContext || window.webkitAudioContext)()
      const source = audioContext.value.createMediaStreamSource(mediaStream.value)
      console.log('‚úÖ Audio context created')
      
      // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
      console.log('üîß Creating analyser...')
      analyser.value = audioContext.value.createAnalyser()
      analyser.value.fftSize = 256
      analyser.value.smoothingTimeConstant = SMOOTHING
      source.connect(analyser.value)
      console.log('‚úÖ Analyser created and connected')
      
      isSupported.value = true
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
      console.log('üöÄ Starting volume analysis...')
      startVolumeAnalysis(onActivityChange)
      
      console.log('‚úÖ Voice detection initialized')
      return true
      
    } catch (error) {
      console.error('‚ùå Failed to initialize voice detection:', error)
      return false
    }
  }
  
  const startVolumeAnalysis = (onActivityChange) => {
    if (!analyser.value) return
    
    const bufferLength = analyser.value.frequencyBinCount
    const dataArray = new Uint8Array(bufferLength)
    
    const analyze = () => {
      if (!analyser.value) return
      
      analyser.value.getByteFrequencyData(dataArray)
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      let sum = 0
      for (let i = 0; i < bufferLength; i++) {
        sum += dataArray[i]
      }
      const average = sum / bufferLength / 255 // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const currentlyActive = average > VOLUME_THRESHOLD
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (currentlyActive !== lastActivityState) {
        lastActivityState = currentlyActive
        isActive.value = currentlyActive
        onActivityChange(currentlyActive)
      }
      
      animationFrame.value = requestAnimationFrame(analyze)
    }
    
    analyze()
  }
  
  const stopVoiceDetection = () => {
    console.log('üîá Stopping voice detection...')
    
    // –í–°–ï–ì–î–ê —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (currentOnActivityChange) {
      console.log('üì§ Sending final voice activity stop event')
      currentOnActivityChange(false)
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (animationFrame.value) {
      cancelAnimationFrame(animationFrame.value)
      animationFrame.value = null
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (audioContext.value) {
      audioContext.value.close()
      audioContext.value = null
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫
    if (mediaStream.value) {
      mediaStream.value.getTracks().forEach(track => track.stop())
      mediaStream.value = null
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–æ –°–û–•–†–ê–ù–Ø–ï–ú callback –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    isActive.value = false
    isSupported.value = false
    lastActivityState = false
    // –í–ê–ñ–ù–û: –ù–ï –æ—á–∏—â–∞–µ–º currentOnActivityChange, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    
    console.log('‚úÖ Voice detection fully stopped')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è/–≤–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleMicrophone = async (forceStopCallback = null, forceStartCallback = null, voiceCallback = null) => {
    microphoneEnabled.value = !microphoneEnabled.value
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
    if (process.client) {
      localStorage.setItem('microphoneEnabled', JSON.stringify(microphoneEnabled.value))
    }
    
    if (!microphoneEnabled.value) {
      console.log('üé§‚ùå Disabling microphone...')
      
      // –°–ù–ê–ß–ê–õ–ê –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ
      if (forceStopCallback && typeof forceStopCallback === 'function') {
        forceStopCallback()
      }
      
      // –ó–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
      stopVoiceDetection()
      
      console.log('‚úÖ Microphone disabled and voice activity stopped')
    } else {
      console.log('üé§‚úÖ Enabling microphone...')
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (forceStartCallback && typeof forceStartCallback === 'function') {
        forceStartCallback()
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π callback, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
      if (voiceCallback && typeof voiceCallback === 'function') {
        console.log('üíæ Saving new voice callback for first-time initialization')
        currentOnActivityChange = voiceCallback
      }
      
      // –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å callback
      if (currentOnActivityChange) {
        console.log('üîÑ Initializing microphone with saved callback')
        try {
          await initVoiceDetection(currentOnActivityChange)
          console.log('‚úÖ Microphone enabled and voice detection started')
        } catch (error) {
          console.warn('‚ùå Failed to initialize microphone:', error)
          microphoneEnabled.value = false // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      } else {
        console.warn('‚ö†Ô∏è No callback available, cannot initialize microphone')
        microphoneEnabled.value = false // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–ª–∂–µ–Ω –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
  const shouldUseMicrophone = () => {
    if (!microphoneEnabled.value) return false
    if (!process.client) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (document.hidden) return false
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ getUserMedia, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (!navigator.mediaDevices?.getUserMedia) {
      console.log('üìµ getUserMedia not supported, skipping microphone')
      return false
    }
    
    return true
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
  const handleVisibilityChange = () => {
    if (document.hidden && isSupported.value) {
      // –í–∫–ª–∞–¥–∫–∞ —Å–∫—Ä—ã—Ç–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
      stopVoiceDetection()
      console.log('üé§üí§ Microphone paused (tab hidden)')
    }
    // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–∫–ª–∞–¥–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  if (process.client) {
    document.addEventListener('visibilitychange', handleVisibilityChange)
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onUnmounted(() => {
    stopVoiceDetection()
    if (process.client) {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  })
  
  return {
    isActive: readonly(isActive),
    isSupported: readonly(isSupported),
    microphoneEnabled: readonly(microphoneEnabled),
    initVoiceDetection,
    stopVoiceDetection,
    toggleMicrophone,
    shouldUseMicrophone
  }
}