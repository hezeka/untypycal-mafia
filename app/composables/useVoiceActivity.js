// app/composables/useVoiceActivity.js
import { ref, onUnmounted, readonly } from 'vue'

const isActive = ref(false)
const isSupported = ref(false)
const mediaStream = ref(null)
const audioContext = ref(null)
const analyser = ref(null)
const animationFrame = ref(null)
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏–∑ localStorage –∏–ª–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const getSavedMicrophoneState = () => {
  if (!process.client) return true
  const saved = localStorage.getItem('microphoneEnabled')
  return saved !== null ? JSON.parse(saved) : true
}

const microphoneEnabled = ref(getSavedMicrophoneState())

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ –∫–æ–º–ø–æ–∑–∞–±–ª–∞
let lastActivityState = false
let currentOnActivityChange = null // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π callback –≥–ª–æ–±–∞–ª—å–Ω–æ

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
const loadSavedSettings = () => {
  if (!process.client) return { threshold: 0.01, smoothing: 0.3 }
  
  try {
    const savedThreshold = localStorage.getItem('voiceThreshold')
    const savedSmoothing = localStorage.getItem('voiceSmoothing')
    
    return {
      threshold: savedThreshold ? parseFloat(savedThreshold) : 0.01,
      smoothing: savedSmoothing ? parseFloat(savedSmoothing) : 0.3
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error)
    return { threshold: 0.01, smoothing: 0.3 }
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const savedSettings = loadSavedSettings()

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ useVoiceActivity
let globalVolumeThreshold = savedSettings.threshold // –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
let globalSmoothing = savedSettings.smoothing // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
let globalSelectedDeviceId = null // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const loadSelectedDevice = () => {
  if (!process.client) return null
  
  try {
    const saved = localStorage.getItem('selectedAudioDevice')
    return saved ? saved : null
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error)
    return null
  }
}

globalSelectedDeviceId = loadSelectedDevice()

export const useVoiceActivity = () => {
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateVolumeThreshold = (newThreshold) => {
    globalVolumeThreshold = newThreshold
    console.log('üé§ Updated volume threshold to:', newThreshold)
  }
  
  const updateSmoothing = (newSmoothing) => {
    globalSmoothing = newSmoothing
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (analyser.value) {
      analyser.value.smoothingTimeConstant = newSmoothing
      console.log('üé§ Updated smoothing to:', newSmoothing)
    }
  }
  
  const getCurrentSettings = () => ({
    threshold: globalVolumeThreshold,
    smoothing: globalSmoothing,
    selectedDeviceId: globalSelectedDeviceId
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const getAudioDevices = async () => {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
        console.warn('enumerateDevices not supported')
        return []
      }

      const devices = await navigator.mediaDevices.enumerateDevices()
      const audioInputs = devices.filter(device => device.kind === 'audioinput')
      
      console.log('üé§ Found audio devices:', audioInputs.length)
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      if (audioInputs.length > 0 && !audioInputs[0].label) {
        console.log('üîê Device labels empty, requesting permissions first...')
        try {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫
          const tempStream = await navigator.mediaDevices.getUserMedia({ audio: true })
          tempStream.getTracks().forEach(track => track.stop())
          
          // –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –º–µ—Ç–∫–∞–º–∏
          const devicesWithLabels = await navigator.mediaDevices.enumerateDevices()
          return devicesWithLabels.filter(device => device.kind === 'audioinput')
        } catch (error) {
          console.warn('Could not get device labels:', error)
          return audioInputs
        }
      }
      
      return audioInputs
    } catch (error) {
      console.error('Error getting audio devices:', error)
      return []
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const updateSelectedDevice = (deviceId) => {
    globalSelectedDeviceId = deviceId
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    if (process.client) {
      if (deviceId) {
        localStorage.setItem('selectedAudioDevice', deviceId)
      } else {
        localStorage.removeItem('selectedAudioDevice')
      }
    }
    
    console.log('üé§ Updated selected device to:', deviceId || 'default')
  }
  
  const initVoiceDetection = async (onActivityChange, skipEnabledCheck = false) => {
    console.log('üé§ initVoiceDetection started')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º shouldUseMicrophone —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏
    if (!skipEnabledCheck && !shouldUseMicrophone()) {
      console.log('üé§ shouldUseMicrophone returned false')
      return false
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ä–µ–¥—É –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å
    if (skipEnabledCheck) {
      if (!process.client) {
        console.log('üé§ Not in client environment')
        return false
      }
      if (document.hidden) {
        console.log('üé§ Tab is hidden')
        return false
      }
      if (!navigator.mediaDevices?.getUserMedia) {
        console.log('üìµ getUserMedia not supported')
        return false
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    console.log('üíæ Saving callback for voice detection:', typeof onActivityChange)
    currentOnActivityChange = onActivityChange
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        console.log('Voice detection not supported')
        return false
      }
      
      console.log('üé§ Browser support confirmed')
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      console.log('üîç Requesting microphone access...')

      // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É —è–≤–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å UI –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–Ω–¥–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ—Å—Ç—É–ø–∞.
      // –ñ–¥—ë–º –¥–≤–∞ –∫–∞–¥—Ä–∞ + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä ‚Äî —ç—Ç–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∏–∑.
      await new Promise(resolve => {
        requestAnimationFrame(() => requestAnimationFrame(() => setTimeout(resolve, 120)))
      })

      // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º navigator.permissions.query ‚Äî –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É.
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ getUserMedia
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const audioConstraints = {
        echoCancellation: true,
        noiseSuppression: true,
        autoGainControl: true
      }
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID
      if (globalSelectedDeviceId) {
        audioConstraints.deviceId = { exact: globalSelectedDeviceId }
        console.log('üé§ Using selected device:', globalSelectedDeviceId)
      } else {
        console.log('üé§ Using default device')
      }

      const mediaPromise = navigator.mediaDevices.getUserMedia({ 
        audio: audioConstraints
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Microphone access timeout')), 5000)
      })
      
      mediaStream.value = await Promise.race([mediaPromise, timeoutPromise])
      console.log('‚úÖ Microphone access granted')
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      console.log('üîß Creating audio context...')
      audioContext.value = new (window.AudioContext || window.webkitAudioContext)()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (audioContext.value.state === 'suspended') {
        console.log('üîì Resuming suspended audio context...')
        await audioContext.value.resume()
      }
      
      const source = audioContext.value.createMediaStreamSource(mediaStream.value)
      console.log('‚úÖ Audio context created')
      
      // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
      console.log('üîß Creating analyser...')
      analyser.value = audioContext.value.createAnalyser()
      analyser.value.fftSize = 256
      analyser.value.smoothingTimeConstant = globalSmoothing
      source.connect(analyser.value)
      console.log('‚úÖ Analyser created and connected')
      
      isSupported.value = true
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
      console.log('üöÄ Starting volume analysis...')
      startVolumeAnalysis(onActivityChange)
      
      console.log('‚úÖ Voice detection initialized')
      return true
      
    } catch (error) {
      console.error('‚ùå Failed to initialize voice detection:', error)
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (mediaStream.value) {
        mediaStream.value.getTracks().forEach(track => track.stop())
        mediaStream.value = null
      }
      if (audioContext.value) {
        audioContext.value.close()
        audioContext.value = null
      }
      
      isSupported.value = false
      return false
    }
  }
  
  const startVolumeAnalysis = (onActivityChange) => {
    if (!analyser.value) return
    
    const bufferLength = analyser.value.frequencyBinCount
    const dataArray = new Uint8Array(bufferLength)
    
    const analyze = () => {
      if (!analyser.value) return
      
      analyser.value.getByteFrequencyData(dataArray)
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      let sum = 0
      for (let i = 0; i < bufferLength; i++) {
        sum += dataArray[i]
      }
      const average = sum / bufferLength / 255 // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const currentlyActive = average > globalVolumeThreshold
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (currentlyActive !== lastActivityState) {
        lastActivityState = currentlyActive
        isActive.value = currentlyActive
        onActivityChange(currentlyActive)
      }
      
      animationFrame.value = requestAnimationFrame(analyze)
    }
    
    analyze()
  }
  
  const stopVoiceDetection = (fullStop = true) => {
    console.log(`üîá Stopping voice detection (full: ${fullStop})...`)
    
    // –í–°–ï–ì–î–ê —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (currentOnActivityChange) {
      console.log('üì§ Sending final voice activity stop event')
      currentOnActivityChange(false)
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (animationFrame.value) {
      cancelAnimationFrame(animationFrame.value)
      animationFrame.value = null
    }
    
    if (fullStop) {
      // –ü–û–õ–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
      if (mediaStream.value) {
        console.log('üõë Stopping media stream tracks (full stop)...')
        mediaStream.value.getTracks().forEach(track => {
          console.log('üõë Stopping track:', track.kind, track.label)
          track.stop()
        })
        mediaStream.value = null
        console.log('‚úÖ Media stream cleared')
      }
      
      if (audioContext.value) {
        console.log('üõë Closing audio context...')
        audioContext.value.close().then(() => {
          console.log('‚úÖ Audio context closed')
        }).catch((error) => {
          console.warn('‚ö†Ô∏è Error closing audio context:', error)
        })
        audioContext.value = null
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
      analyser.value = null
      isSupported.value = false
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isActive.value = false
    lastActivityState = false
    // –í–ê–ñ–ù–û: –ù–ï –æ—á–∏—â–∞–µ–º currentOnActivityChange –∏ –º–µ–¥–∏–∞ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –º—è–≥–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    
    console.log(`‚úÖ Voice detection stopped (full: ${fullStop})`)
  }

  const pendingInit = ref(false)
  let pendingUserGestureListener = null

  const triggerPendingInitOnGesture = () => {
    if (pendingUserGestureListener) return
    pendingUserGestureListener = (ev) => {
      if (!ev.isTrusted) return
      // —É–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      document.removeEventListener('pointerdown', pendingUserGestureListener)
      pendingUserGestureListener = null
      if (currentOnActivityChange) {
        initVoiceDetection(currentOnActivityChange)
          .then(ok => { if (ok) pendingInit.value = false })
          .catch(err => {
            console.warn('‚ùå initVoiceDetection failed on user gesture:', err)
            pendingInit.value = false
          })
      } else {
        pendingInit.value = false
      }
    }
    document.addEventListener('pointerdown', pendingUserGestureListener, { once: false })
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è/–≤–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleMicrophone = async (forceStopCallback = null, forceStartCallback = null, voiceCallback = null, userGestureEvent = null) => {
    const wasEnabled = microphoneEnabled.value
    const targetState = !wasEnabled
    
    if (!targetState) {
      // –í—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
      microphoneEnabled.value = false
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
      if (process.client) {
        localStorage.setItem('microphoneEnabled', JSON.stringify(false))
      }
      console.log('üé§‚ùå Disabling microphone...')
      
      // –°–ù–ê–ß–ê–õ–ê –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ
      if (forceStopCallback && typeof forceStopCallback === 'function') {
        forceStopCallback()
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú—è–≥–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
      if (animationFrame.value) {
        cancelAnimationFrame(animationFrame.value)
        animationFrame.value = null
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (currentOnActivityChange) {
        currentOnActivityChange(false)
      }
      
      console.log('‚úÖ Microphone disabled (soft shutdown)')
      return true
    } else {
      // –í–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
      console.log('üé§‚úÖ Trying to enable microphone...')
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (forceStartCallback && typeof forceStartCallback === 'function') {
        forceStartCallback()
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π callback, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
      if (voiceCallback && typeof voiceCallback === 'function') {
        console.log('üíæ Saving new voice callback')
        currentOnActivityChange = voiceCallback
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
      if (mediaStream.value && analyser.value && currentOnActivityChange) {
        console.log('üîÑ Resuming existing microphone stream')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        const activeTracks = mediaStream.value.getTracks().filter(track => track.readyState === 'live')
        if (activeTracks.length > 0) {
          // –ü–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
          microphoneEnabled.value = true
          if (process.client) {
            localStorage.setItem('microphoneEnabled', JSON.stringify(true))
          }
          startVolumeAnalysis(currentOnActivityChange)
          console.log('‚úÖ Microphone resumed without reinitialization')
          return true
        } else {
          console.log('üîÑ Stream inactive, need full reinitialization')
        }
      }
      
      // –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      if (currentOnActivityChange) {
        if (userGestureEvent && userGestureEvent.isTrusted) {
          console.log('üîÑ Full microphone initialization (user gesture)')
          try {
            const result = await initVoiceDetection(currentOnActivityChange)
            if (result) {
              microphoneEnabled.value = true
              if (process.client) {
                localStorage.setItem('microphoneEnabled', JSON.stringify(true))
              }
              console.log('‚úÖ Microphone fully initialized')
              return true
            } else {
              console.warn('‚ùå Failed to initialize microphone: permission denied')
              return false
            }
          } catch (error) {
            console.warn('‚ùå Failed to initialize microphone:', error)
            throw error
          }
        } else {
          // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∂–µ—Å—Ç–∞
          pendingInit.value = true
          console.log('‚è≥ Microphone init deferred until user gesture')
          triggerPendingInitOnGesture()
          microphoneEnabled.value = true
          if (process.client) {
            localStorage.setItem('microphoneEnabled', JSON.stringify(true))
          }
          return true
        }
      } else {
        console.warn('‚ö†Ô∏è No callback available, cannot initialize microphone')
        return false
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–ª–∂–µ–Ω –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
  const shouldUseMicrophone = () => {
    if (!microphoneEnabled.value) return false
    if (!process.client) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (document.hidden) return false
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ getUserMedia, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (!navigator.mediaDevices?.getUserMedia) {
      console.log('üìµ getUserMedia not supported, skipping microphone')
      return false
    }
    
    return true
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —É–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
  const handleVisibilityChange = async () => {
    if (document.hidden && isSupported.value) {
      // –í–∫–ª–∞–¥–∫–∞ —Å–∫—Ä—ã—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑, –Ω–æ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–∏–∫—Ä–æ—Ñ–æ–Ω
      console.log('üé§üí§ Tab hidden, pausing voice activity...')
      
      if (animationFrame.value) {
        cancelAnimationFrame(animationFrame.value)
        animationFrame.value = null
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (currentOnActivityChange) {
        currentOnActivityChange(false)
      }
      
      console.log('‚úÖ Voice activity paused (tab hidden)')
    } else if (!document.hidden && mediaStream.value && analyser.value) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ë–ï–ó –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('üé§üîÑ Tab visible, resuming voice activity...')
      
      if (currentOnActivityChange && !animationFrame.value) {
        startVolumeAnalysis(currentOnActivityChange)
        console.log('‚úÖ Voice activity resumed')
      }
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  if (process.client) {
    document.addEventListener('visibilitychange', handleVisibilityChange)
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onUnmounted(async () => {
    console.log('üßπ Cleaning up voice activity on unmount...')
    stopVoiceDetection(true) // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    
    // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
    await new Promise(resolve => setTimeout(resolve, 100))
    
    if (process.client) {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
      if (pendingUserGestureListener) {
        document.removeEventListener('pointerdown', pendingUserGestureListener)
        pendingUserGestureListener = null
      }
    }
    
    console.log('‚úÖ Voice activity cleanup completed')
  })
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
  const retryMicrophoneEnable = async (voiceCallback, userGestureEvent = null) => {
    console.log('üîÑ Retrying microphone enable...')
    
    // –ï—Å–ª–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success
    if (microphoneEnabled.value) {
      console.log('üé§ Microphone already enabled')
      return true
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
    if (voiceCallback && typeof voiceCallback === 'function') {
      console.log('üíæ Saving voice callback for retry')
      currentOnActivityChange = voiceCallback
    }
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º initVoiceDetection —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏
      console.log('üé§ Calling initVoiceDetection with skipEnabledCheck=true')
      
      const result = await initVoiceDetection(currentOnActivityChange, true)
      
      if (result) {
        // –£—Å–ø–µ—Ö - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        microphoneEnabled.value = true
        if (process.client) {
          localStorage.setItem('microphoneEnabled', JSON.stringify(true))
        }
        console.log('‚úÖ Microphone retry successful')
        return true
      } else {
        console.warn('‚ùå Microphone retry failed: permission denied')
        return false
      }
    } catch (error) {
      console.warn('‚ùå Microphone retry failed:', error)
      throw error
    }
  }

  return {
    isActive: readonly(isActive),
    isSupported: readonly(isSupported),
    microphoneEnabled: readonly(microphoneEnabled),
    initVoiceDetection,
    stopVoiceDetection,
    toggleMicrophone,
    retryMicrophoneEnable,
    shouldUseMicrophone,
    updateVolumeThreshold,
    updateSmoothing,
    updateSelectedDevice,
    getAudioDevices,
    getCurrentSettings
  }
}