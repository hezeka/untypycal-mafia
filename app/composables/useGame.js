import { ref, computed, reactive, readonly } from 'vue'
import { useSocket } from './useSocket'
import { useSounds } from './useSound'

// Global state for socket listeners (to prevent multiple initialization)
let globalListenersInitialized = false

// SECURITY: Frontend sanitization helper
const sanitizeForDisplay = (text) => {
  if (!text || typeof text !== 'string') return ''
  
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;')
}

// Global state (persists across components)
const player = reactive({
  id: null,
  name: '',
  role: null
})

const voiceActivity = reactive({
  speakingPlayers: new Set(), // ID –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–≤–æ—Ä—è—Ç
  enabled: false
})

const room = reactive({
  id: null,
  hostId: null,
  isHost: false
})

const gameData = reactive({
  players: [],
  selectedRoles: [],
  gameState: 'setup',
  currentPhase: null,
  chat: [],
  timer: null,
  roles: {} // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
})

// –†–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞
// –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç roles –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

export const useGame = () => {
  const { socket } = useSocket()
  const { playSound } = useSounds()

  // Computed properties
  const isInRoom = computed(() => !!room.id)
  const isHost = computed(() => room.isHost || player.role === 'game_master')
  
  const currentPlayer = computed(() => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const current = gameData.players.find(p => p.name === player.name)
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∏ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (process.env.NODE_ENV === 'development') {
      if (current && !current._lastLogged) {
        console.log('‚úÖ Current player found:', { 
          id: current.id, 
          name: current.name, 
          role: current.role || 'no_role'
        })
        current._lastLogged = true
      }
    }
    
    return current
  })
  
  const otherPlayers = computed(() => gameData.players.filter(p => p.name !== player.name && p.role !== 'game_master'))
  const allPlayers = computed(() => gameData.players.filter(p => p.role !== 'game_master'))
  const allPlayersForVoting = computed(() => gameData.players.filter(p => p.role !== 'game_master'))
  const selectedRoleObjects = computed(() => 
    gameData.selectedRoles.map(roleId => ({ id: roleId, ...(gameData.roles[roleId] || {}) }))
  )
  const chatMessages = computed(() => gameData.chat)

  // Socket event handlers
  const initSocketListeners = () => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (globalListenersInitialized) {
      console.log('üîÑ Reinitializing socket listeners - removing old ones first')
      removeSocketListeners()
    }
    
    console.log('üîå Initializing socket listeners')
    globalListenersInitialized = true
    
    socket.on('new-message', (message) => {
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
      const existingMessage = gameData.chat.find(m => m.id === message.id)
      if (!existingMessage) {
        // SECURITY: Sanitize message content for frontend display
        const sanitizedMessage = {
          ...message,
          content: sanitizeForDisplay(message.content),
          playerName: sanitizeForDisplay(message.playerName)
        }
        
        gameData.chat.push(sanitizedMessage)
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú –ó–í–£–ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (message.playerName !== player.name) {
          if (message.type === 'system') {
            playSound('notification', 0.7)
          } else {
            playSound('message', 0.4)
          }
        }
      }
    })
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–µ–ø–æ—Ç—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    socket.on('new-whisper', (whisperMessage) => {
      console.log('üì® Received whisper:', whisperMessage)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const existingWhisper = gameData.chat.find(m => m.id === whisperMessage.id)
      if (!existingWhisper) {
        // SECURITY: Sanitize whisper content for frontend display
        const sanitizedWhisper = {
          ...whisperMessage,
          content: sanitizeForDisplay(whisperMessage.content),
          playerName: sanitizeForDisplay(whisperMessage.playerName)
        }
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú —à–µ–ø–æ—Ç –≤ –æ–±—â–∏–π —á–∞—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        gameData.chat.push(sanitizedWhisper)
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú –ó–í–£–ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–µ–ø–æ—Ç –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (whisperMessage.playerName !== player.name) {
          playSound('whisper', 0.6)
        }
      }
    })

    socket.on('voice-activity-update', ({ playerId, isActive, playerName }) => {
      if (isActive) {
        voiceActivity.speakingPlayers.add(playerId)
        // console.log(`üé§ ${playerName} –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å`)
      } else {
        voiceActivity.speakingPlayers.delete(playerId)
        // console.log(`üîá ${playerName} –ø–µ—Ä–µ—Å—Ç–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å`)
      }
    })
    
    socket.on('room-created', ({ roomId, gameData: newGameData }) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
      if (room.id === roomId && room.isHost) {
        if (process.env.NODE_ENV === 'development') {
          console.log('‚ö†Ô∏è Duplicate room-created event ignored for room:', roomId)
        }
        return
      }
      
      if (process.env.NODE_ENV === 'development') {
        console.log('üè† Room created:', roomId)
      }
      
      room.id = roomId
      room.hostId = newGameData.hostId
      room.isHost = newGameData.hostId === socket.id
      
      // –û–±–Ω–æ–≤–ª—è–µ–º player.id –°–†–ê–ó–£
      player.id = socket.id
      
      updateGameData(newGameData)
    })

    socket.on('join-success', (newGameData) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
      if (room.id === newGameData.id && player.role) {
        if (process.env.NODE_ENV === 'development') {
          console.log('‚ö†Ô∏è Duplicate join-success event ignored for room:', newGameData.id)
        }
        return
      }
      
      if (process.env.NODE_ENV === 'development') {
        console.log('üì• Join success for room:', newGameData.id)
      }
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º player.id –¥–æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      player.id = socket.id
      
      // Successful join/rejoin
      room.id = newGameData.id
      room.hostId = newGameData.hostId
      room.isHost = newGameData.hostId === socket.id
      
      // Restore player role from server data –°–†–ê–ó–£, –¥–æ updateGameData
      const currentPlayerData = newGameData.players?.find(p => 
        p.name === player.name
      )
      
      if (currentPlayerData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –°–†–ê–ó–£
        player.id = currentPlayerData.id
        player.name = currentPlayerData.name
        
        if (currentPlayerData.role) {
          player.role = currentPlayerData.role
          if (process.env.NODE_ENV === 'development') {
            console.log(`‚úÖ Restored role: ${currentPlayerData.role}`)
          }
        }
      }
      
      // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
      updateGameData(newGameData)
    })

    socket.on('game-updated', (newGameData) => {
      // Update room info if not set
      if (!room.id && newGameData.id) {
        room.id = newGameData.id
        room.hostId = newGameData.hostId
        room.isHost = newGameData.hostId === socket.id
      }
      
      // Check if current player's role changed BEFORE updating game data
      const currentPlayerData = newGameData.players?.find(p => 
        p.name === player.name
      )
      
      if (currentPlayerData) {
        // Debug logging for color updates
        if (process.env.NODE_ENV === 'development') {
          console.log('üé® Client: Received game-updated with player data:', {
            playerId: currentPlayerData.id,
            playerName: currentPlayerData.name,
            color: currentPlayerData.color,
            role: currentPlayerData.role
          })
        }
        
        if (currentPlayerData.role && currentPlayerData.role !== player.role) {
          player.role = currentPlayerData.role
          if (process.env.NODE_ENV === 'development') {
            console.log(`Role updated to: ${currentPlayerData.role}`)
          }
        }
      }
      
      updateGameData(newGameData)
    })

    socket.on('game-started', (newGameData) => {
      console.log('üöÄ Game started event received')
      
      // –ó–≤—É–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      playSound('day', 0.3)
      
      // Force update player role when game starts BEFORE updating game data
      const currentPlayerData = newGameData.players?.find(p => 
        p.name === player.name
      )
      
      if (currentPlayerData && currentPlayerData.role) {
        player.role = currentPlayerData.role
        console.log(`üé≠ Role assigned at game start: ${currentPlayerData.role}`)
      }
      
      updateGameData(newGameData)
    })

    socket.on('phase-changed', ({ gameState, currentPhase }) => {
      gameData.gameState = gameState
      gameData.currentPhase = currentPhase
      
      // –ó–≤—É–∫ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã
      if (gameState === 'voting') {
        playSound('voting', 0.1)
      } else if (gameState === 'night') {
        playSound('night', 0.1)
      } else if (gameState === 'day') {
        playSound('day', 0.1)
      } else {
        playSound('phaseChange', 0.2)
      }
    })

    socket.on('whisper-error', ({ message }) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —à–µ–ø–æ—Ç–∞
      alert(`–û—à–∏–±–∫–∞ —à–µ–ø–æ—Ç–∞: ${message}`)
    })

    socket.on('vote-updated', ({ votes }) => {
      gameData.players = gameData.players.map(p => {
        const voteData = votes.find(v => v.id === p.id)
        return { ...p, votes: voteData ? voteData.votes : 0 }
      })
    })

    socket.on('voting-ended', ({ eliminated, reason, winCondition, gameData: newGameData }) => {
      // –ó–≤—É–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      // playSound('notification', 0.7)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      if (eliminated.length > 0) {
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${reason}`)
      } else {
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${reason}`)
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
      if (winCondition) {
        if (winCondition.gameEnded) {
          console.log(`üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ${winCondition.message}`)
        } else {
          console.log(`üìÖ ${winCondition.message}`)
        }
      }
      
      if (newGameData) {
        updateGameData(newGameData)
      }
    })

    socket.on('timer-updated', ({ timer }) => {
      gameData.timer = timer
    })

    socket.on('timer-ended', ({ message }) => {
      // –ó–≤—É–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
      playSound('notification', 0.8)
    })

    socket.on('kicked', ({ message }) => {
      alert(message)
      // Clear room state and redirect to home page
      clearRoom()
      if (process.client) {
        navigateTo('/')
      }
    })

    socket.on('room-deleted', ({ message, roomId }) => {
      alert(message)
      // Clear room state and redirect to home page
      clearRoom()
      if (process.client) {
        navigateTo('/')
      }
    })

    socket.on('command-error', ({ message }) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–æ–º–∞–Ω–¥—ã - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ GameChat
      console.log('Command error:', message)
    })

    socket.on('error', ({ message, suggestions }) => {
      console.error('Game error:', message)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
      // (–ù–ï –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
      const isNameValidationError = (
        message.includes('–∏–º—è') || 
        message.includes('–ò–º—è') || 
        message.includes('—É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ') || 
        message.includes('–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ') ||
        message.includes('—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ') ||
        message.includes('–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã')
      )
      
      if (isNameValidationError) {
        // –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ñ–æ—Ä–º
        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω
        console.log('Name validation error - handled by form component')
        return
      }
      
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
      alert(message)

      if (message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã') || message.includes('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
        navigateTo('/')
      }
    })

    // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω
    socket.on('name-check-result', (result) => {
      // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ñ–æ—Ä–º
    })

    socket.on('name-suggestions', (result) => {
      // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ñ–æ—Ä–º
    })
  }

  // Helper functions
  const updateGameData = (newGameData) => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è checksum —Å–∏—Å—Ç–µ–º–∞ —Å —É—á–µ—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const createChecksum = (data) => JSON.stringify({
      id: data.id,
      gameState: data.gameState,
      currentPhase: data.currentPhase,
      playersCount: data.players?.length || 0,
      selectedRolesCount: data.selectedRoles?.length || 0,
      chatLength: data.chat?.length || 0,
      timer: data.timer,
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ checksum (–≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ)
      voting: data.voting ? {
        total: data.voting.total,
        submitted: data.voting.submitted,
        hasVoted: data.voting.hasVoted,
        votedFor: data.voting.votedFor,
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ
        votesHash: data.voting.votes ? 
          data.voting.votes.map(v => `${v.voter}>${v.target || 'null'}`).sort().join('|') : 
          null
      } : null,
      // –£–ª—É—á—à–µ–Ω–Ω—ã–π hash –∏–≥—Ä–æ–∫–æ–≤ —Å –≥–æ–ª–æ—Å–∞–º–∏
      playersHash: data.players?.map(p => 
        `${p.id}:${p.alive}:${p.connected}:${p.color}:${p.role || 'none'}:${p.votes || 0}:${p.protected || false}`
      ).join('|') || ''
    })
    
    const gameDataChecksum = createChecksum(gameData)
    const newGameDataChecksum = createChecksum(newGameData)
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ checksum
    if (gameDataChecksum === newGameDataChecksum) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ö° Skipping updateGameData - checksums match')
      }
      return
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if (process.env.NODE_ENV === 'development') {
      console.log('üìä Updating game data (checksums differ)')
    }
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Batch update –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const oldGameData = { ...gameData }
    Object.assign(gameData, newGameData)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (!player.role) {
      const currentPlayerData = newGameData.players?.find(p => 
        p.name === player.name
      )
      
      if (currentPlayerData && currentPlayerData.role) {
        player.role = currentPlayerData.role
        if (process.env.NODE_ENV === 'development') {
          console.log(`üîÑ Role updated in updateGameData: ${currentPlayerData.role}`)
        }
      }
    }
  }

  const removeSocketListeners = () => {
    if (!globalListenersInitialized) {
      console.log('‚ö†Ô∏è Socket listeners not initialized, skipping removal')
      return
    }
    
    console.log('üîå Removing socket listeners')
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º removeAllListeners –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    const eventsToRemove = [
      'new-message', 'new-whisper', 'voice-activity-update', 'room-created', 
      'join-success', 'game-updated', 'game-started', 'phase-changed',
      'whisper-error', 'vote-updated', 'voting-ended', 'timer-updated',
      'timer-ended', 'kicked', 'room-deleted', 'command-error', 'error',
      'name-check-result', 'name-suggestions'
    ]
    
    eventsToRemove.forEach(eventName => {
      socket.removeAllListeners(eventName)
    })
    
    globalListenersInitialized = false
    console.log('‚úÖ Socket listeners removed completely')
  }

  const clearRoom = () => {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    room.id = null
    room.hostId = null
    room.isHost = false
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    gameData.players = []
    gameData.selectedRoles = []
    gameData.gameState = 'setup'
    gameData.currentPhase = null
    gameData.chat = []
    gameData.timer = null
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    player.role = null
    player.id = null
    player.name = ''
    
    // –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    voiceActivity.speakingPlayers.clear()
    voiceActivity.enabled = false
    
    console.log('üßπ Room state cleared completely')
  }

  // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å throttling:
  let lastVoiceActivitySent = 0
  let lastVoiceState = null
  let voiceActivityTimeout = null
  const VOICE_ACTIVITY_THROTTLE = 200 // 200ms
  
  const sendVoiceActivity = (isActive) => {
    if (!socket || !room.id) return
    
    const now = Date.now()
    
    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (lastVoiceState === isActive) return
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    lastVoiceState = isActive
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (voiceActivityTimeout) {
      clearTimeout(voiceActivityTimeout)
      voiceActivityTimeout = null
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    if (now - lastVoiceActivitySent >= VOICE_ACTIVITY_THROTTLE) {
      lastVoiceActivitySent = now
      socket.emit('voice-activity', { 
        roomId: room.id, 
        isActive 
      })
    } else {
      // –ò–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–∂–µ
      const remainingTime = VOICE_ACTIVITY_THROTTLE - (now - lastVoiceActivitySent)
      voiceActivityTimeout = setTimeout(() => {
        lastVoiceActivitySent = Date.now()
        socket.emit('voice-activity', { 
          roomId: room.id, 
          isActive: lastVoiceState 
        })
        voiceActivityTimeout = null
      }, remainingTime)
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const forceStopVoiceActivity = () => {
    console.log('üîá Forcing voice activity stop')
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (voiceActivityTimeout) {
      clearTimeout(voiceActivityTimeout)
      voiceActivityTimeout = null
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (socket && room.id && player.id) {
      console.log('üì§ Sending forced voice-activity stop event')
      socket.emit('voice-activity', { 
        roomId: room.id, 
        isActive: false 
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      voiceActivity.speakingPlayers.delete(player.id)
    }
    
    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    lastVoiceState = false
    lastVoiceActivitySent = 0
    
    console.log('‚úÖ Voice activity forcefully stopped')
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)
  const forceStartVoiceActivity = () => {
    console.log('üé§ Forcing voice activity monitoring restart')
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    lastVoiceState = null
    lastVoiceActivitySent = 0
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if (voiceActivityTimeout) {
      clearTimeout(voiceActivityTimeout)
      voiceActivityTimeout = null
    }
    
    console.log('‚úÖ Voice activity monitoring restarted')
  }

  // Actions
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–æ–º
  const getSavedColor = () => {
    if (!process.client) return 'purple'
    return localStorage.getItem('playerColor') || 'purple'
  }

  const saveColor = (color) => {
    if (!process.client) return
    localStorage.setItem('playerColor', color)
  }

  const changePlayerColor = (color) => {
    console.log('üé® useGame: changePlayerColor called with:', color)
    console.log('üè† useGame: isInRoom:', isInRoom.value)
    console.log('üÜî useGame: room.id:', room.id)
    
    if (!isInRoom.value) {
      console.log('‚ùå useGame: Not in room, aborting color change')
      return
    }
    
    console.log('üì§ useGame: Emitting change-player-color event')
    socket.emit('change-player-color', { roomId: room.id, color })
    saveColor(color)
    console.log('üíæ useGame: Color saved to localStorage:', color)
  }

  const getTakenColors = () => {
    const takenColors = gameData.players ? gameData.players.map(p => p.color).filter(Boolean) : []
    if (process.env.NODE_ENV === 'development') {
      console.log('üé® getTakenColors called, returning:', takenColors)
    }
    return takenColors
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
  const getPlayerColor = (targetPlayer) => {
    if (targetPlayer.name === player.name) {
      // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –µ—Å–ª–∏ —Ü–≤–µ—Ç –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      const savedColor = process.client ? localStorage.getItem('playerColor') : null
      return targetPlayer.color || savedColor || 'purple'
    }
    return targetPlayer.color || 'purple'
  }

  // –ü–æ–ª—É—á–∏—Ç—å HEX —Ü–≤–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const getColorHex = (colorName) => {
    const colorMap = {
      'red': '#e74c3c',
      'orange': '#e67e22', 
      'yellow': '#f1c40f',
      'green': '#2ecc71',
      'blue': '#3498db',
      'purple': '#9b59b6',
      'pink': '#e91e63',
      'brown': '#795548',
      'grey': '#607d8b',
      'deep-orange': '#ff5722',
      'dark-green': '#4caf50',
      'cyan': '#00bcd4'
    }
    return colorMap[colorName] || '#9b59b6'
  }

  const createRoom = (playerName, isPrivate = false) => {
    player.id = socket.id
    player.name = playerName
    const preferredColor = getSavedColor()
    socket.emit('create-room', { playerName, isPrivate, preferredColor })
  }

  const joinRoom = ({ roomId, playerName }) => {
    player.id = socket.id
    player.name = playerName
    room.id = roomId // Set room ID immediately for UI
    const preferredColor = getSavedColor()
    socket.emit('join-room', { roomId, playerName, preferredColor })
  }

  const selectRole = (roleId) => {
    if (!isHost.value) return
    socket.emit('select-role', { roomId: room.id, roleId })
  }

  const removeRole = (roleId) => {
    if (!isHost.value) return
    socket.emit('remove-role', { roomId: room.id, roleId })
  }

  const startGame = () => {
    if (!isHost.value) return
    socket.emit('start-game', { roomId: room.id })
  }

  const restartGame = () => {
    if (!isHost.value) return
    socket.emit('restart-game', { roomId: room.id })
  }

  const changePhase = ({ gameState, currentPhase }) => {
    if (!isHost.value) return
    socket.emit('change-phase', { roomId: room.id, gameState, currentPhase })
  }

  const sendMessage = (message) => {
    socket.emit('send-message', { roomId: room.id, message })
  }

  const votePlayer = (targetId) => {
    socket.emit('vote-player', { roomId: room.id, targetId })
  }

  const endVoting = () => {
    if (!isHost.value) return
    socket.emit('end-voting', { roomId: room.id })
  }

  const adminAction = (action, targetId, newRole = null) => {
    if (!isHost.value) return
    socket.emit('admin-action', { roomId: room.id, action, targetId, newRole })
  }

  const nextPhase = () => {
    if (!isHost.value) return
    socket.emit('next-phase', { roomId: room.id })
  }

  const setTimer = (timer) => {
    if (!isHost.value) return
    socket.emit('change-timer', { roomId: room.id, timer })
  }

  // Load default roles from server
  const loadDefaultRoles = async () => {
    if (process.client && (!gameData.roles || Object.keys(gameData.roles).length === 0)) {
      try {
        console.log('üîÑ Loading roles from API...')
        const response = await fetch('/api/roles')
        
        if (response.ok) {
          const roles = await response.json()
          console.log('‚úÖ Successfully loaded', Object.keys(roles).length, 'roles from API')
          gameData.roles = roles
          return roles
        } else {
          throw new Error(`API returned ${response.status}`)
        }
      } catch (error) {
        console.error('‚ùå Could not load roles from API:', error.message)
        return {}
      }
    }
    return gameData.roles || {}
  }

  // Get all roles (from game data or load default roles)
  const getAllRoles = async () => {
    // If we have roles in game data, return them
    if (gameData.roles && Object.keys(gameData.roles).length > 0) {
      return gameData.roles
    }
    
    // If no roles loaded yet, load them
    if (process.client) {
      const loadedRoles = await loadDefaultRoles()
      return loadedRoles
    }
    
    // Return current roles
    return gameData.roles || {}
  }

  return {
    // State
    player: readonly(player),
    room: readonly(room),
    gameData: readonly(gameData),

    // Computed
    isInRoom,
    isHost,
    currentPlayer,
    otherPlayers,
    allPlayers,
    allPlayersForVoting,
    selectedRoleObjects,
    chatMessages,

    voiceActivity: readonly(voiceActivity),

    // Methods
    sendVoiceActivity,
    forceStopVoiceActivity,
    forceStartVoiceActivity,
    initSocketListeners,
    removeSocketListeners,
    updateGameData,
    clearRoom,
    createRoom,
    joinRoom,
    selectRole,
    removeRole,
    startGame,
    restartGame,
    changePhase,
    sendMessage,
    votePlayer,
    endVoting,
    adminAction,
    nextPhase,
    setTimer,
    getAllRoles,
    
    // Color methods
    changePlayerColor,
    getTakenColors,
    getSavedColor,
    getPlayerColor,
    getColorHex,
    
    // Security helper
    sanitizeForDisplay
  }
}