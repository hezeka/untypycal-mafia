/**
 * app/composables/useGame.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
 */

import { ref, computed, reactive, onMounted, onUnmounted, watch } from 'vue'
import { useSocket } from './useSocket.js'
import { useAPI } from './useAPI.js'
import { useTimer } from './useTimer.js'
import { useRouter } from 'vue-router'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (singleton)
const gameState = reactive({
  // –ö–æ–º–Ω–∞—Ç–∞
  room: {
    id: null,
    phase: 'setup',
    players: [],
    selectedRoles: [],
    centerCards: 0,
    chatPermissions: {
      canChat: true,
      canSeeAll: true,
      canWhisper: true,
      werewolfChat: false
    },
    votingActive: false,
    gameResult: null
  },
  
  // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
  player: {
    id: null,
    name: null,
    role: null,
    alive: true,
    isHost: false,
    isMe: true
  },
  
  // –ß–∞—Ç
  chat: [],
  
  // –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  nightAction: {
    active: false,
    role: null,
    timeLimit: 0,
    data: null,
    result: null
  },
  
  // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  voting: {
    myVote: null
  },
  
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connected: false
})

export const useGame = () => {
  const { socket, isConnected, emit, on, getSocketId } = useSocket()
  const { getRoomData, joinRoom: apiJoinRoom, getChatHistory, manageRole, managePhase, nightAction } = useAPI()
  const timer = useTimer()
  const router = useRouter()
  const loading = ref(false)
  
  // Computed properties
  const currentPlayer = computed(() => {
    return gameState.room.players.find(p => p.isMe) || gameState.player
  })
  
  const canStartGame = computed(() => {
    const playerCount = gameState.room.players.filter(p => p.role !== 'game_master').length
    const roleCount = gameState.room.selectedRoles.length
    return playerCount >= 3 && roleCount >= playerCount && gameState.player.isHost
  })
  
  const canChat = computed(() => {
    const permissions = gameState.room.chatPermissions
    
    // –ï—Å–ª–∏ —á–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ voting), —Ç–æ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –Ω–∏–∫–æ–º—É
    if (!permissions.canChat) {
      return false
    }
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º werewolfChat (–Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞), –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞
    if (permissions.werewolfChat) {
      const playerRole = currentPlayer.value?.role || gameState.player.role
      if (!playerRole) {
        return false
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–æ—Ä–æ—Ç–Ω–µ–π –ø–æ —Ä–æ–ª—è–º (–∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ GameRoom.js)
      const werewolfRoles = [
        'werewolf', 'werewolf_2', 'werewolf_3',
        'mystic_wolf', 'alpha_wolf', 'dream_wolf'
      ]
      
      return werewolfRoles.includes(playerRole)
    }
    
    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∞–≤–æ canChat
    return permissions.canChat
  })
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–∞–º–∏
  const createRoom = (username, isPrivate = false, hostAsObserver = false) => {
    if (!isConnected.value) {
      console.warn('‚ö†Ô∏è Socket not connected, waiting...')
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      const checkConnection = setInterval(() => {
        if (isConnected.value) {
          clearInterval(checkConnection)
          loading.value = true
          emit('create-room', { username, isPrivate, hostAsObserver })
        }
      }, 100)
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
      setTimeout(() => {
        clearInterval(checkConnection)
        if (!isConnected.value) {
          console.error('‚ùå Failed to connect to server')
          loading.value = false
        }
      }, 5000)
      
      return
    }
    
    loading.value = true
    emit('create-room', { username, isPrivate, hostAsObserver })
  }
  
  const joinRoom = async (roomCode, username) => {
    loading.value = true
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      console.log('üîÑ Checking room exists:', roomCode)
      const roomData = await getRoomData(roomCode)
      console.log('‚úÖ Room found:', roomData)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      Object.assign(gameState.room, roomData)
      
      // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è —á–µ—Ä–µ–∑ HTTP API
      if (isConnected.value && getSocketId()) {
        console.log('üîÑ Joining room via HTTP API...')
        const result = await apiJoinRoom(roomCode, username, getSocketId())
        console.log('‚úÖ Joined successfully:', result)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        Object.assign(gameState.room, result.room)
        Object.assign(gameState.player, result.player)
        gameState.connected = true
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ
        const room = gameState.room
        if (room && socket.value) {
          room.addSocket?.(getSocketId(), socket.value)
        }
        
      } else {
        console.warn('‚ö†Ô∏è Socket not connected, joining as observer')
        // –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –±–µ–∑ —Å–æ–∫–µ—Ç–∞
        gameState.connected = false
      }
      
    } catch (error) {
      console.error('‚ùå Failed to join room:', error)
      throw error
    } finally {
      loading.value = false
    }
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π emit —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const safeEmit = (event, data) => {
    if (!isConnected.value) {
      console.warn(`‚ö†Ô∏è Cannot emit ${event} - not connected to server`)
      return false
    }
    
    return emit(event, data)
  }
  
  const startGame = async () => {
    if (!gameState.room.id || !gameState.player.id) {
      console.error('‚ùå Cannot start game: missing room or player ID')
      return false
    }

    try {
      console.log('üöÄ Starting game...')
      const result = await managePhase(gameState.room.id, 'start-game', gameState.player.id)
      console.log('‚úÖ Game started successfully:', result)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      if (result.room) {
        Object.assign(gameState.room, result.room)
      }
      
      return true
    } catch (error) {
      console.error('‚ùå Failed to start game:', error)
      return false
    }
  }
  
  const selectRole = async (roleId, action = 'add') => {
    if (!gameState.room.id || !gameState.player.id) {
      console.error('‚ùå Cannot select role: missing room or player ID')
      return false
    }

    try {
      console.log(`üé≠ ${action === 'add' ? 'Adding' : 'Removing'} role:`, roleId)
      const result = await manageRole(gameState.room.id, roleId, action, gameState.player.id)
      console.log('‚úÖ Role management successful:', result)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      if (result.room) {
        Object.assign(gameState.room, result.room)
      }
      
      return true
    } catch (error) {
      console.error('‚ùå Role management failed:', error)
      return false
    }
  }
  
  const sendMessage = (text) => {
    if (!text.trim()) return false
    return safeEmit('send-message', { text })
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const showChatError = (message) => {
    const errorMessage = {
      id: `error_${Date.now()}`,
      type: 'error',
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞',
      text: message,
      timestamp: Date.now(),
      isOwn: false
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —á–∞—Ç
    gameState.chat.push(errorMessage)
    
    // –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      const errorIndex = gameState.chat.findIndex(msg => msg.id === errorMessage.id)
      if (errorIndex !== -1) {
        gameState.chat.splice(errorIndex, 1)
      }
    }, 5000)
  }
  
  const executeNightAction = async (action) => {
    try {
      const playerId = gameState.player.id || getSocketId()
      const result = await nightAction(gameState.room.id, playerId, action)
      
      if (result.success) {
        console.log('‚úÖ Night action executed successfully:', result)
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        gameState.nightAction.active = false
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gameState.nightAction.result = {
          success: true,
          message: result.message,
          data: result.data || {},
          blocked: result.data?.blocked || false
        }
        
        return { success: true, message: result.message || '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' }
      } else {
        console.error('‚ùå Night action failed:', result.error)
        return { success: false, message: result.error || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è' }
      }
    } catch (error) {
      console.error('‚ùå Night action API error:', error)
      return { success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' }
    }
  }
  
  const votePlayer = (targetId) => {
    if (safeEmit('vote', { targetId })) {
      gameState.voting.myVote = targetId
    }
  }
  
  const adminAction = async (action, targetId = null) => {
    if (!gameState.room.id || !gameState.player.id) {
      console.error('‚ùå Cannot perform admin action: missing room or player ID')
      return false
    }

    try {
      console.log(`üéÆ Admin action: ${action}`, targetId ? `target: ${targetId}` : '')
      
      // –§–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ HTTP API
      if (['next-phase', 'force-vote'].includes(action)) {
        const result = await managePhase(gameState.room.id, action, gameState.player.id)
        console.log('‚úÖ Phase action successful:', result)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        if (result.room) {
          Object.assign(gameState.room, result.room)
        }
        
        return true
      }
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ admin –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã (kill, revive, kick)
      return safeEmit('admin-action', { action, targetId })
      
    } catch (error) {
      console.error('‚ùå Admin action failed:', error)
      return false
    }
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ HTTP
  const loadRoomData = async (roomId) => {
    loading.value = true
    
    try {
      console.log('üîÑ Loading room data for:', roomId)
      const roomData = await getRoomData(roomId)
      console.log('‚úÖ Room data loaded:', roomData)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      Object.assign(gameState.room, roomData)
      return roomData
      
    } catch (error) {
      console.log(error.message)
      if (error.message === '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') {
        console.error('‚ùå Room not found, redirecting to home...')
        router.push('/')
        return
      }
      console.error('‚ùå Failed to load room data:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  const loadChatHistory = async (roomId, playerId = null) => {
    try {
      console.log('üîÑ Loading chat history for room:', roomId, 'player:', playerId)
      console.log('üîÑ Current gameState.player.id:', gameState.player.id)
      
      const chatData = await getChatHistory(roomId, playerId)
      
      // –ï—Å–ª–∏ gameState.player.id –ø—É—Å—Ç, –Ω–æ –º—ã –∑–Ω–∞–µ–º playerId –∏–∑ API - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
      if (!gameState.player.id && chatData.playerId) {
        console.log('üîß Updating gameState.player.id from API:', chatData.playerId)
        gameState.player.id = chatData.playerId
      }
      
      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      gameState.chat = chatData.messages || []
      
      return chatData.messages
      
    } catch (error) {
      console.error('‚ùå Failed to load chat history:', error)
      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–Ω–∞—Ç—ã
      gameState.chat = []
      return []
    }
  }
  
  
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∑–µ
  const getPhaseInfo = () => {
    const phases = {
      setup: {
        name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É'
      },
      introduction: {
        name: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
        description: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –æ–±—Å—É–¥–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
      },
      night: {
        name: '–ù–æ—á—å',
        description: '–†–æ–ª–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è'
      },
      day: {
        name: '–î–µ–Ω—å',
        description: '–û–±—Å—É–¥–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –Ω–∞–π–¥–∏—Ç–µ –æ–±–æ—Ä–æ—Ç–Ω–µ–π'
      },
      voting: {
        name: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å'
      },
      ended: {
        name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        description: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞'
      }
    }
    
    return phases[gameState.room.phase] || phases.setup
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
  const initSocketListeners = () => {
    console.log('üîå initSocketListeners called')
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    const { initSocket } = useSocket()
    const socketInstance = initSocket()
    
    if (!socketInstance) {
      console.warn('üîå Failed to initialize socket')
      return
    }
    
    console.log('üîå Setting up socket listeners...')
    
    // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞
    const setupListeners = () => {
      if (!socketInstance.connected) {
        console.log('üîå Waiting for socket connection...')
        setTimeout(setupListeners, 100)
        return
      }
      
      console.log('üîå Socket connected, setting up listeners for:', socketInstance.id)
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      on('room-created', (data) => {
        console.log('‚úÖ Room created:', data.room.id)
        loading.value = false
        Object.assign(gameState.room, data.room)
        Object.assign(gameState.player, data.player)
        gameState.connected = true
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        router.push(`/game/${data.room.id}`)
      })
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ Socket.IO
      on('join-success', (data) => {
        console.log('‚úÖ Joined room:', data.room.id)
        loading.value = false
        Object.assign(gameState.room, data.room)
        Object.assign(gameState.player, data.player)
        gameState.connected = true
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        router.push(`/game/${data.room.id}`)
      })
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
      on('game-updated', (data) => {
        console.log('üîÑ Game updated:', data)
        if (data.room) {
          Object.assign(gameState.room, data.room)
          console.log('‚úÖ Room state updated:', gameState.room)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
          console.log('üîç Checking for timer in room data:', data.room.timer)
          if (data.room.timer && data.room.timer.endTime) {
            console.log('‚è∞ Found timer in room data, syncing...', data.room.timer)
            timer.setEndTime(data.room.timer.endTime)
          } else {
            console.log('‚ùå No timer found in game-updated, keeping current timer')
            // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ game-updated –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ phase-changed
          }
        }
      })
      
      // –°–º–µ–Ω–∞ —Ñ–∞–∑—ã
      on('phase-changed', (data) => {
        console.log('üîÑ Phase changed:', data)
        gameState.room.phase = data.phase
        gameState.voting.myVote = null
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã (–∫—Ä–æ–º–µ night)
        if (data.phase !== 'night') {
          gameState.nightAction.active = false
          gameState.nightAction.role = null
          gameState.nightAction.result = null
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        console.log('‚è∞ Phase timer data:', data.timer, 'End time:', data.timerEndTime)
        if (data.timerEndTime) {
          console.log('‚úÖ Starting phase timer, ends at:', new Date(data.timerEndTime))
          timer.setEndTime(data.timerEndTime)
        } else {
          console.log('‚ùå No phase timer, deactivating')
          timer.setEndTime(null)
        }
      })
      
      // –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      on('night-action-turn', (data) => {
        console.log('üåô Night action turn received:', data)
        gameState.nightAction.active = true
        gameState.nightAction.role = data.role
        gameState.nightAction.timeLimit = data.timeLimit
        gameState.nightAction.data = null
        gameState.nightAction.result = null // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('üåô Night action state updated:', {
          active: gameState.nightAction.active,
          role: gameState.nightAction.role
        })
      })
      
      on('night-action-timer', (data) => {
        console.log('‚è∞ Night action timer update:', data)
        timer.setEndTime(data.endTime)
      })
      
      on('night-action-result', (data) => {
        console.log('üåô Received night action result:', data)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        gameState.nightAction.result = {
          message: data.message,
          data: data.data || {}
        }
        
        // –ú–æ–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        gameState.nightAction.active = false
      })
      
      // –ß–∞—Ç
      on('new-message', (data) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        const messageExists = gameState.chat.some(msg => 
          msg.id === data.message.id || 
          (msg.timestamp === data.message.timestamp && msg.senderId === data.message.senderId)
        )
        
        if (!messageExists) {
          console.log('üí¨ New message received:', data.message.text.substring(0, 50) + '...')
          
          // –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          const enrichedMessage = { ...data.message }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è whisper —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
          if (data.message.type === 'whisper' && data.message.recipientId && !data.message.recipientName) {
            const recipient = gameState.room.players.find(p => p.id === data.message.recipientId)
            enrichedMessage.recipientName = recipient?.name
          }
          
          // –ú–∞—Ä–∫–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º –ø–æ ID)
          if (data.message.senderName === gameState.player.name && data.message.senderId !== 'system') {
            enrichedMessage.isOwn = true
          }
          
          gameState.chat.push(enrichedMessage)
        } else {
          console.log('‚ö†Ô∏è Duplicate message ignored:', data.message.id)
        }
      })
      
      // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
      on('vote-confirmed', (data) => {
        gameState.voting.myVote = data.targetId
      })
      
      on('voting-ended', (data) => {
        gameState.room.votingActive = false
      })
      
      // –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ö—Ç—É–ª—Ö—É
      on('cthulhu-message', (data) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        const cthulhuMessage = {
          id: `cthulhu-${Date.now()}`,
          type: 'cthulhu',
          from: data.from,
          message: data.message,
          timestamp: Date.now(),
          isSpecial: true
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        gameState.chat.push({
          id: cthulhuMessage.id,
          type: 'system',
          text: `üêô ${data.from}: "${data.message}"`,
          timestamp: cthulhuMessage.timestamp,
          senderId: 'cthulhu',
          senderName: data.from,
          isSpecial: true
        })
      })
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è –ö—Ç—É–ª—Ö—É
      on('cthulhu-survival', (data) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–º—É –ö—Ç—É–ª—Ö—É
        if (gameState.player.role === 'cthulhu') {
          const progressMessage = {
            id: `cthulhu-progress-${Date.now()}`,
            type: 'system',
            text: `üêô –í—ã –ø–µ—Ä–µ–∂–∏–ª–∏ ${data.survivedCount} –∏–∑ ${data.totalNeeded} –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π`,
            timestamp: Date.now(),
            senderId: 'system',
            senderName: '–°–∏—Å—Ç–µ–º–∞',
            isSpecial: true
          }
          gameState.chat.push(progressMessage)
        }
      })
      
      // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —à—ë–ø–æ—Ç —á–µ—Ä–µ–∑ new-message
      
      // –û—à–∏–±–∫–∏
      on('error', (data) => {
        console.error('üö® Socket error:', data)
        loading.value = false
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (data.code === 'ROOM_NOT_FOUND') {
          console.error('‚ùå Room not found, redirecting to home...')
          router.push('/')
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —á–∞—Ç–µ
          showChatError(data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        }
      })
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    setupListeners()
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const cleanup = () => {
    // –¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ onUnmounted –≤ useTimer
  }
  
  onMounted(() => {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    gameState.connected = isConnected.value
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    watch(isConnected, (connected) => {
      gameState.connected = connected
      if (connected) {
        console.log('üü¢ Socket connected')
      } else {
        console.log('üî¥ Socket disconnected')
      }
    })
  })
  
  onUnmounted(() => {
    cleanup()
  })
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState,
    loading,
    
    // Computed
    currentPlayer,
    canStartGame,
    canChat,
    
    // –ú–µ—Ç–æ–¥—ã
    createRoom,
    joinRoom,
    startGame,
    selectRole,
    sendMessage,
    showChatError,
    executeNightAction,
    votePlayer,
    adminAction,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatTime: timer.formatTime,
    getPhaseInfo,
    initSocketListeners,
    loadRoomData,
    loadChatHistory,
    cleanup,
    
    // –¢–∞–π–º–µ—Ä
    timer,
    setTimerEndTime: timer.setEndTime
  }
}