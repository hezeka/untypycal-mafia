/**
 * app/composables/useGame.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
 */

import { ref, computed, reactive, onMounted, onUnmounted, watch } from 'vue'
import { useSocket } from './useSocket.js'
import { useRouter } from 'vue-router'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (singleton)
const gameState = reactive({
  // –ö–æ–º–Ω–∞—Ç–∞
  room: {
    id: null,
    phase: 'setup',
    players: [],
    selectedRoles: [],
    centerCards: 0,
    chatPermissions: {
      canChat: true,
      canSeeAll: true,
      canWhisper: true,
      werewolfChat: false
    },
    votingActive: false,
    gameResult: null
  },
  
  // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
  player: {
    id: null,
    name: null,
    role: null,
    alive: true,
    isHost: false,
    isMe: true
  },
  
  // –ß–∞—Ç
  chat: [],
  
  // –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  nightAction: {
    active: false,
    role: null,
    timeLimit: 0,
    data: null
  },
  
  // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  voting: {
    myVote: null
  },
  
  // –¢–∞–π–º–µ—Ä
  timer: {
    active: false,
    duration: 0,
    remaining: 0,
    interval: null
  },
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connected: false
})

export const useGame = () => {
  const { socket, isConnected, emit, on } = useSocket()
  const router = useRouter()
  const loading = ref(false)
  
  // Computed properties
  const currentPlayer = computed(() => {
    return gameState.room.players.find(p => p.isMe) || gameState.player
  })
  
  const canStartGame = computed(() => {
    const playerCount = gameState.room.players.filter(p => p.role !== 'game_master').length
    const roleCount = gameState.room.selectedRoles.length
    return playerCount >= 3 && roleCount >= playerCount && gameState.player.isHost
  })
  
  const canChat = computed(() => {
    if (gameState.room.phase === 'setup') return true
    if (gameState.room.phase === 'voting') return false
    if (gameState.room.phase === 'night' && !gameState.room.chatPermissions.werewolfChat) return false
    return gameState.room.chatPermissions.canChat
  })
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–∞–º–∏
  const createRoom = (username, isPrivate = false, hostAsObserver = false) => {
    if (!isConnected.value) {
      console.warn('‚ö†Ô∏è Socket not connected, waiting...')
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      const checkConnection = setInterval(() => {
        if (isConnected.value) {
          clearInterval(checkConnection)
          loading.value = true
          emit('create-room', { username, isPrivate, hostAsObserver })
        }
      }, 100)
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
      setTimeout(() => {
        clearInterval(checkConnection)
        if (!isConnected.value) {
          console.error('‚ùå Failed to connect to server')
          loading.value = false
        }
      }, 5000)
      
      return
    }
    
    loading.value = true
    emit('create-room', { username, isPrivate, hostAsObserver })
  }
  
  const joinRoom = (roomCode, username) => {
    if (!isConnected.value) {
      console.warn('‚ö†Ô∏è Socket not connected, waiting...')
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      const checkConnection = setInterval(() => {
        if (isConnected.value) {
          clearInterval(checkConnection)
          loading.value = true
          emit('join-room', { roomCode, username })
        }
      }, 100)
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
      setTimeout(() => {
        clearInterval(checkConnection)
        if (!isConnected.value) {
          console.error('‚ùå Failed to connect to server')
          loading.value = false
        }
      }, 5000)
      
      return
    }
    
    loading.value = true
    emit('join-room', { roomCode, username })
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π emit —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const safeEmit = (event, data) => {
    if (!isConnected.value) {
      console.warn(`‚ö†Ô∏è Cannot emit ${event} - not connected to server`)
      return false
    }
    
    return emit(event, data)
  }
  
  const startGame = () => {
    safeEmit('start-game')
  }
  
  const selectRole = (roleId, action = 'add') => {
    safeEmit('select-role', { roleId, action })
  }
  
  const sendMessage = (text) => {
    if (!text.trim()) return false
    return safeEmit('send-message', { text })
  }
  
  const executeNightAction = (action) => {
    safeEmit('night-action', action)
  }
  
  const votePlayer = (targetId) => {
    if (safeEmit('vote-player', { targetId })) {
      gameState.voting.myVote = targetId
    }
  }
  
  const adminAction = (action, targetId) => {
    safeEmit('admin-action', { action, targetId })
  }
  
  // –ú–µ—Ç–æ–¥—ã —Ç–∞–π–º–µ—Ä–∞
  const startTimer = (duration) => {
    if (gameState.timer.interval) {
      clearInterval(gameState.timer.interval)
    }
    
    gameState.timer.active = true
    gameState.timer.duration = duration
    gameState.timer.remaining = duration
    
    gameState.timer.interval = setInterval(() => {
      gameState.timer.remaining--
      
      if (gameState.timer.remaining <= 0) {
        clearInterval(gameState.timer.interval)
        gameState.timer.active = false
      }
    }, 1000)
  }
  
  const stopTimer = () => {
    if (gameState.timer.interval) {
      clearInterval(gameState.timer.interval)
    }
    gameState.timer.active = false
    gameState.timer.remaining = 0
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∑–µ
  const getPhaseInfo = () => {
    const phases = {
      setup: {
        name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É'
      },
      introduction: {
        name: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
        description: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –æ–±—Å—É–¥–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
      },
      night: {
        name: '–ù–æ—á—å',
        description: '–†–æ–ª–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è'
      },
      day: {
        name: '–î–µ–Ω—å',
        description: '–û–±—Å—É–¥–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –Ω–∞–π–¥–∏—Ç–µ –æ–±–æ—Ä–æ—Ç–Ω–µ–π'
      },
      voting: {
        name: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å'
      },
      ended: {
        name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        description: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞'
      }
    }
    
    return phases[gameState.room.phase] || phases.setup
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
  const initSocketListeners = () => {
    if (!socket.value) {
      // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
      const { initSocket } = useSocket()
      initSocket()
      
      // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      setTimeout(() => {
        if (socket.value) {
          initSocketListeners()
        }
      }, 100)
      return
    }
    
    console.log('üîå Initializing socket listeners...')
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    on('room-created', (data) => {
      console.log('‚úÖ Room created:', data.room.id)
      loading.value = false
      Object.assign(gameState.room, data.room)
      Object.assign(gameState.player, data.player)
      gameState.connected = true
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      router.push(`/game/${data.room.id}`)
    })
    
    on('join-success', (data) => {
      console.log('‚úÖ Joined room:', data.room.id)
      loading.value = false
      Object.assign(gameState.room, data.room)
      Object.assign(gameState.player, data.player)
      gameState.connected = true
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –Ω–µ–π
      if (route.name !== 'game-id') {
        router.push(`/game/${data.room.id}`)
      }
    })
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
    on('game-updated', (data) => {
      if (data.room) {
        Object.assign(gameState.room, data.room)
      }
    })
    
    // –°–º–µ–Ω–∞ —Ñ–∞–∑—ã
    on('phase-changed', (data) => {
      gameState.room.phase = data.phase
      gameState.voting.myVote = null
      
      if (data.timer) {
        startTimer(data.timer)
      } else {
        stopTimer()
      }
    })
    
    // –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    on('night-action-turn', (data) => {
      gameState.nightAction.active = true
      gameState.nightAction.role = data.role
      gameState.nightAction.timeLimit = data.timeLimit
      gameState.nightAction.data = null
      
      if (data.timeLimit) {
        startTimer(data.timeLimit)
      }
    })
    
    on('night-action-result', (data) => {
      gameState.nightAction.data = data
      
      if (data.success) {
        gameState.nightAction.active = false
      }
    })
    
    // –ß–∞—Ç
    on('new-message', (data) => {
      gameState.chat.push(data.message)
    })
    
    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    on('vote-confirmed', (data) => {
      gameState.voting.myVote = data.targetId
    })
    
    on('voting-ended', (data) => {
      gameState.room.votingActive = false
    })
    
    // –û—à–∏–±–∫–∏
    on('error', (data) => {
      console.error('üö® Socket error:', data)
      loading.value = false
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (data.code === 'ROOM_NOT_FOUND') {
        console.error('‚ùå Room not found, redirecting to home...')
        router.push('/')
      }
    })
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const cleanup = () => {
    stopTimer()
  }
  
  onMounted(() => {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    gameState.connected = isConnected.value
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    watch(isConnected, (connected) => {
      gameState.connected = connected
      if (connected) {
        console.log('üü¢ Socket connected')
      } else {
        console.log('üî¥ Socket disconnected')
      }
    })
  })
  
  onUnmounted(() => {
    cleanup()
  })
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState,
    loading,
    
    // Computed
    currentPlayer,
    canStartGame,
    canChat,
    
    // –ú–µ—Ç–æ–¥—ã
    createRoom,
    joinRoom,
    startGame,
    selectRole,
    sendMessage,
    executeNightAction,
    votePlayer,
    adminAction,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatTime,
    getPhaseInfo,
    initSocketListeners,
    cleanup
  }
}