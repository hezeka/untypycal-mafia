import { ref, computed, reactive } from 'vue'
import { useSocket } from './useSocket'

// Global state (persists across components)
const player = reactive({
  id: null,
  name: '',
  role: null
})

const room = reactive({
  id: null,
  hostId: null,
  isHost: false
})

const gameData = reactive({
  players: [],
  selectedRoles: [],
  gameState: 'setup',
  currentPhase: null,
  chat: [],
  timer: null
})

const roles = {
  villager: {
    name: '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å',
    description: '–û–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å –±–µ–∑ –æ—Å–æ–±—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π. –¶–µ–ª—å - –Ω–∞–π—Ç–∏ –∏ —É–±–∏—Ç—å –æ–±–æ—Ä–æ—Ç–Ω–µ–π.',
    color: 'blue',
    night: false,
    team: 'village'
  },
  sentinel: {
    name: '–°—Ç—Ä–∞–∂',
    description: '–ù–æ—á—å—é –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —â–∏—Ç –Ω–∞ –∫–∞—Ä—Ç—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–æ–º–µ —Å–≤–æ–µ–π). –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  apprentice_seer: {
    name: '–£—á–µ–Ω–∏–∫ –ø—Ä–æ–≤–∏–¥—Ü–∞',
    description: '–ù–æ—á—å—é –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–Ω—É –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  paranormal_investigator: {
    name: '–ü–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
    description: '–ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ 2 –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–æ–≤. –ï—Å–ª–∏ –Ω–∞–π–¥—ë—Ç –æ–±–æ—Ä–æ—Ç–Ω—è –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω–∏–∫–∞ - —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  witch: {
    name: '–í–µ–¥—å–º–∞',
    description: '–ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–º–µ–Ω—è—Ç—å –µ—ë —Å –∫–∞—Ä—Ç–æ–π –∏–≥—Ä–æ–∫–∞. –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  village_idiot: {
    name: '–î–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π –¥—É—Ä–∞–∫',
    description: '–ú–æ–∂–µ—Ç —Å–¥–≤–∏–Ω—É—Ç—å –í–°–ï –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ (–∫—Ä–æ–º–µ —Å–≤–æ–µ–π) –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–ª–µ–≤–æ –∏–ª–∏ –≤–ø—Ä–∞–≤–æ.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  revealer: {
    name: '–†–∞–∑–æ–±–ª–∞—á–∏—Ç–µ–ª—å',
    description: '–ú–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞ –ª–∏—Ü–æ–º –≤–≤–µ—Ä—Ö. –ï—Å–ª–∏ —ç—Ç–æ –æ–±–æ—Ä–æ—Ç–µ–Ω—å –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω–∏–∫ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  curator: {
    name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å',
    description: '–ú–æ–∂–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–∞ –∫–∞—Ä—Ç—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  bodyguard: {
    name: '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å',
    description: '–ò–≥—Ä–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–±–∏—Ç.',
    color: 'blue',
    night: false,
    team: 'village'
  },
  seer: {
    name: '–ü—Ä–æ–≤–∏–¥–µ—Ü',
    description: '–ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –¥–≤–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  robber: {
    name: '–ì—Ä–∞–±–∏—Ç–µ–ª—å',
    description: '–ú–µ–Ω—è–µ—Ç —Å–≤–æ—é –∫–∞—Ä—Ç—É —Å –∫–∞—Ä—Ç–æ–π –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ—é –Ω–æ–≤—É—é —Ä–æ–ª—å.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  troublemaker: {
    name: '–°–º—É—Ç—å—è–Ω',
    description: '–ú–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—ã –¥–≤—É—Ö –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  drunk: {
    name: '–ü—å—è–Ω–∏—Ü–∞',
    description: '–ú–µ–Ω—è–µ—Ç —Å–≤–æ—é –∫–∞—Ä—Ç—É —Å –æ–¥–Ω–æ–π –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  insomniac: {
    name: '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
    description: '–í –∫–æ–Ω—Ü–µ –Ω–æ—á–∏ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç—É.',
    color: 'blue',
    night: true,
    team: 'village'
  },
  hunter: {
    name: '–û—Ö–æ—Ç–Ω–∏–∫',
    description: '–ï—Å–ª–∏ –µ–≥–æ —É–±–∏–≤–∞—é—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º, —Ç–æ—Ç –Ω–∞ –∫–æ–≥–æ –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç - —Ç–æ–∂–µ —É–º–∏—Ä–∞–µ—Ç.',
    color: 'blue',
    night: false,
    team: 'village'
  },
  werewolf: {
    name: '–û–±–æ—Ä–æ—Ç–µ–Ω—å',
    description: '–ù–æ—á—å—é —É–∑–Ω–∞—ë—Ç –¥—Ä—É–≥–∏—Ö –æ–±–æ—Ä–æ—Ç–Ω–µ–π. –¶–µ–ª—å - –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∂–∏–≤—ã—Ö.',
    color: 'red',
    night: true,
    team: 'werewolf'
  },
  alpha_wolf: {
    name: '–ê–ª—å—Ñ–∞-–≤–æ–ª–∫',
    description: '–£–∑–Ω–∞—ë—Ç –¥—Ä—É–≥–∏—Ö –æ–±–æ—Ä–æ—Ç–Ω–µ–π, –∑–∞—Ç–µ–º –º–µ–Ω—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –æ–±–æ—Ä–æ—Ç–Ω—è —Å –∫–∞—Ä—Ç–æ–π –∏–≥—Ä–æ–∫–∞.',
    color: 'red',
    night: true,
    team: 'werewolf'
  },
  mystic_wolf: {
    name: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ª–∫',
    description: '–£–∑–Ω–∞—ë—Ç –¥—Ä—É–≥–∏—Ö –æ–±–æ—Ä–æ—Ç–Ω–µ–π, –∑–∞—Ç–µ–º –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
    color: 'red',
    night: true,
    team: 'werewolf'
  },
  dream_wolf: {
    name: '–í–æ–ª–∫-—Å–Ω–æ–≤–∏–¥–µ—Ü',
    description: '–ù–µ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è —Å –æ–±–æ—Ä–æ—Ç–Ω—è–º–∏, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü. –î—Ä—É–≥–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–∏ –µ–≥–æ –∑–Ω–∞—é—Ç.',
    color: 'red',
    night: false,
    team: 'werewolf'
  },
  minion: {
    name: '–ú–∏–Ω—å–æ–Ω',
    description: '–í–∏–¥–∏—Ç –≤—Å–µ—Ö –æ–±–æ—Ä–æ—Ç–Ω–µ–π. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Å –æ–±–æ—Ä–æ—Ç–Ω—è–º–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ —É–±–∏–ª–∏.',
    color: 'red',
    night: true,
    team: 'werewolf'
  },
  tanner: {
    name: '–ù–µ—É–¥–∞—á–Ω–∏–∫',
    description: '–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —É–±–∏–ª–∏. –ï—Å–ª–∏ –æ–Ω —É–º–∏—Ä–∞–µ—Ç - –æ–±–æ—Ä–æ—Ç–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–±–µ–¥–∏—Ç—å.',
    color: 'brown',
    night: false,
    team: 'tanner'
  },
  doppelganger: {
    name: '–î–æ–ø–ø–µ–ª—å–≥–∞–Ω–≥–µ—Ä',
    description: '–ö–æ–ø–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–≤–∏–¥–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ—é.',
    color: 'purple',
    night: true,
    team: 'special'
  },
  game_master: {
    name: '–í–µ–¥—É—â–∏–π',
    description: '–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ö–æ–¥–æ–º –∏–≥—Ä—ã, –æ–±—ä—è–≤–ª—è–µ—Ç —Ñ–∞–∑—ã –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–∞–º–∏.',
    color: 'gold',
    night: false,
    team: 'neutral'
  }
}

export const useGame = () => {
  const { socket } = useSocket()

  // Computed properties
  const isInRoom = computed(() => !!room.id)
  const isHost = computed(() => room.isHost)
  
  const currentPlayer = computed(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
    const current = gameData.players.find(p => 
      p.id === player.id || 
      p.id === socket.id || 
      p.name === player.name
    )
    
    if (current) {
      console.log('‚úÖ Current player found:', { 
        id: current.id, 
        name: current.name, 
        role: current.role,
        searchedBy: current.id === player.id ? 'player.id' : 
                   current.id === socket.id ? 'socket.id' : 'player.name'
      })
    } else {
      console.log('‚ùå Current player NOT found. Search params:', {
        'player.id': player.id,
        'socket.id': socket.id,
        'player.name': player.name,
        'available_players': gameData.players.map(p => ({ 
          id: p.id, 
          name: p.name, 
          role: p.role ? '[ROLE_HIDDEN]' : null // –°–∫—Ä—ã–≤–∞–µ–º —Ä–æ–ª–∏ –≤ –ª–æ–≥–∞—Ö
        }))
      })
    }
    return current
  })
  
  const otherPlayers = computed(() => gameData.players.filter(p => p.id !== player.id && p.role !== 'game_master'))
  const allPlayers = computed(() => gameData.players.filter(p => p.role !== 'game_master'))
  const allPlayersForVoting = computed(() => gameData.players.filter(p => p.role !== 'game_master'))
  const selectedRoleObjects = computed(() => 
    gameData.selectedRoles.map(roleId => ({ id: roleId, ...roles[roleId] }))
  )
  const chatMessages = computed(() => gameData.chat)

  // Socket event handlers
  const initSocketListeners = () => {
    socket.on('room-created', ({ roomId, gameData: newGameData }) => {
      console.log('üè† Room created:', roomId)
      room.id = roomId
      room.hostId = newGameData.hostId
      room.isHost = newGameData.hostId === socket.id
      
      // –û–±–Ω–æ–≤–ª—è–µ–º player.id –°–†–ê–ó–£
      player.id = socket.id
      
      updateGameData(newGameData)
    })

    socket.on('join-success', (newGameData) => {
      console.log('üì• Join success event received for room:', newGameData.id)
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º player.id –¥–æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      player.id = socket.id
      
      // Successful join/rejoin
      room.id = newGameData.id
      room.hostId = newGameData.hostId
      room.isHost = newGameData.hostId === socket.id
      
      // Restore player role from server data –°–†–ê–ó–£, –¥–æ updateGameData
      const currentPlayerData = newGameData.players?.find(p => 
        p.id === socket.id || 
        p.name === player.name
      )
      
      if (currentPlayerData) {
        console.log('üë§ Current player data from server:', {
          id: currentPlayerData.id,
          name: currentPlayerData.name,
          role: currentPlayerData.role || 'NO_ROLE'
        })
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –°–†–ê–ó–£
        player.id = currentPlayerData.id
        player.name = currentPlayerData.name
        
        if (currentPlayerData.role) {
          player.role = currentPlayerData.role
          console.log(`‚úÖ Restored role: ${currentPlayerData.role}`)
        } else {
          console.log('‚ö†Ô∏è No role found in server data')
        }
      } else {
        console.log('‚ùå Player not found in server response')
        console.log('Search attempted with:', {
          'socket.id': socket.id,
          'player.name': player.name
        })
        console.log('Available players:', newGameData.players?.map(p => ({
          id: p.id,
          name: p.name,
          hasRole: !!p.role
        })))
      }
      
      // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
      updateGameData(newGameData)
      
      console.log('üéÆ Final player state:', { 
        id: player.id, 
        name: player.name, 
        role: player.role || 'NO_ROLE'
      })
    })

    socket.on('game-updated', (newGameData) => {
      const oldRole = player.role
      
      // Update room info if not set
      if (!room.id && newGameData.id) {
        room.id = newGameData.id
        room.hostId = newGameData.hostId
        room.isHost = newGameData.hostId === socket.id
      }
      
      // Check if current player's role changed BEFORE updating game data
      const currentPlayerData = newGameData.players?.find(p => 
        p.id === player.id || 
        p.id === socket.id ||
        p.name === player.name
      )
      
      if (currentPlayerData && currentPlayerData.role && currentPlayerData.role !== oldRole) {
        player.role = currentPlayerData.role
        console.log(`Role updated to: ${currentPlayerData.role}`)
      }
      
      updateGameData(newGameData)
    })

    socket.on('game-started', (newGameData) => {
      console.log('üöÄ Game started event received')
      
      // Force update player role when game starts BEFORE updating game data
      const currentPlayerData = newGameData.players?.find(p => 
        p.id === player.id || 
        p.id === socket.id ||
        p.name === player.name
      )
      
      if (currentPlayerData && currentPlayerData.role) {
        player.role = currentPlayerData.role
        console.log(`üé≠ Role assigned at game start: ${currentPlayerData.role}`)
      }
      
      updateGameData(newGameData)
    })

    socket.on('phase-changed', ({ gameState, currentPhase }) => {
      gameData.gameState = gameState
      gameData.currentPhase = currentPhase
    })

    socket.on('new-message', (message) => {
      // Avoid duplicating messages - check if message already exists
      const existingMessage = gameData.chat.find(m => m.id === message.id)
      if (!existingMessage) {
        gameData.chat.push(message)
      }
    })

    socket.on('new-whisper', (whisperMessage) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —à–µ–ø–æ—Ç –≤ —á–∞—Ç
      const existingWhisper = gameData.chat.find(m => m.id === whisperMessage.id)
      if (!existingWhisper) {
        gameData.chat.push(whisperMessage)
      }
    })

    socket.on('whisper-error', ({ message }) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —à–µ–ø–æ—Ç–∞
      alert(`–û—à–∏–±–∫–∞ —à–µ–ø–æ—Ç–∞: ${message}`)
    })

    socket.on('vote-updated', ({ votes }) => {
      gameData.players = gameData.players.map(p => {
        const voteData = votes.find(v => v.id === p.id)
        return { ...p, votes: voteData ? voteData.votes : 0 }
      })
    })

    socket.on('voting-ended', ({ eliminated, reason, winCondition, gameData: newGameData }) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      if (eliminated.length > 0) {
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${reason}`)
      } else {
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${reason}`)
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
      if (winCondition) {
        if (winCondition.gameEnded) {
          console.log(`üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ${winCondition.message}`)
        } else {
          console.log(`üìÖ ${winCondition.message}`)
        }
      }
      
      if (newGameData) {
        updateGameData(newGameData)
      }
    })

    socket.on('timer-updated', ({ timer }) => {
      gameData.timer = timer
    })

    socket.on('kicked', ({ message }) => {
      alert(message)
      // Redirect to home page
      if (typeof window !== 'undefined') {
        window.location.href = '/'
      }
    })

    socket.on('new-whisper', (whisperMessage) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —à–µ–ø–æ—Ç –≤ —á–∞—Ç
      const existingWhisper = gameData.chat.find(m => m.id === whisperMessage.id)
      if (!existingWhisper) {
        gameData.chat.push(whisperMessage)
      }
    })

    socket.on('command-error', ({ message }) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–æ–º–∞–Ω–¥—ã - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ GameChat
      console.log('Command error:', message)
    })

    socket.on('error', ({ message }) => {
      console.error('Game error:', message)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
      if (message.includes('–∏–º—è') || message.includes('–ò–º—è') || 
          message.includes('name') || message.includes('Name') ||
          message.includes('—É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ') || message.includes('–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ')) {
        
        // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Ñ–æ—Ä–º—ã
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω
        return
      }
      
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
      alert(message)
    })

    // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω
    socket.on('name-check-result', (result) => {
      // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ñ–æ—Ä–º
    })

    socket.on('name-suggestions', (result) => {
      // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ñ–æ—Ä–º
    })
  }

  // Helper functions
  const updateGameData = (newGameData) => {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–∫—Ä—ã–≤–∞—è —Ä–æ–ª–∏ –≤ –ª–æ–≥–∞—Ö
    console.log('üìä Updating game data:', {
      id: newGameData.id,
      gameState: newGameData.gameState,
      playersCount: newGameData.players?.length || 0,
      selectedRolesCount: newGameData.selectedRoles?.length || 0
      // –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ players —Å —Ä–æ–ª—è–º–∏
    })
    
    Object.assign(gameData, newGameData)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (!player.role) {
      const currentPlayerData = newGameData.players?.find(p => 
        p.id === player.id || 
        p.id === socket.id ||
        p.name === player.name
      )
      
      if (currentPlayerData && currentPlayerData.role) {
        player.role = currentPlayerData.role
        console.log(`üîÑ Role updated in updateGameData: ${currentPlayerData.role}`)
      }
    }
  }

  const clearRoom = () => {
    room.id = null
    room.hostId = null
    room.isHost = false
    gameData.players = []
    gameData.selectedRoles = []
    gameData.gameState = 'setup'
    gameData.currentPhase = null
    gameData.chat = []
    gameData.timer = null
    player.role = null
    player.id = null
  }

  // Actions
  const createRoom = (playerName) => {
    player.id = socket.id
    player.name = playerName
    socket.emit('create-room', { playerName })
  }

  const joinRoom = ({ roomId, playerName }) => {
    player.id = socket.id
    player.name = playerName
    room.id = roomId // Set room ID immediately for UI
    socket.emit('join-room', { roomId, playerName })
  }

  const selectRole = (roleId) => {
    if (!isHost.value) return
    socket.emit('select-role', { roomId: room.id, roleId })
  }

  const removeRole = (roleId) => {
    if (!isHost.value) return
    socket.emit('remove-role', { roomId: room.id, roleId })
  }

  const startGame = () => {
    if (!isHost.value) return
    socket.emit('start-game', { roomId: room.id })
  }

  const changePhase = ({ gameState, currentPhase }) => {
    if (!isHost.value) return
    socket.emit('change-phase', { roomId: room.id, gameState, currentPhase })
  }

  const sendMessage = (message) => {
    socket.emit('send-message', { roomId: room.id, message })
  }

  const votePlayer = (targetId) => {
    socket.emit('vote-player', { roomId: room.id, targetId })
  }

  const endVoting = () => {
    if (!isHost.value) return
    socket.emit('end-voting', { roomId: room.id })
  }

  const adminAction = (action, targetId, newRole = null) => {
    if (!isHost.value) return
    socket.emit('admin-action', { roomId: room.id, action, targetId, newRole })
  }

  const nextPhase = () => {
    if (!isHost.value) return
    socket.emit('next-phase', { roomId: room.id })
  }

  const setTimer = (timer) => {
    if (!isHost.value) return
    socket.emit('change-timer', { roomId: room.id, timer })
  }

  return {
    // State
    player: readonly(player),
    room: readonly(room),
    gameData: readonly(gameData),
    roles,

    // Computed
    isInRoom,
    isHost,
    currentPlayer,
    otherPlayers,
    allPlayers,
    allPlayersForVoting,
    selectedRoleObjects,
    chatMessages,

    // Methods
    initSocketListeners,
    updateGameData,
    clearRoom,
    createRoom,
    joinRoom,
    selectRole,
    removeRole,
    startGame,
    changePhase,
    sendMessage,
    votePlayer,
    endVoting,
    adminAction,
    nextPhase,
    setTimer
  }
}