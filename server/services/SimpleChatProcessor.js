/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞
 */

export class SimpleChatProcessor {
  constructor() {}
  
  isCommand(message) {
    return message.trim().startsWith('/')
  }
  
  async processCommand(senderId, message, room) {
    const trimmed = message.trim()
    if (!this.isCommand(trimmed)) {
      return { isCommand: false }
    }
    
    const parts = trimmed.substring(1).split(/\s+/)
    const command = parts[0].toLowerCase()
    const args = parts.slice(1)
    
    const sender = room.getPlayer(senderId)
    if (!sender) {
      return { isCommand: true, success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
    }
    
    switch (command) {
      case '—à':
      case 'w':
      case 'whisper':
        return this.handleWhisper(sender, args, room)
        
      case 'help':
      case '–ø–æ–º–æ—â—å':
        return this.handleHelp(sender, room)
        
      default:
        return { 
          isCommand: true, 
          success: false, 
          error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${command}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.` 
        }
    }
  }
  
  handleWhisper(sender, args, room) {
    if (args.length < 2) {
      return {
        isCommand: true,
        success: false,
        error: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—à <–∏–≥—Ä–æ–∫> <—Å–æ–æ–±—â–µ–Ω–∏–µ>'
      }
    }
    
    const targetName = args[0].toLowerCase()
    const messageText = args.slice(1).join(' ').trim()
    
    if (!messageText) {
      return {
        isCommand: true,
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      }
    }
    
    // –®–µ–ø–æ—Ç –≤–µ–¥—É—â–µ–º—É
    if (targetName === '–≤–µ–¥—É—â–∏–π' || targetName === 'host') {
      const hostPlayer = Array.from(room.players.values()).find(p => p.isHost)
      if (!hostPlayer) {
        return {
          isCommand: true,
          success: false,
          error: '–í–µ–¥—É—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
      }
      
      return this.sendWhisper(sender, hostPlayer, messageText, room)
    }
    
    // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    const targetPlayer = Array.from(room.players.values())
      .find(p => p.name.toLowerCase().includes(targetName))
    
    if (!targetPlayer) {
      return {
        isCommand: true,
        success: false,
        error: `–ò–≥—Ä–æ–∫ "${args[0]}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
      }
    }
    
    if (targetPlayer.id === sender.id) {
      return {
        isCommand: true,
        success: false,
        error: '–ù–µ–ª—å–∑—è —à–µ–ø—Ç–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ'
      }
    }
    
    return this.sendWhisper(sender, targetPlayer, messageText, room)
  }
  
  sendWhisper(sender, target, messageText, room) {
    const whisperMessage = {
      id: Date.now(),
      senderId: sender.id,
      senderName: sender.name,
      senderRole: room.shouldShowPlayerRole(sender, target) ? sender.role : null,
      recipientId: target.id,
      recipientName: target.name,
      text: messageText,
      type: 'whisper',
      timestamp: Date.now()
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–æ–º–Ω–∞—Ç—ã
    room.chat.push(whisperMessage)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —à–µ–ø–æ—Ç–∞ + –≤–µ–¥—É—â–µ–º—É
    const recipients = new Set([sender.id, target.id])
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–µ–≥–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫
    const host = Array.from(room.players.values()).find(p => p.isHost || p.role === 'game_master')
    if (host && host.id !== sender.id && host.id !== target.id) {
      recipients.add(host.id)
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    recipients.forEach(playerId => {
      const socket = room.sockets.get(playerId)
      if (socket) {
        try {
          socket.emit('new-message', { message: whisperMessage })
        } catch (error) {
          console.error(`Failed to send whisper to ${playerId}:`, error)
        }
      }
    })
    
    return {
      isCommand: true,
      success: true
    }
  }
  
  handleHelp(sender, room) {
    const helpText = `üìã –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:
‚Ä¢ /—à <–∏–≥—Ä–æ–∫> <—Ç–µ–∫—Å—Ç> - –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /—à –≤–µ–¥—É—â–∏–π <—Ç–µ–∫—Å—Ç> - —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–º—É
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /—à –ò–≤–∞–Ω –ü—Ä–∏–≤–µ—Ç!
‚Ä¢ /—à –≤–µ–¥—É—â–∏–π –í–æ–ø—Ä–æ—Å –ø–æ –∏–≥—Ä–µ`
    
    const helpMessage = {
      id: Date.now(),
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞',
      text: helpText,
      type: 'system',
      timestamp: Date.now()
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    const socket = room.sockets.get(sender.id)
    if (socket) {
      try {
        socket.emit('new-message', { message: helpMessage })
      } catch (error) {
        console.error(`Failed to send help to ${sender.id}:`, error)
      }
    }
    
    return {
      isCommand: true,
      success: true
    }
  }
}