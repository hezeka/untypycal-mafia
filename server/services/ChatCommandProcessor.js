// server/services/ChatCommandProcessor.js
import { sanitizeHtml } from '../utils/gameHelpers.js'
import { GAME_PHASES, MESSAGE_TYPES } from '../utils/constants.js'

export class ChatCommandProcessor {
  constructor(room) {
    this.room = room
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
  isCommand(message) {
    return message.trim().startsWith('/')
  }

  // –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  parseCommand(message) {
    const trimmed = message.trim()
    if (!this.isCommand(trimmed)) return null

    const parts = trimmed.substring(1).split(/\s+/)
    if (parts.length === 0) return null

    const command = parts[0].toLowerCase()
    const args = parts.slice(1)

    return { command, args, raw: trimmed }
  }

  // –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∞–ª–∏–∞—Å—É
  findCommand(commandName) {
    const commands = {
      '—à': ['whisper', 'w'],
      '–ø–æ–º–æ—â—å': ['help', 'h', '?'],
      '–∫—Ç–æ': ['who', '—Å–ø–∏—Å–æ–∫', 'list'],
      '–≤—Ä–µ–º—è': ['time', 'timer']
    }

    for (const [cmd, aliases] of Object.entries(commands)) {
      if (cmd === commandName || aliases.includes(commandName)) {
        return cmd
      }
    }
    return null
  }

  // ‚úÖ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î
  async processCommand(senderId, message) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!message || typeof message !== 'string') {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã' }
      }
      
      if (message.length > 1000) {
        return { success: false, error: '–ö–æ–º–∞–Ω–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è' }
      }
      
      const parsed = this.parseCommand(message)
      if (!parsed) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã' }
      }
      
      if (parsed.command.length > 50 || /[<>'"&]/.test(parsed.command)) {
        return { success: false, error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–º–∞–Ω–¥–µ' }
      }

      const sender = this.room.getPlayer(senderId)
      if (!sender) {
        return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
      }

      const command = this.findCommand(parsed.command)
      if (!command) {
        return { 
          success: false, 
          error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${parsed.command}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø–æ–º–æ—â—å –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.` 
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      switch (command) {
        case '—à':
          return await this.handleWhisperCommand(sender, parsed.args)
          
        case '–ø–æ–º–æ—â—å':
          return await this.handleHelpCommand(sender)
          
        case '–∫—Ç–æ':
          return await this.handleWhoCommand(sender)
          
        case '–≤—Ä–µ–º—è':
          return await this.handleTimeCommand(sender)
          
        default:
          return { success: false, error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞' }
      }
    } catch (error) {
      console.error('Command processing error:', error)
      return { success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã' }
    }
  }

  // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ –®–ï–ü–û–¢–ê
  async handleWhisperCommand(sender, args) {
    if (args.length < 2) {
      return {
        success: false,
        error: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—à <–∏–≥—Ä–æ–∫|–≥—Ä—É–ø–ø–∞> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n–ü—Ä–∏–º–µ—Ä: /—à –ò–≤–∞–Ω –ü—Ä–∏–≤–µ—Ç!'
      }
    }

    const target = args[0].toLowerCase()
    const messageText = args.slice(1).join(' ').trim()
    
    if (!messageText) {
      return { success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
    }

    if (messageText.length > 500) {
      return { success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' }
    }

    const cleanMessage = sanitizeHtml(messageText)

    // 1. –®–µ–ø–æ—Ç –≤–µ–¥—É—â–µ–º—É (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (target === '–≤–µ–¥—É—â–∏–π' || target === 'host') {
      return await this.whisperToHost(sender, cleanMessage)
    }

    // 2. –ì—Ä—É–ø–ø–æ–≤–æ–π —à–µ–ø–æ—Ç
    if (this.isGroupTarget(target)) {
      return await this.whisperToGroup(sender, target, cleanMessage)
    }

    // 3. –õ–∏—á–Ω—ã–π —à–µ–ø–æ—Ç
    return await this.whisperToPlayer(sender, target, cleanMessage)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≥—Ä—É–ø–ø–æ–π
  isGroupTarget(target) {
    const groups = ['–æ–±–æ—Ä–æ—Ç–Ω–∏', '–≤–æ–ª–∫–∏', 'werewolves', '–¥–µ—Ä–µ–≤–Ω—è', '–∂–∏—Ç–µ–ª–∏', 'village', '–≤—Å–µ', 'all']
    return groups.includes(target)
  }

  // ‚úÖ –®–ï–ü–û–¢ –í–ï–î–£–©–ï–ú–£
  async whisperToHost(sender, message) {
    const host = Array.from(this.room.players.values())
      .find(p => p.isHost || p.role === 'game_master')
    
    if (!host) {
      return { success: false, error: '–í–µ–¥—É—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' }
    }

    if (sender.id === host.id) {
      return { success: false, error: '–ù–µ–ª—å–∑—è —à–µ–ø—Ç–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ' }
    }

    const whisperMessage = {
      id: Date.now(),
      senderId: sender.id,
      senderName: sender.name,
      senderRole: this.room.shouldShowPlayerRole(sender, host) ? sender.role : null,
      recipientId: host.id,
      recipientName: host.name,
      text: message,
      type: MESSAGE_TYPES.WHISPER,
      timestamp: Date.now()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    this.room.chat.push(whisperMessage)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    const recipients = [sender.id, host.id]
    
    recipients.forEach(playerId => {
      const socket = this.room.sockets.get(playerId)
      if (socket) {
        socket.emit('new-message', { message: whisperMessage })
      }
    })

    return { success: true }
  }

  // ‚úÖ –ì–†–£–ü–ü–û–í–û–ô –®–ï–ü–û–¢
  async whisperToGroup(sender, groupName, message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ —à–µ–ø–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    const canGroupWhisper = this.canPlayerGroupWhisper(sender, groupName)
    if (!canGroupWhisper.allowed) {
      return { success: false, error: canGroupWhisper.reason }
    }

    const recipients = this.getGroupRecipients(groupName, sender)
    if (recipients.length === 0) {
      return { success: false, error: '–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã' }
    }

    const whisperMessage = {
      id: Date.now(),
      senderId: sender.id,
      senderName: sender.name,
      senderRole: sender.role,
      groupName: this.getGroupDisplayName(groupName),
      text: message,
      type: MESSAGE_TYPES.GROUP_WHISPER,
      timestamp: Date.now()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    this.room.chat.push(whisperMessage)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    recipients.forEach(playerId => {
      const socket = this.room.sockets.get(playerId)
      if (socket) {
        socket.emit('new-message', { message: whisperMessage })
      }
    })

    return { success: true }
  }

  // ‚úÖ –õ–ò–ß–ù–´–ô –®–ï–ü–û–¢
  async whisperToPlayer(sender, targetName, message) {
    // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    const targetPlayer = Array.from(this.room.players.values())
      .find(p => p.name.toLowerCase().includes(targetName))

    if (!targetPlayer) {
      return { success: false, error: `–ò–≥—Ä–æ–∫ "${targetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω` }
    }

    if (targetPlayer.id === sender.id) {
      return { success: false, error: '–ù–µ–ª—å–∑—è —à–µ–ø—Ç–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ' }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ —à–µ–ø–æ—Ç—ã
    if (!this.room.chatPermissions.canWhisper) {
      return { success: false, error: '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ' }
    }

    const whisperMessage = {
      id: Date.now(),
      senderId: sender.id,
      senderName: sender.name,
      senderRole: this.room.shouldShowPlayerRole(sender, targetPlayer) ? sender.role : null,
      recipientId: targetPlayer.id,
      recipientName: targetPlayer.name,
      text: message,
      type: MESSAGE_TYPES.WHISPER,
      timestamp: Date.now()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    this.room.chat.push(whisperMessage)

    // –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –≤–µ–¥—É—â–∏–π
    const recipients = new Set([sender.id, targetPlayer.id])
    
    const host = Array.from(this.room.players.values())
      .find(p => (p.isHost || p.role === 'game_master') && p.id !== sender.id && p.id !== targetPlayer.id)
    
    if (host) {
      recipients.add(host.id)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    recipients.forEach(playerId => {
      const socket = this.room.sockets.get(playerId)
      if (socket) {
        socket.emit('new-message', { message: whisperMessage })
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —à–µ–ø–æ—Ç–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ (–¥–Ω–µ–º, –≤–æ –≤—Ä–µ–º—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –Ω–µ –≤–µ–¥—É—â–µ–º—É)
    const isHost = targetPlayer.isHost || targetPlayer.role === 'game_master'
    const isDayPhase = this.room.gameState === GAME_PHASES.DAY
    const isIntroductionPhase = this.room.gameState === GAME_PHASES.INTRODUCTION
    
    if (!isHost && (isDayPhase || isIntroductionPhase)) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–æ–±—ã—Ç–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —à–µ–ø—á–µ—Ç
      this.room.broadcast('whisper-activity', {
        playerId: sender.id,
        playerName: sender.name
      })
      
      console.log(`üí¨ Whisper activity sent for ${sender.name} (${sender.id})`)
    }

    return { success: true }
  }

  // ‚úÖ –ü–†–ê–í–ê –ù–ê –ì–†–£–ü–ü–û–í–´–ï –®–ï–ü–û–¢–´ –ü–û –§–ê–ó–ê–ú
  canPlayerGroupWhisper(sender, groupName) {
    const phase = this.room.gameState

    // –í–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ —à–µ–ø–æ—Ç –≤–µ–¥—É—â–µ–º—É
    if (phase === GAME_PHASES.VOTING) {
      return { 
        allowed: false, 
        reason: '–í–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã–µ —à–µ–ø–æ—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã' 
      }
    }

    // –î–Ω–µ–º - –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≥—Ä—É–ø–ø–æ–≤—ã–µ —à–µ–ø–æ—Ç—ã
    if (phase === GAME_PHASES.DAY) {
      return { 
        allowed: false, 
        reason: '–î–Ω–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —à–µ–ø–æ—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã' 
      }
    }

    // –ù–æ—á—å—é - —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π
    if (phase === GAME_PHASES.NIGHT) {
      if (groupName === '–æ–±–æ—Ä–æ—Ç–Ω–∏' || groupName === '–≤–æ–ª–∫–∏' || groupName === 'werewolves') {
        if (!this.room.isWerewolf(sender.role)) {
          return { 
            allowed: false, 
            reason: '–¢–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –Ω–æ—á—å—é' 
          }
        }
        return { allowed: true }
      }
      
      return { 
        allowed: false, 
        reason: '–ù–æ—á—å—é –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —à–µ–ø–æ—Ç –º–µ–∂–¥—É –æ–±–æ—Ä–æ—Ç–Ω—è–º–∏' 
      }
    }

    // –í —Ñ–∞–∑–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    if (phase === GAME_PHASES.INTRODUCTION || phase === GAME_PHASES.SETUP) {
      // –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–º
      if (groupName === '–≤—Å–µ' || groupName === 'all') {
        if (!sender.isHost && sender.role !== 'game_master') {
          return { 
            allowed: false, 
            reason: '–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º' 
          }
        }
      }
      return { allowed: true }
    }

    return { allowed: false, reason: '–ì—Ä—É–ø–ø–æ–≤—ã–µ —à–µ–ø–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ' }
  }

  // ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô –î–õ–Ø –ì–†–£–ü–ü–´
  getGroupRecipients(groupName, sender) {
    const recipients = new Set()
    
    switch (groupName) {
      case '–æ–±–æ—Ä–æ—Ç–Ω–∏':
      case '–≤–æ–ª–∫–∏':
      case 'werewolves':
        // –í—Å–µ –æ–±–æ—Ä–æ—Ç–Ω–∏ + –≤–µ–¥—É—â–∏–π
        Array.from(this.room.players.values()).forEach(p => {
          if (this.room.isWerewolf(p.role) || p.role === 'game_master') {
            recipients.add(p.id)
          }
        })
        break
        
      case '–¥–µ—Ä–µ–≤–Ω—è':
      case '–∂–∏—Ç–µ–ª–∏':
      case 'village':
        // –í—Å–µ –∂–∏—Ç–µ–ª–∏ + –≤–µ–¥—É—â–∏–π
        Array.from(this.room.players.values()).forEach(p => {
          if (p.role === 'game_master' || 
              (!this.room.isWerewolf(p.role) && p.role !== 'tanner')) {
            recipients.add(p.id)
          }
        })
        break
        
      case '–≤—Å–µ':
      case 'all':
        // –í—Å–µ –∏–≥—Ä–æ–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ)
        if (sender.isHost || sender.role === 'game_master') {
          Array.from(this.room.players.values()).forEach(p => {
            recipients.add(p.id)
          })
        }
        break
    }
    
    return Array.from(recipients)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
  getGroupDisplayName(groupName) {
    const names = {
      '–æ–±–æ—Ä–æ—Ç–Ω–∏': '–û–±–æ—Ä–æ—Ç–Ω–∏',
      '–≤–æ–ª–∫–∏': '–û–±–æ—Ä–æ—Ç–Ω–∏', 
      'werewolves': '–û–±–æ—Ä–æ—Ç–Ω–∏',
      '–¥–µ—Ä–µ–≤–Ω—è': '–î–µ—Ä–µ–≤–Ω—è',
      '–∂–∏—Ç–µ–ª–∏': '–î–µ—Ä–µ–≤–Ω—è',
      'village': '–î–µ—Ä–µ–≤–Ω—è',
      '–≤—Å–µ': '–í—Å–µ –∏–≥—Ä–æ–∫–∏',
      'all': '–í—Å–µ –∏–≥—Ä–æ–∫–∏'
    }
    return names[groupName] || groupName
  }

  // ‚úÖ –ö–û–ú–ê–ù–î–ê –ü–û–ú–û–©–ò
  async handleHelpCommand(sender) {
    let helpText = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:**\n\n'

    helpText += '**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n'
    helpText += '‚Ä¢ `/—à <–∏–≥—Ä–æ–∫> <—Ç–µ–∫—Å—Ç>` - –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É\n'
    helpText += '‚Ä¢ `/—à –≤–µ–¥—É—â–∏–π <—Ç–µ–∫—Å—Ç>` - —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–º—É (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)\n'
    
    // –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    const phase = this.room.gameState
    if (phase === GAME_PHASES.VOTING) {
      helpText += '‚Ä¢ `/—à <–≥—Ä—É–ø–ø–∞> <—Ç–µ–∫—Å—Ç>` - ‚ùå **–í–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ**\n'
    } else if (phase === GAME_PHASES.DAY) {
      helpText += '‚Ä¢ `/—à <–≥—Ä—É–ø–ø–∞> <—Ç–µ–∫—Å—Ç>` - ‚ùå **–î–Ω–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —à–µ–ø–æ—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã**\n'
    } else if (phase === GAME_PHASES.NIGHT) {
      helpText += '‚Ä¢ `/—à –æ–±–æ—Ä–æ—Ç–Ω–∏ <—Ç–µ–∫—Å—Ç>` - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–æ—Ä–æ—Ç–Ω–µ–π)\n'
    } else {
      helpText += '‚Ä¢ `/—à <–≥—Ä—É–ø–ø–∞> <—Ç–µ–∫—Å—Ç>` - —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ –∏–≥—Ä–æ–∫–æ–≤\n'
    }
    
    helpText += '‚Ä¢ `/–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n'
    helpText += '‚Ä¢ `/–∫—Ç–æ` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n'
    
    if (this.room.gameEngine?.phaseTimer) {
      helpText += '‚Ä¢ `/–≤—Ä–µ–º—è` - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è\n'
    }
    helpText += '\n'

    helpText += 'üë• **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:**\n'
    if (this.canPlayerGroupWhisper(sender, '–æ–±–æ—Ä–æ—Ç–Ω–∏').allowed) {
      helpText += '‚Ä¢ **–æ–±–æ—Ä–æ—Ç–Ω–∏** (–≤–æ–ª–∫–∏, werewolves)\n'
    }
    if (this.canPlayerGroupWhisper(sender, '–¥–µ—Ä–µ–≤–Ω—è').allowed) {
      helpText += '‚Ä¢ **–¥–µ—Ä–µ–≤–Ω—è** (–∂–∏—Ç–µ–ª–∏, village)\n'
    }
    if (this.canPlayerGroupWhisper(sender, '–≤—Å–µ').allowed) {
      helpText += '‚Ä¢ **–≤—Å–µ** (all) - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ\n'
    }
    
    helpText += '\n**–ü—Ä–∏–º–µ—Ä—ã:**\n'
    helpText += '‚Ä¢ `/—à –ò–≤–∞–Ω –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?`\n'
    helpText += '‚Ä¢ `/—à –≤–µ–¥—É—â–∏–π –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å`\n'
    if (phase === GAME_PHASES.NIGHT && this.room.isWerewolf(sender.role)) {
      helpText += '‚Ä¢ `/—à –æ–±–æ—Ä–æ—Ç–Ω–∏ –ö–æ–≥–æ —É–±–∏–≤–∞–µ–º?`'
    }

    const helpMessage = {
      id: Date.now(),
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞',
      text: helpText,
      type: MESSAGE_TYPES.SYSTEM,
      timestamp: Date.now()
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    const socket = this.room.sockets.get(sender.id)
    if (socket) {
      socket.emit('new-message', { message: helpMessage })
    }

    return { success: true }
  }

  // ‚úÖ –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –ò–ì–†–û–ö–û–í
  async handleWhoCommand(sender) {
    const players = Array.from(this.room.players.values())
    const alive = players.filter(p => p.alive && p.role !== 'game_master')
    const dead = players.filter(p => !p.alive && p.role !== 'game_master')
    const host = players.find(p => p.role === 'game_master' || p.isHost)

    let whoText = 'üë• **–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:**\n\n'
    
    whoText += `**–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏ (${alive.length}):**\n`
    alive.forEach(p => {
      let status = p.connected ? 'üü¢' : 'üî¥'
      let roleInfo = ''
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –µ—Å–ª–∏ –º–æ–∂–Ω–æ
      if (this.room.shouldShowPlayerRole(p, sender)) {
        const roleData = this.room.getRoleInfo(p.role)
        roleInfo = ` - ${roleData?.name || p.role}`
      }
      
      whoText += `${status} **${p.name}**${roleInfo}\n`
    })

    if (dead.length > 0) {
      whoText += `\n**–ú–µ—Ä—Ç–≤—ã–µ –∏–≥—Ä–æ–∫–∏ (${dead.length}):**\n`
      dead.forEach(p => {
        let roleInfo = ''
        if (this.room.shouldShowPlayerRole(p, sender)) {
          const roleData = this.room.getRoleInfo(p.role)
          roleInfo = ` - ${roleData?.name || p.role}`
        }
        whoText += `üíÄ **${p.name}**${roleInfo}\n`
      })
    }

    if (host) {
      whoText += `\n**–í–µ–¥—É—â–∏–π:**\n`
      const status = host.connected ? 'üü¢' : 'üî¥'
      whoText += `${status} **${host.name}** - –í–µ–¥—É—â–∏–π`
    }

    whoText += `\n**–§–∞–∑–∞ –∏–≥—Ä—ã:** ${this.getPhaseDisplayName(this.room.gameState)}`
    
    if (this.room.centerCards?.length > 0) {
      whoText += `\n**–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç:** ${this.room.centerCards.length}`
    }

    const whoMessage = {
      id: Date.now(),
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞',
      text: whoText,
      type: MESSAGE_TYPES.SYSTEM,
      timestamp: Date.now()
    }

    const socket = this.room.sockets.get(sender.id)
    if (socket) {
      socket.emit('new-message', { message: whoMessage })
    }

    return { success: true }
  }

  // ‚úÖ –ö–û–ú–ê–ù–î–ê –í–†–ï–ú–ï–ù–ò
  async handleTimeCommand(sender) {
    if (!this.room.gameEngine?.phaseTimer) {
      const timeMessage = {
        id: Date.now(),
        senderId: 'system',
        senderName: '–°–∏—Å—Ç–µ–º–∞',
        text: '‚è∞ –¢–∞–π–º–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        type: MESSAGE_TYPES.SYSTEM,
        timestamp: Date.now()
      }

      const socket = this.room.sockets.get(sender.id)
      if (socket) {
        socket.emit('new-message', { message: timeMessage })
      }

      return { success: true }
    }

    const remaining = this.room.gameEngine.getRemainingTime()
    const minutes = Math.floor(remaining / 60)
    const seconds = remaining % 60
    
    let timeText = '‚è∞ **–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:**\n'
    timeText += `${minutes}:${seconds.toString().padStart(2, '0')}\n`
    timeText += `**–§–∞–∑–∞:** ${this.getPhaseDisplayName(this.room.gameState)}`

    const timeMessage = {
      id: Date.now(),
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞',
      text: timeText,
      type: MESSAGE_TYPES.SYSTEM,
      timestamp: Date.now()
    }

    const socket = this.room.sockets.get(sender.id)
    if (socket) {
      socket.emit('new-message', { message: timeMessage })
    }

    return { success: true }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–∑—ã
  getPhaseDisplayName(phase) {
    const names = {
      [GAME_PHASES.SETUP]: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞',
      [GAME_PHASES.INTRODUCTION]: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
      [GAME_PHASES.NIGHT]: '–ù–æ—á—å',
      [GAME_PHASES.DAY]: '–î–µ–Ω—å',
      [GAME_PHASES.VOTING]: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
      [GAME_PHASES.ENDED]: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    }
    return names[phase] || phase
  }
}