import { v4 as uuidv4 } from 'uuid'

export class ChatCommandProcessor {
  constructor(room) {
    this.room = room
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
  isCommand(message) {
    return message.trim().startsWith('/')
  }

  // –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  parseCommand(message) {
    const trimmed = message.trim()
    if (!this.isCommand(trimmed)) return null

    const parts = trimmed.substring(1).split(/\s+/)
    if (parts.length === 0) return null

    const command = parts[0].toLowerCase()
    const args = parts.slice(1)

    return { command, args, raw: trimmed }
  }

  // –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∞–ª–∏–∞—Å—É
  findCommand(commandName) {
    const commands = {
      '—à–µ–ø–æ—Ç': ['whisper', 'w'],
      '–ø–æ–º–æ—â—å': ['help', 'h', '?'],
      '–∫—Ç–æ': ['who', '—Å–ø–∏—Å–æ–∫', 'list'],
      '–≤—Ä–µ–º—è': ['time', 'timer']
    }

    for (const [cmd, aliases] of Object.entries(commands)) {
      if (cmd === commandName || aliases.includes(commandName)) {
        return cmd
      }
    }
    return null
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É
  async processCommand(senderId, message) {
    const parsed = this.parseCommand(message)
    if (!parsed) {
      return { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã' }
    }

    const command = this.findCommand(parsed.command)
    if (!command) {
      return { 
        error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${parsed.command}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø–æ–º–æ—â—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.` 
      }
    }

    const sender = this.room.players.get(senderId)
    if (!sender) {
      return { error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
    }

    switch (command) {
      case '—à–µ–ø–æ—Ç':
        return this.processWhisperCommand(sender, parsed.args)
      case '–ø–æ–º–æ—â—å':
        return this.processHelpCommand(sender)
      case '–∫—Ç–æ':
        return this.processWhoCommand(sender)
      case '–≤—Ä–µ–º—è':
        return this.processTimeCommand(sender)
      default:
        return { error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞' }
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —à–µ–ø–æ—Ç–∞
  processWhisperCommand(sender, args) {
    if (args.length < 2) {
      return {
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—à–µ–ø–æ—Ç <–∏–≥—Ä–æ–∫/–≥—Ä—É–ø–ø–∞> <—Å–æ–æ–±—â–µ–Ω–∏–µ>'
      }
    }

    const target = args[0].toLowerCase()
    const message = args.slice(1).join(' ').trim()

    if (!message) {
      return {
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      }
    }

    if (message.length > 200) {
      return {
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ —à–µ–ø–æ—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —à–µ–ø–æ—Ç –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
    const messageType = this.room.isHost(sender.id) ? 'host' : 'player'
    if (!this.canWhisper(sender, messageType)) {
      return {
        error: '–®–µ–ø–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –∏–≥—Ä—ã'
      }
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã
    if (this.isGroupName(target)) {
      return this.processGroupWhisper(sender, target, message, messageType)
    }

    // –ó–∞—Ç–µ–º –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const targetPlayer = this.findPlayerByName(target)
    if (!targetPlayer) {
      const availableTargets = this.getAvailableWhisperTargets(sender)
      return {
        error: `–ò–≥—Ä–æ–∫ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ "${target}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏: ${availableTargets.join(', ')}`
      }
    }

    if (targetPlayer.id === sender.id) {
      return {
        error: '–ù–µ–ª—å–∑—è —à–µ–ø—Ç–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ'
      }
    }

    return this.processPlayerWhisper(sender, targetPlayer, message, messageType)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
  isGroupName(name) {
    const groups = ['–æ–±–æ—Ä–æ—Ç–Ω–∏', '–≤–æ–ª–∫–∏', 'wolves', 'werewolves', '–¥–µ—Ä–µ–≤–Ω—è', '–∂–∏—Ç–µ–ª–∏', 'village', 'villagers', '–≤—Å–µ', 'all', 'everyone']
    return groups.includes(name)
  }

  // –ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
  findPlayerByName(name) {
    return Array.from(this.room.players.values()).find(p => 
      p.name.toLowerCase() === name && p.role !== 'game_master'
    )
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —à–µ–ø–æ—Ç
  processGroupWhisper(sender, groupName, message, messageType) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    if (!this.room.canPlayerMessageGroup(sender, groupName)) {
      const groupDisplayName = this.room.getGroupDisplayName(groupName)
      return {
        error: `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø–µ "${groupDisplayName}"`
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const groupMembers = this.room.getGroupMembers(groupName)
    if (groupMembers.length === 0) {
      const groupDisplayName = this.room.getGroupDisplayName(groupName)
      return {
        error: `–í –≥—Ä—É–ø–ø–µ "${groupDisplayName}" –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`
      }
    }

    const recipients = groupMembers.map(p => p.id)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if (!this.room.isHost(sender.id) && !recipients.includes(this.room.hostId)) {
      recipients.push(this.room.hostId)
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —à–µ–ø–æ—Ç–∞
    const whisperMessage = {
      id: uuidv4(),
      playerId: sender.id,
      playerName: sender.name,
      targetGroup: groupName,
      targetGroupName: this.room.getGroupDisplayName(groupName),
      targetMembers: groupMembers.map(p => p.name),
      message: message,
      type: 'group_whisper',
      timestamp: Date.now()
    }

    return {
      success: true,
      whisperMessage,
      recipients: [...new Set(recipients)] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π —à–µ–ø–æ—Ç –∏–≥—Ä–æ–∫—É
  processPlayerWhisper(sender, targetPlayer, message, messageType) {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —à–µ–ø–æ—Ç–∞
    const whisperMessage = {
      id: uuidv4(),
      playerId: sender.id,
      playerName: sender.name,
      targetPlayerId: targetPlayer.id,
      targetPlayerName: targetPlayer.name,
      message: message,
      type: 'whisper',
      timestamp: Date.now()
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –≤–µ–¥—É—â–∏–π)
    const recipients = [sender.id, targetPlayer.id]
    if (!this.room.isHost(sender.id) && !this.room.isHost(targetPlayer.id)) {
      recipients.push(this.room.hostId)
    }

    return {
      success: true,
      whisperMessage,
      recipients: [...new Set(recipients)]
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏
  processHelpCommand(sender) {
    let helpText = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:**\n\n'

    helpText += '**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n'
    helpText += '‚Ä¢ `/—à–µ–ø–æ—Ç <–∏–≥—Ä–æ–∫> <—Ç–µ–∫—Å—Ç>` - –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É\n'
    helpText += '‚Ä¢ `/—à–µ–ø–æ—Ç <–≥—Ä—É–ø–ø–∞> <—Ç–µ–∫—Å—Ç>` - —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ –∏–≥—Ä–æ–∫–æ–≤\n'
    helpText += '‚Ä¢ `/–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n'
    helpText += '‚Ä¢ `/–∫—Ç–æ` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n'
    
    if (this.room.timer) {
      helpText += '‚Ä¢ `/–≤—Ä–µ–º—è` - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è\n'
    }
    helpText += '\n'

    helpText += 'üë• **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:**\n'
    if (this.room.canPlayerMessageGroup(sender, '–æ–±–æ—Ä–æ—Ç–Ω–∏')) {
      helpText += '‚Ä¢ **–û–±–æ—Ä–æ—Ç–Ω–∏** (–æ–±–æ—Ä–æ—Ç–Ω–∏, –≤–æ–ª–∫–∏)\n'
    }
    if (this.room.canPlayerMessageGroup(sender, '–¥–µ—Ä–µ–≤–Ω—è')) {
      helpText += '‚Ä¢ **–î–µ—Ä–µ–≤–Ω—è** (–¥–µ—Ä–µ–≤–Ω—è, –∂–∏—Ç–µ–ª–∏)\n'
    }
    if (this.room.canPlayerMessageGroup(sender, '–≤—Å–µ')) {
      helpText += '‚Ä¢ **–í—Å–µ –∏–≥—Ä–æ–∫–∏** (–≤—Å–µ)\n'
    }
    helpText += '\n'

    helpText += 'üí° **–°–æ–≤–µ—Ç—ã:**\n'
    helpText += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥\n'
    helpText += '‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∏–≥—Ä—ã\n'
    helpText += '‚Ä¢ –í–µ–¥—É—â–∏–π –≤–∏–¥–∏—Ç –≤—Å–µ —à–µ–ø–æ—Ç—ã'

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    const helpMessage = {
      id: uuidv4(),
      playerId: null,
      playerName: '–°–∏—Å—Ç–µ–º–∞',
      message: helpText,
      type: 'system',
      timestamp: Date.now()
    }

    return {
      success: true,
      helpMessage,
      recipients: [sender.id]
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–∫—Ç–æ"
  processWhoCommand(sender) {
    const isHost = this.room.isHost(sender.id)
    const gameEnded = this.room.gameState === 'ended'
    
    let whoText = 'üë• **–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:**\n\n'

    const players = Array.from(this.room.players.values())
      .filter(p => p.role !== 'game_master')
      .sort((a, b) => a.name.localeCompare(b.name))

    players.forEach((player, index) => {
      const status = []
      
      if (!player.alive) status.push('üíÄ –º–µ—Ä—Ç–≤')
      if (!player.connected) status.push('üò¥ –æ—Ç–∫–ª—é—á–µ–Ω')
      if (player.protected) status.push('üõ°Ô∏è –∑–∞—â–∏—â–µ–Ω')
      if (player.id === sender.id) status.push('üë§ –≤—ã')
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      let roleInfo = ''
      if (isHost || gameEnded) {
        const role = this.room.roles?.[player.role] || { name: player.role }
        roleInfo = ` (${role.name})`
      } else if (sender.role && this.room.canSeeWerewolfRoles(sender.role) && this.room.isWerewolfRole(player.role)) {
        const role = this.room.roles?.[player.role] || { name: player.role }
        roleInfo = ` (${role.name})`
      }
      
      const statusText = status.length > 0 ? ` [${status.join(', ')}]` : ''
      whoText += `${index + 1}. **${player.name}**${roleInfo}${statusText}\n`
    })

    whoText += `\nüìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`
    if (this.room.gameState === 'voting') {
      const eligibleVoters = this.room.getEligibleVoters().length
      const votesSubmitted = this.room.votes.size
      whoText += `\nüó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${votesSubmitted}/${eligibleVoters}`
    }

    const whoMessage = {
      id: uuidv4(),
      playerId: null,
      playerName: '–°–∏—Å—Ç–µ–º–∞',
      message: whoText,
      type: 'system',
      timestamp: Date.now()
    }

    return {
      success: true,
      helpMessage: whoMessage,
      recipients: [sender.id]
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤—Ä–µ–º–µ–Ω–∏
  processTimeCommand(sender) {
    if (!this.room.timer) {
      return {
        error: '–¢–∞–π–º–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'
      }
    }

    const minutes = Math.floor(this.room.timer / 60)
    const seconds = this.room.timer % 60
    const timeText = `‚è∞ **–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:** ${minutes}:${seconds.toString().padStart(2, '0')}`

    const timeMessage = {
      id: uuidv4(),
      playerId: null,
      playerName: '–°–∏—Å—Ç–µ–º–∞',
      message: timeText,
      type: 'system',
      timestamp: Date.now()
    }

    return {
      success: true,
      helpMessage: timeMessage,
      recipients: [sender.id]
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —à–µ–ø–æ—Ç
  canWhisper(sender, messageType) {
    // –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç —à–µ–ø—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞
    if (messageType === 'host') return true
    
    // –í–æ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–æ–∂–Ω–æ —à–µ–ø—Ç–∞—Ç—å
    if (this.room.gameState === 'setup') return true
    
    // –í–æ –≤—Ä–µ–º—è –¥–Ω—è –º–æ–∂–Ω–æ —à–µ–ø—Ç–∞—Ç—å
    if (this.room.gameState === 'day') return true
    
    // –ù–æ—á—å—é —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏ –º–æ–≥—É—Ç —à–µ–ø—Ç–∞—Ç—å
    if (this.room.gameState === 'night') {
      return this.room.canSeeWerewolfRoles(sender.role)
    }
    
    // –í–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —à–µ–ø–æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω
    return false
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —à–µ–ø–æ—Ç–∞
  getAvailableWhisperTargets(sender) {
    const targets = []

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    this.room.players.forEach((player) => {
      if (player.role !== 'game_master' && player.id !== sender.id) {
        targets.push(player.name)
      }
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    if (this.room.canPlayerMessageGroup(sender, '–æ–±–æ—Ä–æ—Ç–Ω–∏')) {
      targets.push('–æ–±–æ—Ä–æ—Ç–Ω–∏')
    }
    if (this.room.canPlayerMessageGroup(sender, '–¥–µ—Ä–µ–≤–Ω—è')) {
      targets.push('–¥–µ—Ä–µ–≤–Ω—è')
    }
    if (this.room.canPlayerMessageGroup(sender, '–≤—Å–µ')) {
      targets.push('–≤—Å–µ')
    }

    return targets
  }
}