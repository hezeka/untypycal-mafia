import { GAME_PHASES, PHASE_DURATIONS, MESSAGE_TYPES } from '../utils/constants.js'
import { getNightRoles, executeRoleAction, getRoleInfo } from '../roles/rolesList.js'
import { getAllRoles } from '../../shared/rolesRegistry.js'

export class GameEngine {
  constructor(room) {
    this.room = room
    this.currentPhase = GAME_PHASES.SETUP
    this.phaseTimer = null
    this.phaseStartTime = null
    this.nightActionIndex = 0
    this.nightRoles = []
    this.killedPlayers = []
    this.protectedPlayers = []
  }

  async startGame() {
    this.assignRoles()
    await this.setPhase(GAME_PHASES.INTRODUCTION)
  }

  assignRoles() {
    const players = Array.from(this.room.players.values()).filter(p => p.role !== 'game_master')
    const roles = [...this.room.selectedRoles]
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –Ω–∞ –æ–±–æ—Ä–æ—Ç–Ω–µ–π –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    const werewolfRoles = roles.filter(role => {
      const roleData = this.getRoleData(role)
      return roleData && roleData.team === 'werewolf'
    })
    
    const otherRoles = roles.filter(role => {
      const roleData = this.getRoleData(role)
      return !roleData || roleData.team !== 'werewolf'
    })
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    this.shuffleArray(werewolfRoles)
    this.shuffleArray(otherRoles)
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±–æ—Ä–æ—Ç–µ–Ω—å –ø–æ–ø–∞–¥—ë—Ç –∏–≥—Ä–æ–∫–∞–º
    const playerRoles = []
    const centerRoles = []
    
    if (werewolfRoles.length > 0 && players.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –æ–±–æ—Ä–æ—Ç–Ω—è –≤ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤
      playerRoles.push(werewolfRoles[0])
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–±–æ—Ä–æ—Ç–Ω–µ–π
      for (let i = 1; i < werewolfRoles.length; i++) {
        if (playerRoles.length < players.length) {
          playerRoles.push(werewolfRoles[i])
        } else {
          centerRoles.push(werewolfRoles[i])
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    for (const role of otherRoles) {
      if (playerRoles.length < players.length) {
        playerRoles.push(role)
      } else {
        centerRoles.push(role)
      }
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤
    this.shuffleArray(playerRoles)
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
    players.forEach((player, index) => {
      if (index < playerRoles.length) {
        player.role = playerRoles[index]
      }
    })
    
    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–æ–ª–∏ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
    this.room.centerCards = centerRoles
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
  shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]]
    }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–∏
  getRoleData(roleId) {
    try {
      const allRoles = getAllRoles()
      return allRoles[roleId]
    } catch (error) {
      console.error('Failed to get role data:', error)
      return null
    }
  }

  async setPhase(newPhase) {
    this.currentPhase = newPhase
    this.room.gameState = newPhase
    this.phaseStartTime = Date.now()
    
    const phaseKey = newPhase.toUpperCase()
    const duration = PHASE_DURATIONS[phaseKey]
    const endTime = duration ? this.phaseStartTime + (duration * 1000) : null
    
    console.log('üîÑ Setting phase:', newPhase, 'PhaseKey:', phaseKey, 'Duration:', duration, 'End time:', endTime ? new Date(endTime) : null)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ —á–∞—Ç–∞
    this.updateChatPermissions()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    this.startPhaseTimer()
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∞–∑
    switch (newPhase) {
      case GAME_PHASES.NIGHT:
        this.startNightPhase()
        break
      case GAME_PHASES.DAY:
        await this.announceNightResults()
        break
      case GAME_PHASES.VOTING:
        this.room.votes.clear()
        this.room.votingActive = true
        break
    }
    
    this.room.broadcast('phase-changed', {
      phase: newPhase,
      timer: duration || 0,
      timerEndTime: endTime
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∞ —á–∞—Ç–∞)
    this.room.broadcast('game-updated', { room: this.room.getClientData() })
  }

  updateChatPermissions() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ GameRoom –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ —á–∞—Ç–∞
    this.room.updateChatPermissions()
  }

  startPhaseTimer() {
    if (this.phaseTimer) {
      clearTimeout(this.phaseTimer)
    }
    
    const duration = PHASE_DURATIONS[this.currentPhase]
    if (duration) {
      this.phaseTimer = setTimeout(async () => {
        await this.nextPhase()
      }, duration * 1000)
    }
  }

  async nextPhase() {
    switch (this.currentPhase) {
      case GAME_PHASES.INTRODUCTION:
        await this.setPhase(GAME_PHASES.NIGHT)
        break
      case GAME_PHASES.NIGHT:
        await this.setPhase(GAME_PHASES.DAY)
        break
      case GAME_PHASES.DAY:
        await this.setPhase(GAME_PHASES.VOTING)
        break
      case GAME_PHASES.VOTING:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ
        if (this.room.votingActive) {
          this.processVoting()
          if (this.checkWinConditions()) {
            // –ò–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –≤ endGame(), –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            console.log('üèÜ Game ended, no phase transition needed')
          } else {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π, –ø–µ—Ä–µ–∂–∏—Ç—ã—Ö –∏–≥—Ä–æ–∫–∞–º–∏
            this.room.daysSurvived++
            console.log(`üìÖ Day ${this.room.daysSurvived} completed`)
            await this.setPhase(GAME_PHASES.NIGHT)
          }
        }
        break
    }
  }

  startNightPhase() {
    this.killedPlayers = []
    this.protectedPlayers = []
    this.nightActionIndex = 0
    this.completedActions = new Set() // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    this.currentPhaseTimer = null
    this.werewolfVotes = new Map() // –ì–æ–ª–æ—Å–∞ –æ–±–æ—Ä–æ—Ç–Ω–µ–π
    this.pendingMessages = [] // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω—ë–º
    this.attackedPlayers = [] // –ò–≥—Ä–æ–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ –ø–æ–∫—É—à–µ–Ω–∏–µ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞—â–∏—Ç–µ)
    
    const players = Array.from(this.room.players.values())
    const playerRoles = players.map(p => p.role).filter(r => r && r !== 'game_master')
    
    this.nightRoles = getNightRoles(playerRoles)
    this.processNextNightAction()
  }

  async processNextNightAction() {
    if (this.nightActionIndex >= this.nightRoles.length) {
      // –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–Ω—é
      setTimeout(async () => await this.nextPhase(), 2000)
      return
    }

    const currentRole = this.nightRoles[this.nightActionIndex]
    const players = this.getPlayersWithRole(currentRole.id)
    
    if (players.length > 0) {
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
      this.completedActions.clear()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      this.phaseStartTime = Date.now()
      const endTime = this.phaseStartTime + (30 * 1000) // 30 —Å–µ–∫—É–Ω–¥
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏—Ö —Ö–æ–¥–µ
      players.forEach(player => {
        this.room.sendToPlayer(player.id, 'night-action-turn', {
          role: currentRole.id,
          timeLimit: 30
        })
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π event –¥–ª—è –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π)
      this.room.broadcast('night-action-timer', {
        role: currentRole.id,
        timeLimit: 30,
        endTime: endTime
      })
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
      this.currentPhaseTimer = setTimeout(() => {
        console.log(`‚è∞ Night action timeout for role ${currentRole.id}`)
        this.nextNightAction()
      }, 30000)
    } else {
      // –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      this.nextNightAction()
    }
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ—á–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
  nextNightAction() {
    if (this.currentPhaseTimer) {
      clearTimeout(this.currentPhaseTimer)
      this.currentPhaseTimer = null
    }
    
    this.nightActionIndex++
    this.processNextNightAction()
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
  checkAllPlayersCompleted() {
    if (this.nightActionIndex >= this.nightRoles.length) return
    
    const currentRole = this.nightRoles[this.nightActionIndex]
    const players = this.getPlayersWithRole(currentRole.id)
    
    // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å —Ç–µ–∫—É—â–µ–π —Ä–æ–ª—å—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
    if (players.length > 0 && this.completedActions.size >= players.length) {
      console.log(`‚úÖ All players with role ${currentRole.id} completed their actions`)
      this.nextNightAction()
    }
  }

  getPlayersWithRole(roleId) {
    return Array.from(this.room.players.values())
      .filter(p => p.role === roleId && p.alive)
  }

  async executeNightAction(playerId, action) {
    const player = this.room.getPlayer(playerId)
    if (!player || !player.alive) return { error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }

    const currentRole = this.nightRoles[this.nightActionIndex]
    if (!currentRole || player.role !== currentRole.id) {
      return { error: '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥' }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏–µ
    if (this.completedActions.has(playerId)) {
      return { error: '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ' }
    }

    try {
      const result = await executeRoleAction(this, player, action)
      
      // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
      if (result && !result.error) {
        this.completedActions.add(playerId)
        console.log(`‚úÖ Player ${player.name} (${player.role}) completed action`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
        this.checkAllPlayersCompleted()
      }
      
      return result
    } catch (error) {
      return { error: error.message }
    }
  }

  async announceNightResults() {
    console.log('üåÖ Announcing night results...')
    const messages = []
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–µ–π
    this.processWerewolfVotes()
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
    this.sendPendingMessages()
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    await new Promise(resolve => setTimeout(resolve, 50))
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É–±–∏—Ç—ã—Ö (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    this.killedPlayers = [...new Set(this.killedPlayers)]
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –Ω–æ—á–∏
    if (this.killedPlayers.length > 0) {
      this.killedPlayers.forEach(playerId => {
        const player = this.room.getPlayer(playerId)
        if (player && player.alive) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –∂–∏–≤
          player.alive = false
          messages.push(`${player.name} –±—ã–ª —É–±–∏—Ç –Ω–æ—á—å—é`)
          console.log(`üíÄ ${player.name} killed during night`)
        }
      })
    } else if (this.attackedPlayers.length > 0) {
      // –ë—ã–ª–∏ –ø–æ–∫—É—à–µ–Ω–∏—è, –Ω–æ –≤—Å–µ –∑–∞—â–∏—â–µ–Ω—ã
      this.attackedPlayers.forEach(playerId => {
        const player = this.room.getPlayer(playerId)
        if (player) {
          messages.push(`–ù–æ—á—å—é –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ –ø–æ–∫—É—à–µ–Ω–∏–µ –Ω–∞ ${player.name}, –Ω–æ –µ–≥–æ –∑–∞—â–∏—Ç–∏–ª —Å—Ç—Ä–∞–∂`)
          console.log(`üõ°Ô∏è ${player.name} was attacked but protected`)
        }
      })
    } else {
      messages.push('–ù–æ—á—å –ø—Ä–æ—à–ª–∞ —Å–ø–æ–∫–æ–π–Ω–æ')
      console.log('üò¥ Peaceful night - no kills')
    }
    
    messages.forEach(msg => {
      this.room.addSystemMessage(msg, MESSAGE_TYPES.SYSTEM)
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    this.room.broadcast('game-updated', { room: this.room.getClientData() })
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—É–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω—ë–º
  addPendingMessage(playerId, message) {
    this.pendingMessages.push({ playerId, message })
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  sendPendingMessages() {
    this.pendingMessages.forEach(({ playerId, message }) => {
      this.room.addSystemWhisper(message, playerId)
    })
    this.pendingMessages = [] // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  }
  
  processWerewolfVotes() {
    if (!this.werewolfVotes || this.werewolfVotes.size === 0) {
      console.log('No werewolf votes to process')
      return
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    const voteCounts = new Map()
    for (const [voterId, targetId] of this.werewolfVotes) {
      if (targetId) {
        voteCounts.set(targetId, (voteCounts.get(targetId) || 0) + 1)
      }
    }
    
    if (voteCounts.size === 0) {
      console.log('No valid werewolf votes')
      return
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞(–æ–≤) —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    const maxVotes = Math.max(...voteCounts.values())
    const victims = []
    
    for (const [targetId, votes] of voteCounts) {
      if (votes === maxVotes) {
        victims.push(targetId)
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á—å—è, –Ω–∏–∫—Ç–æ –Ω–µ —É–º–∏—Ä–∞–µ—Ç
    if (victims.length > 1) {
      console.log(`Werewolf voting tie between ${victims.length} players - no kill`)
      return
    }
    
    // –£–±–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞—â–∏—â–µ–Ω –∏ –µ—â–µ –Ω–µ —É–±–∏—Ç)
    if (victims.length === 1) {
      const victimId = victims[0]
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞—Ç–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞—â–∏—Ç–µ)
      if (!this.attackedPlayers.includes(victimId)) {
        this.attackedPlayers.push(victimId)
      }
      
      if (!this.protectedPlayers.includes(victimId) && !this.killedPlayers.includes(victimId)) {
        this.killedPlayers.push(victimId)
        const victim = this.room.getPlayer(victimId)
        console.log(`üê∫ Werewolves killed ${victim?.name} (${victimId})`)
      } else if (this.protectedPlayers.includes(victimId)) {
        console.log(`üõ°Ô∏è Target was protected from werewolf attack`)
      } else {
        console.log(`‚ö†Ô∏è Target already killed by another action`)
      }
    }
  }

  processVoting() {
    this.room.votingActive = false
    const result = this.room.getVotingResults()
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ
    this.announceVotingResults(result)
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞(–æ–≤) —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    const huntersKilled = []
    if (result.eliminated.length > 0) {
      result.eliminated.forEach(playerId => {
        const player = this.room.getPlayer(playerId)
        if (player) {
          player.alive = false
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–±–∏–ª–∏ –æ—Ö–æ—Ç–Ω–∏–∫–∞
          if (player.role === 'hunter') {
            huntersKilled.push(player)
          }
          
          const roleInfo = getRoleInfo(player.role)
          const roleName = roleInfo?.name || player.role
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–±–∏—Ç—ã—Ö –º–∏—Ä–Ω—ã—Ö, –µ—Å–ª–∏ —Ä–æ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–µ—Ä–µ–≤–Ω–µ
          if (roleInfo && roleInfo.team === 'village') {
            this.room.civiliansKilled++
            console.log(`üíÄ Civilian ${player.name} (${roleName}) killed, total civilians killed: ${this.room.civiliansKilled}`)
          }
          
          this.room.addSystemMessage(`üíÄ ${player.name} (${roleName}) –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º`, MESSAGE_TYPES.SYSTEM)
        }
      })
    } else {
      this.room.addSystemMessage('–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω', MESSAGE_TYPES.SYSTEM)
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç—å –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤
    this.processHunterRetaliation(huntersKilled, result)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    this.room.broadcast('voting-ended', result)
    
    // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    this.room.broadcast('game-updated', { room: this.room.getClientData() })
  }
  
  announceVotingResults(result) {
    const { voteCounts, abstainCount, totalVotes } = result
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
    const sortedVotes = Object.entries(voteCounts)
      .sort(([,a], [,b]) => b - a)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let message = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: '
    
    const voteParts = []
    
    if (sortedVotes.length > 0) {
      sortedVotes.forEach(([playerId, votes]) => {
        const player = this.room.getPlayer(playerId)
        if (player) {
          const plural = votes === 1 ? '–≥–æ–ª–æ—Å' : votes < 5 ? '–≥–æ–ª–æ—Å–∞' : '–≥–æ–ª–æ—Å–æ–≤'
          voteParts.push(`${player.name} - ${votes} ${plural}`)
        }
      })
    }
    
    if (abstainCount > 0) {
      const plural = abstainCount === 1 ? '–≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è' : '–≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å'
      voteParts.push(`–í–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å: ${abstainCount}`)
    }
    
    if (voteParts.length === 0) {
      message += '–ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª'
    } else {
      message += voteParts.join(', ')
    }
    
    this.room.addSystemMessage(message, MESSAGE_TYPES.SYSTEM)
  }
  
  processHunterRetaliation(huntersKilled, votingResult) {
    huntersKilled.forEach(hunter => {
      // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–ª —ç—Ç–æ—Ç –æ—Ö–æ—Ç–Ω–∏–∫
      const hunterVote = this.room.votes.get(hunter.id)
      
      if (hunterVote && hunterVote !== null) {
        const target = this.room.getPlayer(hunterVote)
        if (target && target.alive) {
          target.alive = false
          const targetRoleInfo = getRoleInfo(target.role)
          const targetRoleName = targetRoleInfo?.name || target.role
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–±–∏—Ç—ã—Ö –º–∏—Ä–Ω—ã—Ö, –µ—Å–ª–∏ —Ä–æ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–µ—Ä–µ–≤–Ω–µ
          if (targetRoleInfo && targetRoleInfo.team === 'village') {
            this.room.civiliansKilled++
            console.log(`üíÄ Civilian ${target.name} (${targetRoleName}) killed by hunter, total civilians killed: ${this.room.civiliansKilled}`)
          }
          
          this.room.addSystemMessage(
            `üíÄ ${hunter.name} (–û—Ö–æ—Ç–Ω–∏–∫) –∑–∞–±–∏—Ä–∞–µ—Ç —Å —Å–æ–±–æ–π ${target.name} (${targetRoleName})!`, 
            MESSAGE_TYPES.SYSTEM
          )
        }
      } else {
        this.room.addSystemMessage(
          `üíÄ ${hunter.name} (–û—Ö–æ—Ç–Ω–∏–∫) —É–º–∏—Ä–∞–µ—Ç, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –º–µ—Å—Ç–∏`, 
          MESSAGE_TYPES.SYSTEM
        )
      }
    })
  }

  checkWinConditions() {
    const alivePlayers = Array.from(this.room.players.values()).filter(p => p.alive)
    const deadPlayers = Array.from(this.room.players.values()).filter(p => !p.alive)
    
    console.log('üèÜ Checking win conditions...')
    console.log('üèÜ Alive players:', alivePlayers.map(p => `${p.name} (${p.role})`))
    console.log('üèÜ Dead players:', deadPlayers.map(p => `${p.name} (${p.role})`))
    
    // 1. –ù–µ—É–¥–∞—á–Ω–∏–∫ —É–±–∏—Ç - –æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç
    const tannerKilled = deadPlayers.find(p => p.role === 'tanner')
    if (tannerKilled) {
      console.log('üèÜ WIN: Tanner killed - Tanner wins!')
      this.endGame('tanner', [tannerKilled.id])
      return true
    }
    
    // 2. –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±–æ—Ä–æ—Ç–µ–Ω—å —É–±–∏—Ç - –ø–æ–±–µ–¥–∞ –¥–µ—Ä–µ–≤–Ω–∏
    const werewolfKilled = deadPlayers.find(p => 
      this.getTeam(p.role) === 'werewolf' && p.role !== 'minion'
    )
    if (werewolfKilled) {
      console.log(`üèÜ WIN: Werewolf ${werewolfKilled.name} killed - Village wins!`)
      const villageWinners = alivePlayers.filter(p => 
        ['village', 'special'].includes(this.getTeam(p.role)) || p.role === 'minion'
      )
      this.endGame('village', villageWinners.map(p => p.id))
      return true
    }
    
    // 3. –í—Å–µ –∂–∏—Ç–µ–ª–∏ —É–±–∏—Ç—ã - –ø–æ–±–µ–¥–∞ –æ–±–æ—Ä–æ—Ç–Ω–µ–π
    const aliveVillagers = alivePlayers.filter(p => 
      this.getTeam(p.role) === 'village' || p.role === 'tanner'
    )
    if (aliveVillagers.length === 0) {
      console.log('üèÜ WIN: All villagers killed - Werewolves win!')
      const werewolfWinners = alivePlayers.filter(p => 
        this.getTeam(p.role) === 'werewolf'
      )
      this.endGame('werewolf', werewolfWinners.map(p => p.id))
      return true
    }
    
    console.log('üèÜ No win condition met - game continues')
    return false
  }

  getTeam(roleId) {
    const roleInfo = getRoleInfo(roleId)
    return roleInfo?.team || 'village'
  }

  endGame(winnerTeam, winnerIds) {
    this.room.gameResult = {
      winnerTeam,
      winners: winnerIds,
      endedAt: Date.now()
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    this.room.gameState = GAME_PHASES.ENDED
    
    this.room.addSystemMessage(`üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞: ${this.getTeamName(winnerTeam)}`, MESSAGE_TYPES.SYSTEM)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    this.room.broadcast('game-updated', { room: this.room.getClientData() })
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    if (this.phaseTimer) {
      clearTimeout(this.phaseTimer)
      this.phaseTimer = null
    }
    if (this.currentPhaseTimer) {
      clearTimeout(this.currentPhaseTimer)
      this.currentPhaseTimer = null
    }
  }

  getTeamName(team) {
    const names = {
      village: '–î–µ—Ä–µ–≤–Ω—è',
      werewolf: '–û–±–æ—Ä–æ—Ç–Ω–∏',
      tanner: '–ù–µ—É–¥–∞—á–Ω–∏–∫'
    }
    return names[team] || team
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–æ–ª–µ–π
  killPlayer(playerId) {
    if (!this.protectedPlayers.includes(playerId) && !this.killedPlayers.includes(playerId)) {
      this.killedPlayers.push(playerId)
    }
  }

  protectPlayer(playerId) {
    if (!this.protectedPlayers.includes(playerId)) {
      this.protectedPlayers.push(playerId)
    }
  }

  swapRoles(playerId1, playerId2) {
    const player1 = this.room.getPlayer(playerId1)
    const player2 = this.room.getPlayer(playerId2)
    
    if (player1 && player2) {
      const temp = player1.role
      player1.role = player2.role
      player2.role = temp
    }
  }

  swapWithCenter(playerId, centerIndex = 0) {
    const player = this.room.getPlayer(playerId)
    if (player && this.room.centerCards[centerIndex]) {
      const temp = player.role
      player.role = this.room.centerCards[centerIndex]
      this.room.centerCards[centerIndex] = temp
    }
  }

  forceEndVoting() {
    if (this.room.gameState !== GAME_PHASES.VOTING || !this.room.votingActive) {
      throw new Error('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ')
    }
    
    console.log('üîß Force ending voting phase by admin')
    this.processVoting()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ
    setTimeout(async () => {
      if (this.checkWinConditions()) {
        // –ò–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –≤ endGame(), –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        console.log('üèÜ Game ended, no phase transition needed')
      } else {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π, –ø–µ—Ä–µ–∂–∏—Ç—ã—Ö –∏–≥—Ä–æ–∫–∞–º–∏
        this.room.daysSurvived++
        console.log(`üìÖ Day ${this.room.daysSurvived} completed`)
        await this.setPhase(GAME_PHASES.NIGHT)
      }
    }, 2000)
    
    return { success: true, message: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ' }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  getTimerInfo() {
    const phaseKey = this.currentPhase.toUpperCase()
    const duration = PHASE_DURATIONS[phaseKey]
    console.log('üîç getTimerInfo - Phase:', this.currentPhase, 'PhaseKey:', phaseKey, 'Duration:', duration, 'Start time:', this.phaseStartTime)
    
    if (duration && this.phaseStartTime) {
      const endTime = this.phaseStartTime + (duration * 1000)
      const result = {
        active: true,
        duration: duration,
        endTime: endTime,
        phase: this.currentPhase
      }
      console.log('‚úÖ Returning timer info:', result)
      return result
    }
    
    console.log('‚ùå No timer info available')
    return null
  }

  destroy() {
    if (this.phaseTimer) {
      clearTimeout(this.phaseTimer)
    }
    if (this.currentPhaseTimer) {
      clearTimeout(this.currentPhaseTimer)
    }
  }
}