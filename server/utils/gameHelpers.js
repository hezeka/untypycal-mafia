// Helper functions for game logic

// Helper function to check if player can send messages
export function canSendMessage(room, player, messageType) {
  // Host can always send messages
  if (messageType === 'host') return true
  
  // During setup phase, all players can chat
  if (room.gameState === 'setup') return true
  
  // During day phase, all players can chat
  if (room.gameState === 'day') return true
  
  // During night phase, only werewolves can chat with each other
  if (room.gameState === 'night') {
    return room.canSeeWerewolfRoles(player.role)
  }
  
  // During voting phase, no one can chat
  if (room.gameState === 'voting') return false
  
  return false
}

// Helper function to determine who should receive the message
export function getMessageRecipients(room, messageType, sender) {
  const recipients = []
  
  // Host messages go to everyone
  if (messageType === 'host') {
    room.players.forEach((player) => {
      if (player.connected) {
        recipients.push(player.id)
      }
    })
    return recipients
  }
  
  // During setup and day phases, everyone sees messages
  if (room.gameState === 'setup' || room.gameState === 'day') {
    room.players.forEach((player) => {
      if (player.connected) {
        recipients.push(player.id)
      }
    })
    return recipients
  }
  
  // During night phase, only werewolves see werewolf messages
  if (room.gameState === 'night') {
    if (room.canSeeWerewolfRoles(sender.role)) {
      room.players.forEach((player) => {
        if (player.connected && room.canSeeWerewolfRoles(player.role)) {
          recipients.push(player.id)
        }
      })
    }
    return recipients
  }
  
  return recipients
}

// Generate room ID
export function generateRoomId() {
  return Math.random().toString(36).substring(2, 8).toUpperCase()
}

// Validate player name
export function validatePlayerName(name) {
  if (!name || typeof name !== 'string') {
    return { valid: false, error: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  const trimmed = name.trim()
  if (trimmed.length < 1) {
    return { valid: false, error: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  if (trimmed.length > 20) {
    return { valid: false, error: '–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)' }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s_-]+$/.test(trimmed)) {
    return { valid: false, error: '–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' }
  }
  
  return { valid: true, name: trimmed }
}

// Validate room ID format
export function validateRoomId(roomId) {
  if (!roomId || typeof roomId !== 'string') {
    return false
  }
  
  // Room ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
  return /^[A-Z0-9]{6}$/.test(roomId.toUpperCase())
}

// Clean up disconnected players after timeout
export function cleanupDisconnectedPlayers(room, timeoutMinutes = 30) {
  const timeoutMs = timeoutMinutes * 60 * 1000
  const now = Date.now()
  
  const playersToRemove = []
  
  room.players.forEach((player, playerId) => {
    if (!player.connected && player.disconnectedAt) {
      if (now - player.disconnectedAt > timeoutMs) {
        playersToRemove.push(playerId)
      }
    }
  })
  
  playersToRemove.forEach(playerId => {
    room.removePlayer(playerId)
    console.log(`üßπ Cleaned up disconnected player: ${playerId}`)
  })
  
  return playersToRemove.length
}

// Log game action for debugging
export function logGameAction(roomId, action, details = {}) {
  const timestamp = new Date().toISOString()
  console.log(`[${timestamp}] üéÆ Room ${roomId}: ${action}`, details)
}

// Sanitize message content
export function sanitizeMessage(message) {
  if (!message || typeof message !== 'string') {
    return ''
  }
  
  return message
    .trim()
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .substring(0, 300) // Max length
}

// Check if room can start game
export function canStartGame(room) {
  const playerCount = room.players.size
  const nonHostPlayerCount = playerCount - 1 // –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ–¥—É—â–µ–≥–æ
  const roleCount = room.selectedRoles.length

  if (nonHostPlayerCount !== roleCount) {
    return { 
      canStart: false, 
      error: `–ù—É–∂–Ω–æ ${nonHostPlayerCount} —Ä–æ–ª–µ–π –¥–ª—è ${nonHostPlayerCount} –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –≤–µ–¥—É—â–µ–≥–æ). –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: ${roleCount}` 
    }
  }

  if (nonHostPlayerCount < 2) {
    return { 
      canStart: false, 
      error: '–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ (–∏—Å–∫–ª—é—á–∞—è –≤–µ–¥—É—â–µ–≥–æ)' 
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
  const disconnectedPlayers = Array.from(room.players.values())
    .filter(p => !p.connected && p.role !== 'game_master')
  
  if (disconnectedPlayers.length > 0) {
    return {
      canStart: false,
      error: `–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã: ${disconnectedPlayers.map(p => p.name).join(', ')}`
    }
  }

  return { canStart: true }
}

// Get game phase display name
export function getPhaseDisplayName(gameState, currentPhase) {
  const phases = {
    setup: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
    night: '–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞',
    day: '–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞', 
    voting: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
    ended: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
  }
  
  return phases[gameState] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞'
}