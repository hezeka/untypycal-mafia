// Helper functions for game logic

// Helper function to check if player can send messages
export function canSendMessage(room, player, messageType) {
  // Host can always send messages
  if (messageType === 'host') return true
  
  // During setup phase, all players can chat
  if (room.gameState === 'setup') return true
  
  // During day phase, all players can chat
  if (room.gameState === 'day') return true
  
  // During night phase, only werewolves can chat with each other
  if (room.gameState === 'night') {
    return room.canSeeWerewolfRoles(player.role)
  }
  
  // During voting phase, no one can chat
  if (room.gameState === 'voting') return false
  
  return false
}

// Helper function to determine who should receive the message
export function getMessageRecipients(room, messageType, sender) {
  const recipients = []
  
  // Host messages go to everyone
  if (messageType === 'host') {
    room.players.forEach((player) => {
      if (player.connected) {
        recipients.push(player.id)
      }
    })
    return recipients
  }
  
  // During setup and day phases, everyone sees messages
  if (room.gameState === 'setup' || room.gameState === 'day') {
    room.players.forEach((player) => {
      if (player.connected) {
        recipients.push(player.id)
      }
    })
    return recipients
  }
  
  // During night phase, only werewolves see werewolf messages
  if (room.gameState === 'night') {
    if (room.canSeeWerewolfRoles(sender.role)) {
      room.players.forEach((player) => {
        if (player.connected && room.canSeeWerewolfRoles(player.role)) {
          recipients.push(player.id)
        }
      })
    }
    return recipients
  }
  
  return recipients
}

// Generate room ID
export function generateRoomId() {
  return Math.random().toString(36).substring(2, 8).toUpperCase()
}

// –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω (—Å–∏—Å—Ç–µ–º–Ω—ã–µ, –∫–æ–º–∞–Ω–¥—ã, –≥—Ä—É–ø–ø—ã)
const FORBIDDEN_NAMES = [
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ
  '—Å–∏—Å—Ç–µ–º–∞', 'system', '–∞–¥–º–∏–Ω', 'admin', '–≤–µ–¥—É—â–∏–π', 'host', '—Å–µ—Ä–≤–µ—Ä', 'server',
  '–±–æ—Ç', 'bot', '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä', 'moderator', 'game_master', 'gamemaster',
  
  // –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞
  '—à–µ–ø–æ—Ç', 'whisper', '–ø–æ–º–æ—â—å', 'help', '–∫—Ç–æ', 'who', '–≤—Ä–µ–º—è', 'time',
  '—Å–ø–∏—Å–æ–∫', 'list', '–≤—Å–µ', 'all', 'everyone',
  
  // –ì—Ä—É–ø–ø—ã
  '–æ–±–æ—Ä–æ—Ç–Ω–∏', '–≤–æ–ª–∫–∏', 'wolves', 'werewolves', '–¥–µ—Ä–µ–≤–Ω—è', '–∂–∏—Ç–µ–ª–∏', 
  'village', 'villagers', '–º–∞—Ñ–∏—è', 'mafia',
  
  // –†–æ–ª–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
  '–ø—Ä–æ–≤–∏–¥–µ—Ü', 'seer', '–≥—Ä–∞–±–∏—Ç–µ–ª—å', 'robber', '—Å–º—É—Ç—å—è–Ω', 'troublemaker',
  '–ø—å—è–Ω–∏—Ü–∞', 'drunk', '–Ω–µ—É–¥–∞—á–Ω–∏–∫', 'tanner', '–æ—Ö–æ—Ç–Ω–∏–∫', 'hunter',
  '–æ–±–æ—Ä–æ—Ç–µ–Ω—å', 'werewolf', '–º–∏–Ω—å–æ–Ω', 'minion',
  
  // –û–±—â–∏–µ
  '–∏–≥—Ä–æ–∫', 'player', '–≥–æ—Å—Ç—å', 'guest', '–∞–Ω–æ–Ω–∏–º', 'anonymous', 'null', 'undefined'
]

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
export function validatePlayerName(name, existingPlayers = []) {
  if (!name || typeof name !== 'string') {
    return { valid: false, error: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
  let formattedName = name.trim()
  
  if (formattedName.length < 1) {
    return { valid: false, error: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  if (formattedName.length > 15) {
    return { valid: false, error: '–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤)' }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9_-]+$/.test(formattedName)) {
    return { 
      valid: false, 
      error: '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ. –ü—Ä–æ–±–µ–ª—ã –∏ —Å–ª–µ—à–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!' 
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞
  if (!/^[a-zA-Z–∞-—è–ê-–Ø]/.test(formattedName)) {
    return { 
      valid: false, 
      error: '–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã' 
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
  const lowercaseName = formattedName.toLowerCase()
  if (FORBIDDEN_NAMES.includes(lowercaseName)) {
    return { 
      valid: false, 
      error: '–≠—Ç–æ –∏–º—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.' 
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
  if (lowercaseName.startsWith('/') || lowercaseName.includes('/')) {
    return { 
      valid: false, 
      error: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ—à–∏ (—Å–∏–º–≤–æ–ª /)' 
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
  const nameExists = existingPlayers.some(playerName => 
    playerName.toLowerCase() === lowercaseName
  )
  
  if (nameExists) {
    return { 
      valid: false, 
      error: '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.' 
    }
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  formattedName = formatPlayerName(formattedName)
  
  return { valid: true, name: formattedName }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatPlayerName(name) {
  // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ—á–Ω—ã–º–∏
  return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase()
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
export function validatePlayerNameForReconnection(name, room, excludeSocketId = null) {
  const existingPlayerNames = Array.from(room.players.values())
    .filter(p => p.id !== excludeSocketId) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    .map(p => p.name)
  
  return validatePlayerName(name, existingPlayerNames)
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∏–º–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ
export function getExistingPlayerNames(room, excludeSocketId = null) {
  return Array.from(room.players.values())
    .filter(p => p.id !== excludeSocketId)
    .map(p => p.name)
}

// –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞
export function suggestAlternativeNames(originalName, existingNames) {
  const baseName = originalName.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '').substring(0, 10)
  const suggestions = []
  
  // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã
  for (let i = 1; i <= 9; i++) {
    const suggestion = `${baseName}${i}`
    if (!existingNames.includes(suggestion.toLowerCase()) && 
        !FORBIDDEN_NAMES.includes(suggestion.toLowerCase())) {
      suggestions.push(formatPlayerName(suggestion))
      if (suggestions.length >= 3) break
    }
  }
  
  // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª—ã
  const suffixes = ['_new', '_player', '_user']
  for (const suffix of suffixes) {
    const suggestion = `${baseName}${suffix}`
    if (!existingNames.includes(suggestion.toLowerCase()) && 
        !FORBIDDEN_NAMES.includes(suggestion.toLowerCase())) {
      suggestions.push(formatPlayerName(suggestion))
      if (suggestions.length >= 5) break
    }
  }
  
  return suggestions
}

// Validate room ID format
export function validateRoomId(roomId) {
  if (!roomId || typeof roomId !== 'string') {
    return false
  }
  
  // Room ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
  return /^[A-Z0-9]{6}$/.test(roomId.toUpperCase())
}

// Clean up disconnected players after timeout
export function cleanupDisconnectedPlayers(room, timeoutMinutes = 30) {
  const timeoutMs = timeoutMinutes * 60 * 1000
  const now = Date.now()
  
  const playersToRemove = []
  
  room.players.forEach((player, playerId) => {
    if (!player.connected && player.disconnectedAt) {
      if (now - player.disconnectedAt > timeoutMs) {
        playersToRemove.push(playerId)
      }
    }
  })
  
  playersToRemove.forEach(playerId => {
    room.removePlayer(playerId)
    console.log(`üßπ Cleaned up disconnected player: ${playerId}`)
  })
  
  return playersToRemove.length
}

// Log game action for debugging
export function logGameAction(roomId, action, details = {}) {
  const timestamp = new Date().toISOString()
  console.log(`[${timestamp}] üéÆ Room ${roomId}: ${action}`, details)
}

// Sanitize message content
export function sanitizeMessage(message) {
  if (!message || typeof message !== 'string') {
    return ''
  }
  
  return message
    .trim()
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .substring(0, 300) // Max length
}

// Check if room can start game
export function canStartGame(room) {
  const playerCount = room.players.size
  const nonHostPlayerCount = playerCount - 1 // –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ–¥—É—â–µ–≥–æ
  const roleCount = room.selectedRoles.length

  if (nonHostPlayerCount !== roleCount) {
    return { 
      canStart: false, 
      error: `–ù—É–∂–Ω–æ ${nonHostPlayerCount} —Ä–æ–ª–µ–π –¥–ª—è ${nonHostPlayerCount} –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –≤–µ–¥—É—â–µ–≥–æ). –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: ${roleCount}` 
    }
  }

  if (nonHostPlayerCount < 2) {
    return { 
      canStart: false, 
      error: '–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ (–∏—Å–∫–ª—é—á–∞—è –≤–µ–¥—É—â–µ–≥–æ)' 
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
  const disconnectedPlayers = Array.from(room.players.values())
    .filter(p => !p.connected && p.role !== 'game_master')
  
  if (disconnectedPlayers.length > 0) {
    return {
      canStart: false,
      error: `–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã: ${disconnectedPlayers.map(p => p.name).join(', ')}`
    }
  }

  return { canStart: true }
}

// Get game phase display name
export function getPhaseDisplayName(gameState, currentPhase) {
  const phases = {
    setup: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
    night: '–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞',
    day: '–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞', 
    voting: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
    ended: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
  }
  
  return phases[gameState] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–∞–º –±–æ—Ç–æ–≤
export function looksLikeBot(name) {
  const botPatterns = [
    /bot/i,
    /–±–æ—Ç/i,
    /test/i,
    /—Ç–µ—Å—Ç/i,
    /admin/i,
    /mod/i,
    /^user\d+$/i,
    /^guest\d+$/i,
    /^–∞–Ω–æ–Ω\d+$/i
  ]
  
  return botPatterns.some(pattern => pattern.test(name))
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
export function generateRandomName(existingNames = []) {
  const adjectives = ['–•–∏—Ç—Ä—ã–π', '–ú—É–¥—Ä—ã–π', '–ë—ã—Å—Ç—Ä—ã–π', '–°–º–µ–ª—ã–π', '–¢–∏—Ö–∏–π', '–õ–æ–≤–∫–∏–π']
  const animals = ['–í–æ–ª–∫', '–õ–∏—Å', '–ö–æ—Ç', '–°–æ–≤–∞', '–ï–∂', '–ó–∞—è—Ü']
  
  let attempts = 0
  while (attempts < 20) {
    const adj = adjectives[Math.floor(Math.random() * adjectives.length)]
    const animal = animals[Math.floor(Math.random() * animals.length)]
    const number = Math.floor(Math.random() * 99) + 1
    
    const name = `${adj}${animal}${number}`
    
    if (!existingNames.includes(name.toLowerCase())) {
      return name
    }
    attempts++
  }
  
  // Fallback
  return `–ò–≥—Ä–æ–∫${Date.now().toString().slice(-4)}`
}