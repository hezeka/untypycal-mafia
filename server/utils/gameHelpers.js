/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–≥—Ä—ã
 */

import { LIMITS } from './constants.js'

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫–æ–º–Ω–∞—Ç—ã
 */
export const generateRoomId = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let result = ''
  for (let i = 0; i < LIMITS.ROOM_CODE_LENGTH; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const validateUsername = (username) => {
  if (!username || typeof username !== 'string') {
    return { valid: false, error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }
  }
  
  const trimmed = username.trim()
  
  if (trimmed.length < LIMITS.MIN_USERNAME_LENGTH) {
    return { valid: false, error: `–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${LIMITS.MIN_USERNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤` }
  }
  
  if (trimmed.length > LIMITS.MAX_USERNAME_LENGTH) {
    return { valid: false, error: `–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ ${LIMITS.MAX_USERNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤` }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  const validPattern = /^[a-zA-Z–∞-—è–ê-–Ø0-9\s_-]+$/
  if (!validPattern.test(trimmed)) {
    return { valid: false, error: '–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' }
  }
  
  return { valid: true, username: trimmed }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
 */
export const validateRoomCode = (code) => {
  if (!code || typeof code !== 'string') {
    return { valid: false, error: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
  }
  
  const upperCode = code.toUpperCase().trim()
  
  if (upperCode.length !== LIMITS.ROOM_CODE_LENGTH) {
    return { valid: false, error: `–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${LIMITS.ROOM_CODE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤` }
  }
  
  const validPattern = /^[A-Z0-9]+$/
  if (!validPattern.test(upperCode)) {
    return { valid: false, error: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' }
  }
  
  return { valid: true, code: upperCode }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const validateMessage = (message) => {
  if (!message || typeof message !== 'string') {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  const trimmed = message.trim()
  
  if (trimmed.length === 0) {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  if (trimmed.length > 500) {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)' }
  }
  
  return { valid: true, text: trimmed }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ HTML –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
 */
export const sanitizeHtml = (text) => {
  if (!text || typeof text !== 'string') return ''
  
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;')
}

/**
 * Throttle —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
 */
export const throttle = (func, delay) => {
  let timeoutId
  let lastExecTime = 0
  
  return function (...args) {
    const currentTime = Date.now()
    
    if (currentTime - lastExecTime > delay) {
      func.apply(this, args)
      lastExecTime = currentTime
    } else {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(() => {
        func.apply(this, args)
        lastExecTime = Date.now()
      }, delay - (currentTime - lastExecTime))
    }
  }
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export const debounce = (func, delay) => {
  let timeoutId
  
  return function (...args) {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => func.apply(this, args), delay)
  }
}

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
 */
export const shuffleArray = (array) => {
  const result = [...array]
  for (let i = result.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [result[i], result[j]] = [result[j], result[i]]
  }
  return result
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
 */
export const randomInt = (min, max) => {
  return Math.floor(Math.random() * (max - min + 1)) + min
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ MM:SS
 */
export const formatTime = (seconds) => {
  const mins = Math.floor(seconds / 60)
  const secs = seconds % 60
  return `${mins}:${secs.toString().padStart(2, '0')}`
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ ID –∏–≥—Ä–æ–∫–∞
 */
export const isValidPlayerId = (id) => {
  return typeof id === 'string' && id.length > 0
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–æ–∫–µ—Ç–∞
 */
export const getClientIP = (socket) => {
  return socket.handshake.address || 
         socket.conn.remoteAddress || 
         socket.request.connection.remoteAddress ||
         '0.0.0.0'
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 */
export const logWithTime = (message, level = 'info') => {
  const timestamp = new Date().toISOString()
  const prefix = {
    info: '‚ÑπÔ∏è',
    warn: '‚ö†Ô∏è',
    error: '‚ùå',
    debug: 'üêõ'
  }[level] || '‚ÑπÔ∏è'
  
  console.log(`${prefix} [${timestamp}] ${message}`)
}