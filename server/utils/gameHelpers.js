/**
 * –ò–≥—Ä–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
 */

import { VALIDATION } from './constants.js'

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã
 */
export const generateRoomId = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let result = ''
  
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  
  return result
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const validateUsername = (username) => {
  if (!username || typeof username !== 'string') {
    return { valid: false, error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }
  }
  
  const trimmed = username.trim()
  
  if (trimmed.length < VALIDATION.USERNAME.MIN_LENGTH) {
    return { valid: false, error: `–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${VALIDATION.USERNAME.MIN_LENGTH} —Å–∏–º–≤–æ–ª–∞` }
  }
  
  if (trimmed.length > VALIDATION.USERNAME.MAX_LENGTH) {
    return { valid: false, error: `–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${VALIDATION.USERNAME.MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤` }
  }
  
  if (!VALIDATION.USERNAME.PATTERN.test(trimmed)) {
    return { valid: false, error: '–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' }
  }
  
  const lowerName = trimmed.toLowerCase()
  for (const forbidden of VALIDATION.USERNAME.FORBIDDEN_WORDS) {
    if (lowerName.includes(forbidden.toLowerCase())) {
      return { valid: false, error: '–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞' }
    }
  }
  
  return { valid: true, username: trimmed }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
 */
export const validateRoomCode = (code) => {
  if (!code || typeof code !== 'string') {
    return { valid: false, error: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
  }
  
  const upperCode = code.trim().toUpperCase()
  
  if (upperCode.length !== VALIDATION.ROOM_CODE.LENGTH) {
    return { valid: false, error: `–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ${VALIDATION.ROOM_CODE.LENGTH} —Å–∏–º–≤–æ–ª–æ–≤` }
  }
  
  if (!VALIDATION.ROOM_CODE.PATTERN.test(upperCode)) {
    return { valid: false, error: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã' }
  }
  
  return { valid: true, code: upperCode }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const validateMessage = (message) => {
  if (!message || typeof message !== 'string') {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }
  
  const trimmed = message.trim()
  
  if (trimmed.length < VALIDATION.MESSAGE.MIN_LENGTH) {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ' }
  }
  
  if (trimmed.length > VALIDATION.MESSAGE.MAX_LENGTH) {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' }
  }
  
  return { valid: true, message: trimmed }
}

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const sanitizeHtml = (text) => {
  if (!text) return ''
  
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;')
}

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
 */
export const shuffleArray = (array) => {
  const shuffled = [...array]
  
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
  }
  
  return shuffled
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
 */
export const getRandomElement = (array) => {
  if (!array || array.length === 0) return null
  return array[Math.floor(Math.random() * array.length)]
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
 */
export const getRandomElements = (array, count) => {
  if (!array || array.length === 0) return []
  
  const shuffled = shuffleArray(array)
  return shuffled.slice(0, Math.min(count, shuffled.length))
}

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export const sleep = (ms) => {
  return new Promise(resolve => setTimeout(resolve, ms))
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ throttle —Ñ—É–Ω–∫—Ü–∏–∏
 */
export const throttle = (func, limit) => {
  let inThrottle
  
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args)
      inThrottle = true
      setTimeout(() => inThrottle = false, limit)
    }
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ debounce —Ñ—É–Ω–∫—Ü–∏–∏
 */
export const debounce = (func, delay) => {
  let timeoutId
  
  return function(...args) {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => func.apply(this, args), delay)
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ JSON –ø–∞—Ä—Å–∏–Ω–≥
 */
export const safeJsonParse = (str, defaultValue = null) => {
  try {
    return JSON.parse(str)
  } catch (error) {
    console.warn('Invalid JSON:', str)
    return defaultValue
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ JSON stringify
 */
export const safeJsonStringify = (obj, defaultValue = '{}') => {
  try {
    return JSON.stringify(obj)
  } catch (error) {
    console.warn('JSON stringify error:', error)
    return defaultValue
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç—ã–º
 */
export const isEmpty = (obj) => {
  if (obj == null) return true
  if (Array.isArray(obj) || typeof obj === 'string') return obj.length === 0
  if (obj instanceof Map || obj instanceof Set) return obj.size === 0
  return Object.keys(obj).length === 0
}

/**
 * –ì–ª—É–±–æ–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
 */
export const deepClone = (obj) => {
  if (obj === null || typeof obj !== 'object') return obj
  if (obj instanceof Date) return new Date(obj.getTime())
  if (obj instanceof Array) return obj.map(item => deepClone(item))
  if (obj instanceof Set) return new Set([...obj].map(item => deepClone(item)))
  if (obj instanceof Map) return new Map([...obj].map(([key, val]) => [key, deepClone(val)]))
  
  const cloned = {}
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      cloned[key] = deepClone(obj[key])
    }
  }
  
  return cloned
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
export const formatTime = (timestamp) => {
  const date = new Date(timestamp)
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  })
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export const formatDuration = (seconds) => {
  const mins = Math.floor(seconds / 60)
  const secs = seconds % 60
  
  if (mins > 0) {
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }
  
  return `${secs}—Å`
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
 */
export const createLogger = (prefix) => {
  return {
    info: (...args) => console.log(`‚ÑπÔ∏è [${prefix}]`, ...args),
    warn: (...args) => console.warn(`‚ö†Ô∏è [${prefix}]`, ...args),
    error: (...args) => console.error(`‚ùå [${prefix}]`, ...args),
    debug: (...args) => {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üêõ [${prefix}]`, ...args)
      }
    }
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
 */
export const validateGameAction = (action, player, gameState) => {
  if (!action || typeof action !== 'object') {
    return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è' }
  }
  
  if (!action.type) {
    return { valid: false, error: '–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
  }
  
  if (!player) {
    return { valid: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
  }
  
  if (!player.alive && action.type !== 'chat' && action.type !== 'whisper') {
    return { valid: false, error: '–ú–µ—Ä—Ç–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è' }
  }
  
  return { valid: true }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
 */
export const getErrorInfo = (error) => {
  return {
    message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
    timestamp: Date.now()
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
 */
export const createErrorResponse = (code, message, details = null) => {
  return {
    error: true,
    code,
    message,
    details,
    timestamp: Date.now()
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */
export const createSuccessResponse = (data = null, message = null) => {
  return {
    success: true,
    data,
    message,
    timestamp: Date.now()
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
 */
export const checkRateLimit = (requests, timeWindow, maxRequests) => {
  const now = Date.now()
  const windowStart = now - timeWindow
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const recentRequests = requests.filter(timestamp => timestamp > windowStart)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
  if (recentRequests.length >= maxRequests) {
    return {
      allowed: false,
      retryAfter: Math.ceil((recentRequests[0] + timeWindow - now) / 1000)
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
  recentRequests.push(now)
  
  return {
    allowed: true,
    remaining: maxRequests - recentRequests.length
  }
}