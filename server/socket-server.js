// server/socket-server.js
import { createServer } from 'http'
import { Server } from 'socket.io'
import express from 'express'
import cors from 'cors'
import rateLimit from 'express-rate-limit'

import { GameRoom } from './models/GameRoom.js'
import { ChatCommandProcessor } from './services/ChatCommandProcessor.js'
import { SOCKET_EVENTS, ERROR_CODES, LIMITS, GAME_PHASES, MESSAGE_TYPES } from './utils/constants.js'
import { sanitizeHtml } from './utils/gameHelpers.js'
import { getRoleInfo } from './roles/rolesList.js'
import { createLogger } from './utils/logger.js'

const logger = createLogger('SocketServer')

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —á–∞—Ç–∞
const formatNightActionResult = (result, roleId) => {
  const roleInfo = getRoleInfo(roleId)
  const roleName = roleInfo?.name || roleId

  // –ü—Ä–æ–≤–∏–¥–µ—Ü - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞
  if (result.data.targetRole) {
    const targetRoleInfo = getRoleInfo(result.data.targetRole)
    const targetRoleName = targetRoleInfo?.name || result.data.targetRole
    const targetName = result.data.targetName || '–∏–≥—Ä–æ–∫'
    return `üîÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${targetName} –∏–º–µ–µ—Ç —Ä–æ–ª—å ¬´${targetRoleName}¬ª`
  }
  
  // –ü—Ä–æ–≤–∏–¥–µ—Ü - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
  if (result.data.centerCards && result.data.centerCards.length > 0) {
    const cardNames = result.data.centerCards.map(card => {
      const cardInfo = getRoleInfo(card)
      return cardInfo?.name || card
    })
    return `üîÆ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã: ${cardNames.join(', ')}`
  }
  
  // –ì—Ä–∞–±–∏—Ç–µ–ª—å - –Ω–æ–≤–∞—è —Ä–æ–ª—å
  if (result.data.newRole) {
    const newRoleInfo = getRoleInfo(result.data.newRole)
    const newRoleName = newRoleInfo?.name || result.data.newRole
    return `üîÑ –í–∞—à–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: ¬´${newRoleName}¬ª`
  }
  
  // –ú–∏–Ω—å–æ–Ω/–û–±–æ—Ä–æ—Ç–µ–Ω—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–∏—Ö –æ–±–æ—Ä–æ—Ç–Ω—è—Ö
  if (result.data.werewolves && result.data.werewolves.length > 0) {
    const werewolfList = result.data.werewolves.map(wolf => {
      const wolfRoleInfo = getRoleInfo(wolf.role)
      return `${wolf.name} (${wolfRoleInfo?.name || wolf.role})`
    }).join(', ')
    return `üê∫ –û–±–æ—Ä–æ—Ç–Ω–∏ –≤ –∏–≥—Ä–µ: ${werewolfList}`
  }
  
  // –°–º—É—Ç—å—è–Ω - –æ–±–º–µ–Ω —Ä–æ–ª–µ–π
  if (result.data.swapped) {
    return `üîÑ –†–æ–ª–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏`
  }
  
  // –û—Ö—Ä–∞–Ω–Ω–∏–∫ - –∑–∞—â–∏—Ç–∞
  if (result.data.protected) {
    const protectedPlayer = result.message.match(/–∑–∞—â–∏—Ç–∏–ª–∏ (.+)$/)?.[1] || '–∏–≥—Ä–æ–∫–∞'
    return `üõ°Ô∏è –í—ã –∑–∞—â–∏—Ç–∏–ª–∏ ${protectedPlayer} –Ω–∞ —ç—Ç—É –Ω–æ—á—å`
  }
  
  // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–µ–π
  if (result.data.voted) {
    return `üê∫ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω`
  }
  
  // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  return `‚úÖ ${result.message}`
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç–µ
const shouldShowResultInChat = (result, roleId) => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  return result.data.targetRole ||           // –ü—Ä–æ–≤–∏–¥–µ—Ü - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–æ–ª–∏
         result.data.centerCards ||          // –ü—Ä–æ–≤–∏–¥–µ—Ü - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
         result.data.werewolves ||           // –ú–∏–Ω—å–æ–Ω - –æ–±–æ—Ä–æ—Ç–Ω–∏
         result.data.newRole ||              // –ì—Ä–∞–±–∏—Ç–µ–ª—å - –Ω–æ–≤–∞—è —Ä–æ–ª—å
         result.data.protected ||            // –û—Ö—Ä–∞–Ω–Ω–∏–∫ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
         (result.data.swapped && Array.isArray(result.data.swapped)) // –°–º—É—Ç—å—è–Ω - –æ–±–º–µ–Ω —Ä–æ–ª–µ–π
  
  // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è:
  // - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–µ–π (result.data.voted) - —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
}

const app = express()
const server = createServer(app)

// Trust proxy for production (behind nginx)
if (process.env.NODE_ENV === 'production') {
  app.set('trust proxy', 1)
}

// JSON body parsing
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://mafia.waifucards.app', 'https://untypical-mafia.vercel.app']
    : ['http://localhost:3000', 'http://127.0.0.1:3000'],
  credentials: true
}))

// Rate limiting
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  max: LIMITS.MESSAGES_PER_MINUTE || 20,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
})
app.use('/api', limiter)

const io = new Server(server, {
  cors: {
    origin: process.env.NODE_ENV === 'production'
      ? ['https://mafia.waifucards.app', 'https://untypical-mafia.vercel.app']
      : ['http://localhost:3000', 'http://127.0.0.1:3000'],
    methods: ['GET', 'POST'],
    credentials: true
  }
})

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const rooms = new Map()
const playerRooms = new Map() // socketId -> roomId
const rateLimitMap = new Map() // –ü—Ä–æ—Å—Ç–æ–π rate limiting –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π

// –£—Ç–∏–ª–∏—Ç—ã
const sendError = (socket, code, message) => {
  socket.emit(SOCKET_EVENTS.ERROR, { code, message })
}

const getPlayerRoom = (socketId) => {
  const roomId = playerRooms.get(socketId)
  return roomId ? rooms.get(roomId) : null
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
const validateRequest = (socket, eventName) => {
  // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  return socket && socket.id
}

const checkMessageRateLimit = (socketId) => {
  const now = Date.now()
  const key = socketId
  
  if (!rateLimitMap.has(key)) {
    rateLimitMap.set(key, [])
  }
  
  const messages = rateLimitMap.get(key)
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
  const filtered = messages.filter(timestamp => now - timestamp < 60000)
  
  if (filtered.length >= LIMITS.MESSAGES_PER_MINUTE) {
    return false
  }
  
  filtered.push(now)
  rateLimitMap.set(key, filtered)
  return true
}

// === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

const handleJoinRoom = (socket, data) => {
  try {
    const { roomCode, username } = data
    
    if (!roomCode || !username) {
      return sendError(socket, ERROR_CODES.VALIDATION_ERROR, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    }
    
    const room = rooms.get(roomCode)
    if (!room) {
      return sendError(socket, ERROR_CODES.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    const player = room.addPlayer(socket.id, sanitizeHtml(username))
    playerRooms.set(socket.id, roomCode)
    room.addSocket(socket.id, socket)
    
    logger.info(`üéÆ Player ${username} joined room ${roomCode}`)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫—É  
    socket.emit('join-success', { 
      room: room.getClientData(socket.id),
      player: player 
    })
    
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –Ω–æ—á–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    if (room.gameState === GAME_PHASES.NIGHT && room.gameEngine) {
      const playerRole = player.role
      const nightRoles = room.gameEngine.nightRoles || []
      const currentNightActionIndex = room.gameEngine.nightActionIndex || 0
      
      if (currentNightActionIndex < nightRoles.length) {
        const currentRole = nightRoles[currentNightActionIndex]
        if (currentRole && playerRole === currentRole.id && player.alive) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ—á–Ω–æ–º —Ö–æ–¥–µ
          socket.emit('night-action-turn', {
            role: currentRole.id,
            timeLimit: 30
          })
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ
          const phaseStartTime = room.gameEngine.phaseStartTime || Date.now()
          const endTime = phaseStartTime + (30 * 1000)
          socket.emit('night-action-timer', {
            role: currentRole.id,
            timeLimit: 30,
            endTime: endTime
          })
        }
      }
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    room.broadcast(SOCKET_EVENTS.GAME_UPDATED, { room: room.getClientData() })
    
    // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // room.addSystemMessage(`${player.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`) // –£–±–∏—Ä–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    
  } catch (error) {
    logger.error('Join room error:', error)
    sendError(socket, ERROR_CODES.VALIDATION_ERROR, error.message)
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
const handleSendMessage = async (socket, data) => {
  try {
    const { text } = data
    
    if (!text || typeof text !== 'string' || !text.trim()) {
      return sendError(socket, ERROR_CODES.VALIDATION_ERROR, '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    }
    
    // Rate limiting
    if (!checkMessageRateLimit(socket.id)) {
      return sendError(socket, ERROR_CODES.RATE_LIMIT, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
    }
    
    const room = getPlayerRoom(socket.id)
    if (!room) {
      return sendError(socket, ERROR_CODES.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }
    
    const player = room.getPlayer(socket.id)
    if (!player) {
      return sendError(socket, ERROR_CODES.PLAYER_NOT_FOUND, '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    const cleanText = sanitizeHtml(text.trim())
    
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú ChatCommandProcessor
    const chatProcessor = new ChatCommandProcessor(room)
    
    if (chatProcessor.isCommand(cleanText)) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
      const result = await chatProcessor.processCommand(socket.id, cleanText)
      
      if (!result.success) {
        return sendError(socket, ERROR_CODES.VALIDATION_ERROR, result.error)
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, ChatCommandProcessor —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
      return
    }
    
    // ‚úÖ –û–ë–´–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–∞—Ç–∞
    if (!room.chatPermissions.canChat) {
      return sendError(socket, ERROR_CODES.PERMISSION_DENIED, '–ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–æ—á–∏ (—Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏)
    if (room.gameState === GAME_PHASES.NIGHT && room.chatPermissions.werewolfChat) {
      if (!room.isWerewolf(player.role)) {
        return sendError(socket, ERROR_CODES.PERMISSION_DENIED, '–ù–æ—á—å—é –º–æ–≥—É—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏')
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = room.getPlayer(socket.id)
    if (!sender) return sendError(socket, ERROR_CODES.PLAYER_NOT_FOUND)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    let recipients = []
    
    if (room.gameState === GAME_PHASES.NIGHT && room.chatPermissions.werewolfChat) {
      // –ù–æ—á—å—é - —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏ –≤–∏–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–µ–π
      recipients = Array.from(room.players.values())
        .filter(p => room.isWerewolf(p.role) || p.role === 'game_master')
    } else if (room.chatPermissions.canSeeAll) {
      // –û–±—ã—á–Ω—ã–µ —Ñ–∞–∑—ã - –≤—Å–µ –∂–∏–≤—ã–µ + game_master
      recipients = Array.from(room.players.values())
        .filter(p => p.alive || p.role === 'game_master')
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    const baseMessage = {
      id: Date.now(),
      senderId: sender.id,
      senderName: sender.name,
      senderRole: sender.role, // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
      text: sanitizeHtml(cleanText),
      type: 'public',
      timestamp: Date.now()
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    room.chat.push(baseMessage)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    recipients.forEach(recipient => {
      const socket = room.sockets.get(recipient.id)
      if (socket) {
        try {
          // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          const personalizedMessage = {
            ...baseMessage,
            senderRole: room.shouldShowPlayerRole(sender, recipient) ? sender.role : null
          }
          socket.emit(SOCKET_EVENTS.NEW_MESSAGE, { message: personalizedMessage })
        } catch (error) {
          logger.error(`Failed to send message to ${recipient.id}:`, error)
        }
      }
    })
    
    logger.info(`üí¨ Message from ${player.name} in ${room.id}: ${cleanText.substring(0, 50)}...`)
    
  } catch (error) {
    logger.error('Send message error:', error)
    sendError(socket, ERROR_CODES.SERVER_ERROR, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
  }
}

const handleCreateRoom = (socket, data) => {
  console.log(data, 'data', socket.id, 'socket.id');
  try {
    const { username, isPrivate = false, hostAsObserver = false } = data
    
    if (!username) {
      return sendError(socket, ERROR_CODES.VALIDATION_ERROR, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è')
    }
    
    const room = new GameRoom(socket.id, isPrivate, hostAsObserver)
    rooms.set(room.id, room)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∏–≥—Ä–æ–∫–∞
    const player = room.addPlayer(socket.id, sanitizeHtml(username))
    playerRooms.set(socket.id, room.id)
    room.addSocket(socket.id, socket)
    
    logger.info(`üéÆ Room ${room.id} created by ${username}`)
    
    socket.emit(SOCKET_EVENTS.ROOM_CREATED, { 
      room: room.getClientData(socket.id),
      player: player 
    })
    
  } catch (error) {
    logger.error('Create room error:', error)
    sendError(socket, ERROR_CODES.SERVER_ERROR, error.message)
  }
}

const handleStartGame = async (socket, data) => {
  try {
    const room = getPlayerRoom(socket.id)
    if (!room) {
      return sendError(socket, ERROR_CODES.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }
    
    const player = room.getPlayer(socket.id)
    if (!player?.isHost) {
      return sendError(socket, ERROR_CODES.PERMISSION_DENIED, '–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É')
    }
    
    await room.startGame()
    room.broadcast(SOCKET_EVENTS.GAME_STARTED, { room: {} })
    
    logger.info(`üéÆ Game started in room ${room.id}`)
    
  } catch (error) {
    logger.error('Start game error:', error)
    sendError(socket, ERROR_CODES.VALIDATION_ERROR, error.message)
  }
}

const handleVote = (socket, data) => {
  try {
    const { targetId } = data
    const room = getPlayerRoom(socket.id)
    
    if (!room) {
      return sendError(socket, ERROR_CODES.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }
    
    if (room.gameState !== GAME_PHASES.VOTING) {
      return sendError(socket, ERROR_CODES.INVALID_ACTION, '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
    }
    
    const player = room.getPlayer(socket.id)
    if (!player?.alive) {
      return sendError(socket, ERROR_CODES.PERMISSION_DENIED, '–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç')
    }
    
    if (player.role === 'game_master') {
      return sendError(socket, ERROR_CODES.PERMISSION_DENIED, '–í–µ–¥—É—â–∏–π –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏')
    }
    
    room.addVote(socket.id, targetId)
    room.broadcast(SOCKET_EVENTS.VOTE_CAST, { 
      voterId: socket.id,
      targetId: targetId
    })
    
    logger.info(`üó≥Ô∏è Vote cast in room ${room.id}`)
    
  } catch (error) {
    logger.error('Vote error:', error)
    sendError(socket, ERROR_CODES.VALIDATION_ERROR, error.message)
  }
}

const handleNightAction = async (socket, data) => {
  try {
    const room = getPlayerRoom(socket.id)
    if (!room?.gameEngine) {
      return sendError(socket, ERROR_CODES.ROOM_NOT_FOUND, '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }
    
    if (room.gameState !== GAME_PHASES.NIGHT) {
      return sendError(socket, ERROR_CODES.INVALID_ACTION, '–°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á—å')
    }
    
    const result = await room.gameEngine.executeNightAction(socket.id, data)
    if (result.error) {
      return sendError(socket, ERROR_CODES.INVALID_ACTION, result.error)
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    room.broadcast('night-action-completed', {
      playerId: socket.id,
      result: result
    })
    
  } catch (error) {
    logger.error('Night action error:', error)
    sendError(socket, ERROR_CODES.SERVER_ERROR, error.message)
  }
}

const handleAdminAction = (socket, data) => {
  try {
    const { action, targetId } = data
    const room = getPlayerRoom(socket.id)
    
    if (!room) {
      return sendError(socket, ERROR_CODES.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }
    
    const player = room.getPlayer(socket.id)
    if (!player || (player.role !== 'game_master' && !player.isHost)) {
      return sendError(socket, ERROR_CODES.PERMISSION_DENIED, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
    }
    
    const target = room.getPlayer(targetId)
    if (!target) {
      return sendError(socket, ERROR_CODES.PLAYER_NOT_FOUND, '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    switch (action) {
      case 'kill':
        target.alive = false
        room.addSystemMessage(`${target.name} –±—ã–ª —É–±–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`, MESSAGE_TYPES.SYSTEM)
        break
      case 'revive':
        target.alive = true
        room.addSystemMessage(`${target.name} –±—ã–ª –≤–æ—Å–∫—Ä–µ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`, MESSAGE_TYPES.SYSTEM)
        break
      case 'kick':
        room.removePlayer(targetId)
        room.addSystemMessage(`${target.name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–≥—Ä—ã`, MESSAGE_TYPES.SYSTEM)
        break
      case 'next-phase':
        if (room.gameEngine) {
          room.gameEngine.nextPhase()
        }
        break
    }
    
    room.broadcast(SOCKET_EVENTS.GAME_UPDATED, { room: {} })
    
  } catch (error) {
    logger.error('Admin action error:', error)
    sendError(socket, ERROR_CODES.VALIDATION_ERROR, error.message)
  }
}

const handleVoiceActivity = (socket, data) => {
  const room = getPlayerRoom(socket.id)
  if (room) {
    const player = room.getPlayer(socket.id)
    if (player) {
      room.broadcast(SOCKET_EVENTS.VOICE_ACTIVITY, {
        playerId: socket.id,
        playerName: player.name,
        isActive: data.isActive
      })
    }
  }
}

const handleDisconnect = (socket) => {
  const room = getPlayerRoom(socket.id)
  if (room) {
    room.removeSocket(socket.id)
    playerRooms.delete(socket.id)
    
    const player = room.getPlayer(socket.id)
    if (player) {
      // room.addSystemMessage(`${player.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`) // –£–±–∏—Ä–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
      room.broadcast(SOCKET_EVENTS.PLAYER_DISCONNECTED, { 
        playerId: socket.id,
        playerName: player.name
      })
      
      logger.info(`üîå Player ${player.name} disconnected from room ${room.id}`)
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    if (Array.from(room.players.values()).every(p => !p.connected)) {
      rooms.delete(room.id)
      logger.info(`üóëÔ∏è Empty room ${room.id} deleted`)
    }
  }
  
  rateLimitMap.delete(socket.id)
}

// === SOCKET.IO –°–û–ë–´–¢–ò–Ø ===

io.on('connection', (socket) => {
  logger.info(`üîå Client connected: ${socket.id}`)
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  socket.on(SOCKET_EVENTS.CREATE_ROOM, (data) => handleCreateRoom(socket, data))
  socket.on(SOCKET_EVENTS.JOIN_ROOM, (data) => handleJoinRoom(socket, data))
  socket.on(SOCKET_EVENTS.SEND_MESSAGE, (data) => handleSendMessage(socket, data))
  socket.on(SOCKET_EVENTS.START_GAME, (data) => handleStartGame(socket, data))
  socket.on(SOCKET_EVENTS.VOTE, (data) => handleVote(socket, data))
  socket.on(SOCKET_EVENTS.NIGHT_ACTION, (data) => handleNightAction(socket, data))
  socket.on(SOCKET_EVENTS.ADMIN_ACTION, (data) => handleAdminAction(socket, data))
  socket.on(SOCKET_EVENTS.VOICE_ACTIVITY, (data) => handleVoiceActivity(socket, data))
  
  socket.on('disconnect', () => handleDisconnect(socket))
})

// === REST API ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
app.get('/api/rooms/public', (req, res) => {
  const publicRooms = Array.from(rooms.values())
    .filter(room => !room.isPrivate)
    .map(room => ({
      id: room.id,
      name: `–ö–æ–º–Ω–∞—Ç–∞ ${room.id}`,
      hostName: room.getPlayer(room.hostId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      phase: room.gameState,
      totalPlayers: room.players.size,
      alivePlayers: Array.from(room.players.values()).filter(p => p.alive).length,
      votingRounds: room.votingRounds || 0
    }))
  
  res.json(publicRooms)
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
app.get('/api/rooms/:roomId', (req, res) => {
  const { roomId } = req.params
  const room = rooms.get(roomId)
  
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const roomData = room.getClientData()
  res.json(roomData)
})

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ HTTP (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞)
app.post('/api/rooms/:roomId/join', (req, res) => {
  const { roomId } = req.params
  const { username, socketId } = req.body
  
  if (!username || !socketId) {
    return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ socketId' })
  }
  
  const room = rooms.get(roomId)
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  try {
    const player = room.addPlayer(socketId, sanitizeHtml(username))
    playerRooms.set(socketId, roomId)
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω
    const connectedSocket = Array.from(io.sockets.sockets.values())
      .find(s => s.id === socketId)
    
    if (connectedSocket) {
      room.addSocket(socketId, connectedSocket)
      logger.info(`üîå Socket ${socketId} registered to room ${roomId}`)
    }
    
    logger.info(`üéÆ Player ${username} joined room ${roomId} via HTTP`)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã
    room.broadcast(SOCKET_EVENTS.GAME_UPDATED, { room: room.getClientData() })
    // room.addSystemMessage(`${player.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`) // –£–±–∏—Ä–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    
    res.json({
      room: room.getClientData(socketId),
      player: player
    })
    
  } catch (error) {
    logger.error('Join room HTTP error:', error)
    res.status(400).json({ error: error.message })
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã
app.get('/api/rooms/:roomId/chat', (req, res) => {
  const { roomId } = req.params
  const { playerId } = req.query
  
  const room = rooms.get(roomId)
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  const player = playerId ? room.getPlayer(playerId) : null
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const visibleMessages = room.chat.filter(message => {
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥—è—Ç –≤—Å–µ
    if (message.type === 'system' || message.type === 'public') {
      // –ù–æ –≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ —Å werewolfChat —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω–∏ –≤–∏–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–µ–π
      if (room.gameState === 'night' && room.chatPermissions.werewolfChat && message.type === 'public') {
        const messageSender = room.getPlayer(message.senderId)
        if (messageSender && room.isWerewolf(messageSender.role)) {
          // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±–æ—Ä–æ—Ç–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä–æ—Ç–Ω—è–º –∏ game_master
          return player && (room.isWerewolf(player.role) || player.role === 'game_master')
        }
      }
      return true
    }
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–µ–ø–æ—Ç)
    if (message.type === 'whisper') {
      if (!player) return false
      
      // game_master –≤–∏–¥–∏—Ç –≤—Å–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (player.role === 'game_master') return true
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∞–º –∏–≥—Ä–æ–∫–æ–≤ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º –ø–æ ID)
      const isSender = message.senderName === player.name
      const isRecipient = message.recipientName === player.name
      
      console.log(`üîç Whisper filter: message from ${message.senderName} to ${message.recipientName}, checking for player ${player.name}, sender=${isSender}, recipient=${isRecipient}`)
      
      return isSender || isRecipient
    }
    
    return true
  }).map(message => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const enrichedMessage = { ...message }
    
    // –ú–∞—Ä–∫–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º ID)
    if (player && message.senderName === player.name && message.senderId !== 'system') {
      enrichedMessage.isOwn = true
      console.log(`üîß Marking message as own: "${message.text.substring(0, 30)}" from ${message.senderName}`)
    }
    
    // –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏)
    if (message.senderId !== 'system' && !enrichedMessage.senderRole) {
      const messageSender = room.getPlayer(message.senderId)
      if (messageSender) {
        enrichedMessage.senderRole = messageSender.role
      }
    }
    
    return enrichedMessage
  })
  
  res.json({ 
    messages: visibleMessages,
    playerId: playerId,
    playerName: player?.name
  })
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª—è—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
app.get('/api/rooms/:roomId/roles', async (req, res) => {
  const { roomId } = req.params
  const room = rooms.get(roomId)
  
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  try {
    const { getAllRoles } = await import('../utils/gameHelpers.js')
    const allRoles = getAllRoles()
    
    const selectedRoleData = room.selectedRoles.map(roleId => {
      const roleInfo = allRoles[roleId]
      return {
        id: roleId,
        name: roleInfo?.name || roleId,
        description: roleInfo?.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        team: roleInfo?.team || 'unknown',
        hasNightAction: roleInfo?.hasNightAction || false,
        nightOrder: roleInfo?.nightOrder || 999,
        implemented: roleInfo?.implemented || false,
        phaseHints: roleInfo?.phaseHints || {},
        image: `/roles/${roleId}.webp` // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ä–æ–ª–∏
      }
    }).sort((a, b) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ, –∑–∞—Ç–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–æ—á–∏
      const teamOrder = { village: 1, werewolf: 2, special: 3, tanner: 4 }
      if (a.team !== b.team) {
        return (teamOrder[a.team] || 999) - (teamOrder[b.team] || 999)
      }
      return a.nightOrder - b.nightOrder
    })
    
    res.json({
      success: true,
      roles: selectedRoleData,
      totalRoles: selectedRoleData.length,
      centerCards: room.centerCards?.length || 0
    })
    
  } catch (error) {
    logger.error('Get roles error:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π' })
  }
})

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
app.post('/api/rooms/:roomId/roles', (req, res) => {
  const { roomId } = req.params
  const { roleId, action, playerId } = req.body
  
  if (!roleId || !action || !playerId) {
    return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ roleId, action –∏ playerId' })
  }
  
  const room = rooms.get(roomId)
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  const player = room.getPlayer(playerId)
  if (!player || !player.isHost) {
    return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏' })
  }
  
  if (room.gameState !== 'setup') {
    return res.status(400).json({ error: '–†–æ–ª–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' })
  }
  
  try {
    if (action === 'add') {
      room.addRole(roleId)
      logger.info(`üé≠ Role ${roleId} added to room ${roomId} by ${player.name}`)
    } else if (action === 'remove') {
      room.removeRole(roleId)
      logger.info(`üé≠ Role ${roleId} removed from room ${roomId} by ${player.name}`)
    } else {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add –∏–ª–∏ remove' })
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    room.broadcast(SOCKET_EVENTS.GAME_UPDATED, { room: room.getClientData() })
    
    res.json({
      success: true,
      selectedRoles: room.selectedRoles,
      room: room.getClientData(playerId)
    })
    
  } catch (error) {
    logger.error('Role management error:', error)
    res.status(400).json({ error: error.message })
  }
})

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑–∞–º–∏ –∏–≥—Ä—ã
app.put('/api/rooms/:roomId/phase', async (req, res) => {
  const { roomId } = req.params
  const { action, playerId } = req.body
  
  if (!action || !playerId) {
    return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ action –∏ playerId' })
  }
  
  const room = rooms.get(roomId)
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  const player = room.getPlayer(playerId)
  if (!player || (!player.isHost && player.role !== 'game_master')) {
    return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –∏–ª–∏ game_master –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–∑–∞–º–∏' })
  }
  
  try {
    let result = { success: true }
    
    switch (action) {
      case 'next-phase':
        if (room.gameEngine) {
          room.gameEngine.nextPhase()
          result.message = '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ'
        } else {
          return res.status(400).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞' })
        }
        break
        
      case 'start-game':
        if (room.gameState !== 'setup') {
          return res.status(400).json({ error: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' })
        }
        await room.startGame()
        result.message = '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å'
        break
        
      case 'force-vote':
        if (room.gameState !== 'voting') {
          return res.status(400).json({ error: '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' })
        }
        if (room.gameEngine) {
          room.gameEngine.forceEndVoting()
          result.message = '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ'
        }
        break
        
      case 'extend-phase':
        if (room.gameEngine) {
          const extensionResult = room.gameEngine.extendPhase(1)
          result = { ...result, ...extensionResult }
        } else {
          return res.status(400).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞' })
        }
        break
        
      default:
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' })
    }
    
    logger.info(`üéÆ Phase action '${action}' by ${player.name} in room ${roomId}`)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    room.broadcast(SOCKET_EVENTS.GAME_UPDATED, { room: room.getClientData() })
    
    res.json({
      ...result,
      room: room.getClientData(playerId)
    })
    
  } catch (error) {
    logger.error('Phase management error:', error)
    res.status(400).json({ error: error.message })
  }
})

// –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
app.post('/api/rooms/:roomId/night-action', async (req, res) => {
  const { roomId } = req.params
  const { playerId, action } = req.body
  
  if (!playerId || action === undefined || action === null) {
    return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ playerId –∏ action' })
  }
  
  const room = rooms.get(roomId)
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  if (!room.gameEngine) {
    return res.status(400).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  if (room.gameState !== GAME_PHASES.NIGHT) {
    return res.status(400).json({ error: '–°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á—å' })
  }
  
  const player = room.getPlayer(playerId)
  if (!player) {
    return res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  }
  
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º targetName –≤ targetId –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (action.targetName && !action.targetId) {
      const targetPlayer = Array.from(room.players.values()).find(p => p.name === action.targetName)
      if (targetPlayer) {
        action.targetId = targetPlayer.id
      } else {
        return res.status(400).json({ error: '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω' })
      }
    }
    
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥–≤—É—Ö —Ü–µ–ª–µ–π (—Å–º—É—Ç—å—è–Ω)
    if (action.target1Name && !action.target1Id) {
      const target1 = Array.from(room.players.values()).find(p => p.name === action.target1Name)
      if (target1) {
        action.target1Id = target1.id
      } else {
        return res.status(400).json({ error: '–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
      }
    }
    
    if (action.target2Name && !action.target2Id) {
      const target2 = Array.from(room.players.values()).find(p => p.name === action.target2Name)
      if (target2) {
        action.target2Id = target2.id
      } else {
        return res.status(400).json({ error: '–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
      }
    }

    const result = await room.gameEngine.executeNightAction(playerId, action)
    
    if (result.error) {
      return res.status(400).json({ error: result.error })
    }
    
    logger.info(`üåô Night action by ${player.name} (${player.role}) in room ${roomId}:`, action)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—É–ª –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π)
    if (result.message && result.data && shouldShowResultInChat(result, player.role)) {
      const systemMessage = formatNightActionResult(result, player.role)
      room.gameEngine.addPendingMessage(playerId, systemMessage)
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π)
    room.broadcastExcept('night-action-completed', {
      playerId: playerId,
      roleCompleted: true
    }, [playerId]) // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ broadcast
    
    res.json({
      success: true,
      result: result,
      message: '–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
    })
    
  } catch (error) {
    logger.error('Night action API error:', error)
    res.status(500).json({ error: error.message })
  }
})

// –°–±—Ä–æ—Å –∫–æ–º–Ω–∞—Ç—ã (–Ω–æ–≤–∞—è –∏–≥—Ä–∞)
app.post('/api/rooms/:roomId/reset', async (req, res) => {
  const { roomId } = req.params
  const room = rooms.get(roomId)
  
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    room.resetGame()
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å–±—Ä–æ—Å–µ
    room.broadcast('room-reset', {
      message: '–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∏–≥—Ä–∞'
    })
    
    res.json({
      success: true,
      message: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞'
    })
    
  } catch (error) {
    logger.error('Room reset error:', error)
    res.status(500).json({ error: error.message })
  }
})

// –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
app.post('/api/rooms/:roomId/leave', async (req, res) => {
  const { roomId } = req.params
  const { playerId } = req.body
  
  if (!playerId) {
    return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ playerId' })
  }
  
  const room = rooms.get(roomId)
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  try {
    const player = room.getPlayer(playerId)
    if (!player) {
      return res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–¥—É—â–∏–π - —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    if (room.hostId === playerId) {
      room.broadcast('room-deleted', {
        message: '–í–µ–¥—É—â–∏–π –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É, –∫–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞'
      })
      rooms.delete(roomId)
      
      return res.json({
        success: true,
        message: '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞'
      })
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    room.removePlayer(playerId)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    room.broadcast('player-left', {
      playerId: playerId,
      playerName: player.name,
      message: `${player.name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`
    })
    
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É'
    })
    
  } catch (error) {
    logger.error('Leave room error:', error)
    res.status(500).json({ error: error.message })
  }
})

// –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
app.delete('/api/rooms/:roomId', async (req, res) => {
  const { roomId } = req.params
  const room = rooms.get(roomId)
  
  if (!room) {
    return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }
  
  try {
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    room.broadcast('room-deleted', {
      message: '–ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞'
    })
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    rooms.delete(roomId)
    
    res.json({
      success: true,
      message: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    })
    
  } catch (error) {
    logger.error('Delete room error:', error)
    res.status(500).json({ error: error.message })
  }
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.SOCKET_PORT || 3001

server.listen(PORT, () => {
  logger.info(`üöÄ Socket server running on port ${PORT}`)
  logger.info(`üåç Environment: ${process.env.NODE_ENV || 'development'}`)
})

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('üõë Shutting down socket server...')
  server.close(() => {
    logger.info('‚úÖ Socket server closed')
    process.exit(0)
  })
})

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–£–ë–õ–ò–ß–ù–´–• –ö–û–ú–ù–ê–¢ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞)
export function getPublicRooms() {
  return Array.from(rooms.values())
    .filter(room => !room.isPrivate)
    .map(room => ({
      id: room.id,
      name: `–ö–æ–º–Ω–∞—Ç–∞ ${room.id}`,
      hostName: room.getPlayer(room.hostId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      phase: room.gameState,
      totalPlayers: room.players.size,
      alivePlayers: Array.from(room.players.values()).filter(p => p.alive).length,
      daysSurvived: room.daysSurvived || 0,
      votingRounds: room.votingRounds || 0
    }))
}

export { io, rooms }