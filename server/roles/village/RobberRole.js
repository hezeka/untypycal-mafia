/**
 * –ì—Ä–∞–±–∏—Ç–µ–ª—å - –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏ —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
 */

import { BaseRole } from '../BaseRole.js'
import { ROLE_TEAMS } from '../../utils/constants.js'

export class RobberRole extends BaseRole {
  constructor() {
    super('robber', {
      name: '–ì—Ä–∞–±–∏—Ç–µ–ª—å',
      description: '–ù–æ—á—å—é –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏ —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º –∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –Ω–æ–≤—É—é —Ä–æ–ª—å.',
      team: ROLE_TEAMS.VILLAGE,
      color: 'blue',
      hasNightAction: true,
      nightOrder: 7,
      implemented: true,
      phaseHints: {
        introduction: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–Ω—è—Ç—å, —Å –∫–µ–º —Å—Ç–æ–∏—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏',
        night: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä–æ–ª—è–º–∏',
        day: '–ü–æ–º–Ω–∏—Ç–µ - —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–æ–≤–∞—è —Ä–æ–ª—å –∏ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏',
        voting: '–ò–≥—Ä–∞–π—Ç–µ –∑–∞ —Å–≤–æ—é –ù–û–í–£–Æ —Ä–æ–ª—å'
      }
    })
  }
  
  /**
   * –ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≥—Ä–∞–±–∏—Ç–µ–ª—è
   */
  async executeNightAction(game, player, action) {
    if (!action || !action.targetId) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –º–µ–Ω—è–µ–º—Å—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
      return await this.swapWithRandomPlayer(game, player)
    }
    
    if (action.type === 'swap_roles') {
      return await this.swapRolesAction(game, player, action.targetId)
    }
    
    return null
  }
  
  /**
   * –û–±–º–µ–Ω —Ä–æ–ª—è–º–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
   */
  async swapRolesAction(game, player, targetId) {
    const target = game.room.getPlayer(targetId)
    
    if (!target || target.id === player.id) {
      return null
    }
    
    const originalPlayerRole = player.role
    const originalTargetRole = target.role
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    const swapSuccess = this.swapRoles(game, player, target)
    
    if (!swapSuccess) {
      return null
    }
    
    this.logAction(player, 'swapped roles with', target.name)
    
    // –°–æ–æ–±—â–∞–µ–º –≥—Ä–∞–±–∏—Ç–µ–ª—é –µ–≥–æ –Ω–æ–≤—É—é —Ä–æ–ª—å
    const newRole = game.room.getRole(player.role)
    this.notifyPlayer(game, player.id, 
      `üîÑ –í—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å —Ä–æ–ª—è–º–∏ —Å ${target.name}. –¢–µ–ø–µ—Ä—å –≤—ã: ${newRole?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å'}`
    )
    
    return {
      roleChanges: [{
        playerId: player.id,
        playerName: player.name,
        oldRole: originalPlayerRole,
        newRole: target.role
      }, {
        playerId: target.id,
        playerName: target.name,
        oldRole: originalTargetRole,
        newRole: originalPlayerRole
      }]
    }
  }
  
  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
   */
  async swapWithRandomPlayer(game, player) {
    const availableTargets = this.getAvailableTargets(game, player)
    
    if (availableTargets.length === 0) {
      return null
    }
    
    const randomTarget = availableTargets[Math.floor(Math.random() * availableTargets.length)]
    
    return await this.swapRolesAction(game, player, randomTarget.id)
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≥—Ä–∞–±–∏—Ç–µ–ª—è
   */
  validateNightAction(game, player, action) {
    const baseValidation = super.validateNightAction(game, player, action)
    if (!baseValidation.valid) return baseValidation
    
    if (action.type === 'swap_roles') {
      const target = game.room.getPlayer(action.targetId)
      
      if (!target) {
        return { valid: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
      }
      
      if (target.id === player.id) {
        return { valid: false, error: '–ù–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π' }
      }
      
      if (!target.alive) {
        return { valid: false, error: '–ù–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏ —Å –º–µ—Ä—Ç–≤—ã–º –∏–≥—Ä–æ–∫–æ–º' }
      }
    }
    
    return { valid: true }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π (–≤—Å–µ –∂–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –∫—Ä–æ–º–µ —Å–µ–±—è)
   */
  getAvailableTargets(game, player) {
    return game.getAlivePlayers().filter(p => p.id !== player.id)
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –≥—Ä–∞–±–∏—Ç–µ–ª—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Å —Ü–µ–ª—å—é
   */
  canSwapWith(game, player, target) {
    if (!target || !target.alive) return false
    if (target.id === player.id) return false
    
    // –ì—Ä–∞–±–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Å –ª—é–±—ã–º –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–æ–º
    return true
  }
}