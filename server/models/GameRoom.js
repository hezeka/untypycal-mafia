import { v4 as uuidv4 } from 'uuid'

export class GameRoom {
  constructor(id, hostId, roles, isPrivate = false) {
    this.id = id
    this.hostId = hostId
    this.isPrivate = isPrivate
    this.players = new Map()
    this.selectedRoles = []
    this.gameState = 'setup' // setup, night, day, voting, ended
    this.currentPhase = null
    this.timer = null // Timer in seconds
    this.timerInterval = null // Interval –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    this.gameData = {
      centerCards: [],
      artifacts: [],
      shields: []
    }
    this.chat = []
    this.votes = new Map() // –•—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤: voterId -> targetId (null = –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è)
    this.roles = roles // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Ä–æ–ª–µ–π
    this.votingRounds = 0 // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
  }

  addPlayer(socketId, name, preferredColor = null) {
    // –ü–∞–ª–∏—Ç—Ä–∞ –∏–∑ 12 —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (4 –∫–æ–ª–æ–Ω–∫–∏, 3 —Ä—è–¥–∞)
    const availableColors = [
      'red', 'orange', 'yellow', 'green',        // –ö—Ä–∞—Å–Ω—ã–π, –û—Ä–∞–Ω–∂–µ–≤—ã–π, –ñ–µ–ª—Ç—ã–π, –ó–µ–ª–µ–Ω—ã–π
      'blue', 'purple', 'pink', 'brown',         // –°–∏–Ω–∏–π, –§–∏–æ–ª–µ—Ç–æ–≤—ã–π, –†–æ–∑–æ–≤—ã–π, –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π  
      'grey', 'deep-orange', 'dark-green', 'cyan' // –°–µ—Ä—ã–π, –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π, –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π, –ì–æ–ª—É–±–æ–π
    ]
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Ü–≤–µ—Ç–∞
    const usedColors = Array.from(this.players.values()).map(p => p.color)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
    let playerColor = preferredColor
    if (!playerColor || usedColors.includes(playerColor)) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ü–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –∑–∞–Ω—è—Ç, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π
      const freeColors = availableColors.filter(color => !usedColors.includes(color))
      playerColor = freeColors.length > 0 ? freeColors[Math.floor(Math.random() * freeColors.length)] : 'purple'
    }
    
    const player = {
      id: socketId,
      name: name,
      role: null,
      alive: true,
      protected: false,
      artifact: null,
      votes: 0,
      connected: true,
      muted: false,
      color: playerColor,
      survivedDays: 0 // –°—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π (–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π)
    }
    
    // If this is the host, assign game_master role
    if (socketId === this.hostId) {
      player.role = 'game_master'
    }
    
    this.players.set(socketId, player)
  }

  removePlayer(socketId) {
    this.players.delete(socketId)
    this.votes.delete(socketId) // –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
  }

  isHost(socketId) {
    return this.hostId === socketId
  }

  // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –≤–µ—Ä—Å–∏—è getGameData - —Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  getGameData(requestingSocketId = null) {
    const isHostRequesting = this.isHost(requestingSocketId)
    const gameEnded = this.gameState === 'ended'
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const filteredChat = this.chat.filter(message => {
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥—è—Ç –≤—Å–µ
      if (message.type === 'system' || message.type === 'player') {
        return true
      }
      
      // –®–µ–ø–æ—Ç—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏
      if (message.type === 'whisper' || message.type === 'group_whisper') {
        // –í–µ–¥—É—â–∏–π –≤–∏–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (isHostRequesting) {
          return true
        }
        
        // –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ socket ID –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        const requestingPlayer = this.players.get(requestingSocketId)
        if (requestingPlayer && message.playerName === requestingPlayer.name) {
          return true
        }
        
        // –î–ª—è –ª–∏—á–Ω—ã—Ö —à–µ–ø–æ—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ü–µ–ª–∏, —Ç–∞–∫ –∫–∞–∫ targetPlayerId –º–æ–∂–µ—Ç —É—Å—Ç–∞—Ä–µ—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (message.type === 'whisper') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ ID (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ), –∏ –ø–æ –∏–º–µ–Ω–∏
          if (message.targetPlayerId === requestingSocketId) {
            return true
          }
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ü–µ–ª–∏
          if (requestingPlayer && message.targetPlayerName === requestingPlayer.name) {
            return true
          }
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è —à–µ–ø–æ—Ç–æ–≤ –≤–µ–¥—É—â–µ–º—É
          if (message.targetPlayerName === '–í–µ–¥—É—â–∏–π' && this.isHost(requestingSocketId)) {
            return true
          }
        }
        
        // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —à–µ–ø–æ—Ç–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Ö–æ–¥–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –≥—Ä—É–ø–ø—É
        if (message.type === 'group_whisper') {
          return this.isPlayerInGroup(requestingSocketId, message.targetGroup)
        }
        
        return false
      }
      
      return true
    })

    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    const baseData = {
      id: this.id,
      hostId: this.hostId,
      isPrivate: this.isPrivate,
      selectedRoles: this.selectedRoles,
      gameState: this.gameState,
      currentPhase: this.currentPhase,
      timer: this.timer,
      gameData: this.gameData,
      chat: filteredChat
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä–æ–∫–æ–≤ - –ò–°–ö–õ–Æ–ß–ê–ï–ú –í–ï–î–£–©–ï–ì–û –ò–ó –°–ü–ò–°–ö–ê –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const allPlayers = Array.from(this.players.values())
    let playersToShow = allPlayers
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ù–ï –æ—Ç –≤–µ–¥—É—â–µ–≥–æ, –∏—Å–∫–ª—é—á–∞–µ–º –≤–µ–¥—É—â–µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if (!isHostRequesting) {
      playersToShow = allPlayers.filter(player => player.role !== 'game_master')
    }
    
    const safePlayers = playersToShow.map(player => {
      const requestingPlayer = this.players.get(requestingSocketId)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –µ—Å–ª–∏:
      // 1. –≠—Ç–æ –≤–µ–¥—É—â–∏–π
      // 2. –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
      // 3. –≠—Ç–æ —Å–∞–º –∏–≥—Ä–æ–∫
      // 4. –≠—Ç–æ –æ–±–æ—Ä–æ—Ç–µ–Ω—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–±–æ—Ä–æ—Ç–Ω–µ–π
      let shouldShowRole = false
      
      if (isHostRequesting || gameEnded) {
        shouldShowRole = true
      } else if (requestingSocketId === player.id) {
        shouldShowRole = true
      } else if (requestingPlayer && this.canSeeWerewolfRoles(requestingPlayer.role)) {
        shouldShowRole = this.isWerewolfRole(player.role)
      }
      
      return {
        id: player.id,
        name: player.name,
        role: shouldShowRole ? player.role : null,
        alive: player.alive,
        protected: player.protected,
        artifact: player.artifact,
        votes: player.votes,
        connected: player.connected,
        color: player.color,
        survivedDays: player.survivedDays
      }
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    const votingData = {
      total: this.getEligibleVoters().length,
      submitted: this.votes.size,
      hasVoted: this.votes.has(requestingSocketId),
      votedFor: this.votes.get(requestingSocketId) || null
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –≤–µ–¥—É—â–µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–∞—Ö –≤—Å–µ–≥–¥–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è voting)
    if (isHostRequesting) {
      const votes = []
      this.votes.forEach((targetId, voterId) => {
        const voter = this.players.get(voterId)
        const target = targetId ? this.players.get(targetId) : null
        
        if (voter) {
          votes.push({
            voter: voterId,
            voterName: voter.name,
            target: targetId,
            targetName: target ? target.name : null
          })
        }
      })
      votingData.votes = votes
      
      // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ
      console.log(`üó≥Ô∏è Voting data for host:`, {
        gameState: this.gameState,
        total: votingData.total,
        submitted: votingData.submitted,
        votesCount: votes.length,
        votes: votes.map(v => `${v.voterName} -> ${v.targetName || 'ABSTAIN'}`)
      })
    }
    
    return {
      ...baseData,
      players: safePlayers,
      voting: votingData,
      roles: this.roles, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ–ª–µ–π —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
      votingRounds: this.votingRounds // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å (–∂–∏–≤—ã–µ, –Ω–µ –≤–µ–¥—É—â–∏–π)
  getEligibleVoters() {
    return Array.from(this.players.values()).filter(p => 
      p.role !== 'game_master' && p.alive && p.connected
    )
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å (–∂–∏–≤—ã–µ, –Ω–µ –≤–µ–¥—É—â–∏–π)
  getEligibleTargets() {
    return Array.from(this.players.values()).filter(p => 
      p.role !== 'game_master' && p.alive
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Ä–æ–ª—å –≤–∏–¥–µ—Ç—å —Ä–æ–ª–∏ –æ–±–æ—Ä–æ—Ç–Ω–µ–π
  canSeeWerewolfRoles(role) {
    return role && (
      role.includes('wolf') || 
      role === 'werewolf' || 
      role === 'minion' ||
      role === 'game_master'
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å —Ä–æ–ª—å—é –æ–±–æ—Ä–æ—Ç–Ω—è
  isWerewolfRole(role) {
    return role && (
      role.includes('wolf') || 
      role === 'werewolf' || 
      role === 'minion'
    )
  }

  addChatMessage(playerId, message, type = 'player') {
    const player = playerId ? this.players.get(playerId) : null
    this.chat.push({
      id: uuidv4(),
      playerId: playerId,
      playerName: player ? player.name : (type === 'system' ? '–°–∏—Å—Ç–µ–º–∞' : '–í–µ–¥—É—â–∏–π'),
      message,
      type,
      timestamp: Date.now()
    })
  }

  distributeRoles() {
    const allPlayers = Array.from(this.players.values())
    const nonHostPlayers = allPlayers.filter(player => player.id !== this.hostId)
    const shuffledRoles = [...this.selectedRoles].sort(() => Math.random() - 0.5)
    
    console.log(`Distributing roles to ${nonHostPlayers.length} players (excluding host)`)
    console.log(`Available roles:`, shuffledRoles)
    
    // Distribute roles only to non-host players
    nonHostPlayers.forEach((player, index) => {
      if (index < shuffledRoles.length) {
        player.role = shuffledRoles[index]
        console.log(`Player ${player.name} got role: ${player.role}`)
      }
    })

    // Put remaining cards in center
    this.gameData.centerCards = shuffledRoles.slice(nonHostPlayers.length)
    console.log(`Center cards:`, this.gameData.centerCards)
    
    // Ensure host has the game_master role
    const hostPlayer = this.players.get(this.hostId)
    if (hostPlayer) {
      hostPlayer.role = 'game_master'
      console.log(`Host ${hostPlayer.name} has role: game_master`)
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
  getWerewolfPlayers() {
    return Array.from(this.players.values()).filter(p => 
      this.isWerewolfRole(p.role) && p.connected
    )
  }

  getVillagerPlayers() {
    return Array.from(this.players.values()).filter(p => 
      !this.isWerewolfRole(p.role) && 
      p.role !== 'tanner' && 
      p.role !== 'game_master' && 
      p.connected
    )
  }

  getAllPlayers() {
    return Array.from(this.players.values()).filter(p => 
      p.role !== 'game_master' && p.connected
    )
  }

  canPlayerMessageGroup(player, groupName) {
    const normalizedGroup = groupName.toLowerCase()
    
    switch (normalizedGroup) {
      case '–æ–±–æ—Ä–æ—Ç–Ω–∏':
      case '–≤–æ–ª–∫–∏':
      case 'wolves':
      case 'werewolves':
        return this.canSeeWerewolfRoles(player.role) || this.isHost(player.id)
      
      case '–¥–µ—Ä–µ–≤–Ω—è':
      case '–∂–∏—Ç–µ–ª–∏':
      case 'village':
      case 'villagers':
        return !this.isWerewolfRole(player.role) || this.isHost(player.id)
      
      case '–≤—Å–µ':
      case 'all':
      case 'everyone':
        return this.isHost(player.id)
      
      default:
        return false
    }
  }

  getGroupMembers(groupName) {
    const normalizedGroup = groupName.toLowerCase()
    
    switch (normalizedGroup) {
      case '–æ–±–æ—Ä–æ—Ç–Ω–∏':
      case '–≤–æ–ª–∫–∏':
      case 'wolves':
      case 'werewolves':
        return this.getWerewolfPlayers()
      
      case '–¥–µ—Ä–µ–≤–Ω—è':
      case '–∂–∏—Ç–µ–ª–∏':
      case 'village':
      case 'villagers':
        return this.getVillagerPlayers()
      
      case '–≤—Å–µ':
      case 'all':
      case 'everyone':
        return this.getAllPlayers()
      
      default:
        return []
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Ö–æ–¥–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
  isPlayerInGroup(playerId, groupName) {
    const player = this.players.get(playerId)
    if (!player || player.role === 'game_master') {
      return false
    }
    
    const groupMembers = this.getGroupMembers(groupName)
    return groupMembers.some(member => member.id === playerId)
  }

  getGroupDisplayName(groupName) {
    const normalizedGroup = groupName.toLowerCase()
    
    const names = {
      '–æ–±–æ—Ä–æ—Ç–Ω–∏': '–û–±–æ—Ä–æ—Ç–Ω–∏',
      '–≤–æ–ª–∫–∏': '–û–±–æ—Ä–æ—Ç–Ω–∏',
      'wolves': '–û–±–æ—Ä–æ—Ç–Ω–∏',
      'werewolves': '–û–±–æ—Ä–æ—Ç–Ω–∏',
      '–¥–µ—Ä–µ–≤–Ω—è': '–î–µ—Ä–µ–≤–Ω—è',
      '–∂–∏—Ç–µ–ª–∏': '–î–µ—Ä–µ–≤–Ω—è',
      'village': '–î–µ—Ä–µ–≤–Ω—è',
      'villagers': '–î–µ—Ä–µ–≤–Ω—è',
      '–≤—Å–µ': '–í—Å–µ –∏–≥—Ä–æ–∫–∏',
      'all': '–í—Å–µ –∏–≥—Ä–æ–∫–∏',
      'everyone': '–í—Å–µ –∏–≥—Ä–æ–∫–∏'
    }
    return names[normalizedGroup] || groupName
  }

  // –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  processVoting() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
    this.players.forEach(player => {
      player.votes = 0
    })

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    const voteCounts = new Map()
    let abstainCount = 0

    this.votes.forEach((targetId, voterId) => {
      if (targetId === null) {
        abstainCount++
      } else {
        const currentCount = voteCounts.get(targetId) || 0
        voteCounts.set(targetId, currentCount + 1)
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    voteCounts.forEach((count, playerId) => {
      const player = this.players.get(playerId)
      if (player) {
        player.votes = count
      }
    })

    const totalVoters = this.getEligibleVoters().length
    const majority = Math.ceil(totalVoters / 2)

    console.log(`Voting results:`)
    console.log(`Total voters: ${totalVoters}, Majority needed: ${majority}`)
    console.log(`Abstain count: ${abstainCount}`)
    console.log(`Vote counts:`, Array.from(voteCounts.entries()))

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç
    let votingMessage = `üó≥Ô∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:**\n`
    
    if (voteCounts.size === 0 && abstainCount === totalVoters) {
      votingMessage += `–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.`
    } else {
      const voteResults = []
      voteCounts.forEach((count, playerId) => {
        const player = this.players.get(playerId)
        if (player && count > 0) {
          voteResults.push(`${player.name}: ${count} –≥–æ–ª–æ—Å${count === 1 ? '' : count < 5 ? '–∞' : '–æ–≤'}`)
        }
      })
      
      if (voteResults.length > 0) {
        votingMessage += voteResults.join(', ')
      }
      
      if (abstainCount > 0) {
        votingMessage += `${voteResults.length > 0 ? ', ' : ''}–í–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å: ${abstainCount}`
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0
    let playersWithMaxVotes = []

    for (const [playerId, voteCount] of voteCounts) {
      if (voteCount > maxVotes) {
        maxVotes = voteCount
        playersWithMaxVotes = [playerId]
      } else if (voteCount === maxVotes && voteCount > 0) {
        playersWithMaxVotes.push(playerId)
      }
    }

    console.log(`Max votes: ${maxVotes}, Players with max votes: ${playersWithMaxVotes.length}`)

    let resultMessage = ""
    let eliminated = []

    if (maxVotes >= majority && playersWithMaxVotes.length === 1) {
      const eliminatedPlayer = this.players.get(playersWithMaxVotes[0])
      console.log(`${eliminatedPlayer.name} eliminated with ${maxVotes} votes`)
      eliminatedPlayer.alive = false
      eliminated = [eliminatedPlayer.id]
      resultMessage = `${eliminatedPlayer.name} –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏ –±—ã–ª —É–±–∏—Ç.`
    } else if (maxVotes < majority) {
      console.log('No one eliminated - majority not reached')
      resultMessage = totalVoters === 0 ? '–ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª.' : `–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –ù–∏–∫—Ç–æ –Ω–µ —É–±–∏—Ç.`
    } else {
      const tiedPlayerNames = playersWithMaxVotes.map(id => this.players.get(id)?.name).join(', ')
      console.log(`Tie detected - ${playersWithMaxVotes.length} players with ${maxVotes} votes each`)
      resultMessage = `–ù–∏—á—å—è –º–µ–∂–¥—É ${tiedPlayerNames}. –ù–∏–∫—Ç–æ –Ω–µ —É–±–∏—Ç.`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
    this.addChatMessage(null, `${votingMessage}\n\n${resultMessage}`, 'system')

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    this.votingRounds++

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫—Ä–æ–º–µ —É–±–∏—Ç—ã—Ö –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏)
    this.players.forEach(player => {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —É–±–∏—Ç—ã –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
      if (player.role !== 'game_master' && player.alive && !eliminated.includes(player.id)) {
        player.survivedDays++
      }
    })

    return {
      eliminated,
      reason: resultMessage,
      votingDetails: votingMessage
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
  checkWinConditions() {
    const alivePlayers = Array.from(this.players.values()).filter(p => 
      p.alive && p.role !== 'game_master'
    )
    
    const aliveWerewolves = alivePlayers.filter(p => this.isWerewolfRole(p.role))
    const aliveVillagers = alivePlayers.filter(p => !this.isWerewolfRole(p.role) && p.role !== 'tanner')
    const aliveTanner = alivePlayers.find(p => p.role === 'tanner')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–±–∏—Ç –Ω–µ—É–¥–∞—á–Ω–∏–∫
    const deadPlayers = Array.from(this.players.values()).filter(p => 
      !p.alive && p.role !== 'game_master'
    )
    const killedTanner = deadPlayers.find(p => p.role === 'tanner')
    
    console.log(`Win check: ${aliveWerewolves.length} werewolves, ${aliveVillagers.length} villagers alive`)
    console.log(`Killed tanner: ${!!killedTanner}, Alive tanner: ${!!aliveTanner}`)
    console.log(`Alive werewolves:`, aliveWerewolves.map(p => `${p.name} (${p.role})`))
    console.log(`Alive villagers:`, aliveVillagers.map(p => `${p.name} (${p.role})`))

    // 1. –ù–ï–£–î–ê–ß–ù–ò–ö –ü–û–ë–ï–ñ–î–ê–ï–¢ - –µ—Å–ª–∏ –µ–≥–æ —É–±–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
    if (killedTanner) {
      return {
        winner: 'tanner',
        message: `üéØ –ù–µ—É–¥–∞—á–Ω–∏–∫ (${killedTanner.name}) –ø–æ–±–µ–¥–∏–ª! –û–Ω –±—ã–ª —É–±–∏—Ç –∏ –¥–æ—Å—Ç–∏–≥ —Å–≤–æ–µ–π —Ü–µ–ª–∏.`,
        gameEnded: true
      }
    }
    
    // 2. –û–ë–û–†–û–¢–ù–ò –ü–û–ë–ï–ñ–î–ê–Æ–¢ - –µ—Å–ª–∏ –≤—Å–µ –∂–∏—Ç–µ–ª–∏ –º–µ—Ä—Ç–≤—ã (–∫—Ä–æ–º–µ –Ω–µ—É–¥–∞—á–Ω–∏–∫–∞)
    if (aliveVillagers.length === 0 && aliveWerewolves.length > 0) {
      return {
        winner: 'werewolves',
        message: `üê∫ –û–±–æ—Ä–æ—Ç–Ω–∏ –ø–æ–±–µ–¥–∏–ª–∏! –í—Å–µ –∂–∏—Ç–µ–ª–∏ —É–±–∏—Ç—ã.`,
        gameEnded: true
      }
    }
    
    // 3. –î–ï–†–ï–í–ù–Ø –ü–û–ë–ï–ñ–î–ê–ï–¢ - –µ—Å–ª–∏ —É–±–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±–æ—Ä–æ—Ç–µ–Ω—å
    const deadWerewolves = deadPlayers.filter(p => this.isWerewolfRole(p.role))
    if (deadWerewolves.length > 0) {
      return {
        winner: 'village',
        message: `üèòÔ∏è –î–µ—Ä–µ–≤–Ω—è –ø–æ–±–µ–¥–∏–ª–∞! –£–±–∏—Ç –æ–±–æ—Ä–æ—Ç–µ–Ω—å: ${deadWerewolves.map(p => p.name).join(', ')}.`,
        gameEnded: true
      }
    }
    
    // // 4. –û–ë–û–†–û–¢–ù–ò –ü–û–ë–ï–ñ–î–ê–Æ–¢ - –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä–æ—Ç–Ω—è –Ω–µ —É–±–∏–ª–∏

    // if (deadWerewolves.length === 0 && aliveWerewolves.length > 0) {
    //   return {
    //     winner: 'werewolves',
    //     message: `üê∫ –û–±–æ—Ä–æ—Ç–Ω–∏ –ø–æ–±–µ–¥–∏–ª–∏! –ù–∏ –æ–¥–∏–Ω –æ–±–æ—Ä–æ—Ç–µ–Ω—å –Ω–µ –±—ã–ª —É–±–∏—Ç.`,
    //     gameEnded: true
    //   }
    // }
    
    // 5. –î–ï–†–ï–í–ù–Ø –ü–û–ë–ï–ñ–î–ê–ï–¢ - –µ—Å–ª–∏ –Ω–µ—Ç –∂–∏–≤—ã—Ö –æ–±–æ—Ä–æ—Ç–Ω–µ–π –≤–æ–æ–±—â–µ
    if (aliveWerewolves.length === 0) {
      return {
        winner: 'village',
        message: `üèòÔ∏è –î–µ—Ä–µ–≤–Ω—è –ø–æ–±–µ–¥–∏–ª–∞! –í—Å–µ –æ–±–æ—Ä–æ—Ç–Ω–∏ –º–µ—Ä—Ç–≤—ã.`,
        gameEnded: true
      }
    }

    // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
    return {
      winner: null,
      message: `–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –ñ–∏–≤—ã: ${aliveWerewolves.length} –æ–±–æ—Ä–æ—Ç–Ω–µ–π, ${aliveVillagers.length} –∂–∏—Ç–µ–ª–µ–π.`,
      gameEnded: false
    }
  }

  // –°–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  resetVoting() {
    this.votes.clear()
    this.players.forEach(player => {
      player.votes = 0
    })
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ (–±–µ–∑ —Ä–æ–ª–µ–π)
  logPlayersSecurely() {
    const players = Array.from(this.players.values())
    return players.map(p => ({
      id: p.id,
      name: p.name,
      connected: p.connected,
      hasRole: !!p.role
    }))
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
  changePlayerColor(socketId, newColor) {
    console.log('üé® GameRoom: changePlayerColor called:', { socketId, newColor })
    const availableColors = [
      'red', 'orange', 'yellow', 'green',
      'blue', 'purple', 'pink', 'brown',
      'grey', 'deep-orange', 'dark-green', 'cyan'
    ]
    
    if (!availableColors.includes(newColor)) {
      console.log('‚ùå GameRoom: Invalid color:', newColor)
      return { success: false, error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ü–≤–µ—Ç' }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
    const usedColors = Array.from(this.players.values())
      .filter(p => p.id !== socketId)
      .map(p => p.color)
    
    console.log('üîç GameRoom: Used colors by other players:', usedColors)
    
    if (usedColors.includes(newColor)) {
      console.log('‚ùå GameRoom: Color already taken:', newColor)
      return { success: false, error: '–≠—Ç–æ—Ç —Ü–≤–µ—Ç —É–∂–µ –∑–∞–Ω—è—Ç' }
    }
    
    const player = this.players.get(socketId)
    if (!player) {
      console.log('‚ùå GameRoom: Player not found:', socketId)
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
    }
    
    const oldColor = player.color
    player.color = newColor
    console.log('‚úÖ GameRoom: Color changed:', { playerId: socketId, playerName: player.name, oldColor, newColor })
    return { success: true }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
  getAvailableColors(excludeSocketId = null) {
    const availableColors = [
      'red', 'orange', 'yellow', 'green',
      'blue', 'purple', 'pink', 'brown', 
      'grey', 'deep-orange', 'dark-green', 'cyan'
    ]
    
    const usedColors = Array.from(this.players.values())
      .filter(p => p.id !== excludeSocketId)
      .map(p => p.color)
    
    return availableColors.filter(color => !usedColors.includes(color))
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–µ—Ä–æ–º
  startTimer(seconds, onTick = null, onEnd = null) {
    this.stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    
    this.timer = Math.max(0, parseInt(seconds) || 0)
    console.log(`‚è∞ Starting timer for ${this.timer} seconds in room ${this.id}`)
    
    if (this.timer <= 0) return
    
    this.timerInterval = setInterval(() => {
      this.timer--
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (onTick) onTick(this.timer)
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
      if (this.timer <= 0) {
        console.log(`‚è∞ Timer ended for room ${this.id}`)
        this.stopTimer()
        if (onEnd) onEnd()
      }
    }, 1000)
  }

  stopTimer() {
    if (this.timerInterval) {
      clearInterval(this.timerInterval)
      this.timerInterval = null
    }
    this.timer = null
  }

  setTimer(seconds) {
    this.timer = Math.max(0, parseInt(seconds) || 0)
  }
}